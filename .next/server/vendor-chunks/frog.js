"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/frog";
exports.ids = ["vendor-chunks/frog"];
exports.modules = {

/***/ "(rsc)/./node_modules/frog/_lib/components/Button.js":
/*!*****************************************************!*\
  !*** ./node_modules/frog/_lib/components/Button.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Button: () => (/* binding */ Button),\n/* harmony export */   ButtonAddCastAction: () => (/* binding */ ButtonAddCastAction),\n/* harmony export */   ButtonLink: () => (/* binding */ ButtonLink),\n/* harmony export */   ButtonMint: () => (/* binding */ ButtonMint),\n/* harmony export */   ButtonRedirect: () => (/* binding */ ButtonRedirect),\n/* harmony export */   ButtonReset: () => (/* binding */ ButtonReset),\n/* harmony export */   ButtonRoot: () => (/* binding */ ButtonRoot),\n/* harmony export */   ButtonTransaction: () => (/* binding */ ButtonTransaction),\n/* harmony export */   buttonPrefix: () => (/* binding */ buttonPrefix)\n/* harmony export */ });\n/* harmony import */ var frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! frog/jsx/jsx-runtime */ \"(rsc)/./node_modules/frog/_lib/jsx/jsx-dev-runtime/index.js\");\n\nconst buttonPrefix = {\n    addCastAction: \"_a\",\n    link: \"_l\",\n    mint: \"_m\",\n    redirect: \"_r\",\n    reset: \"_c\",\n    transaction: \"_t\"\n};\nButtonRoot.__type = \"button\";\nfunction ButtonRoot({ action, children, // @ts-ignore - private\nindex = 1, value }) {\n    return [\n        (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n            property: `fc:frame:button:${index}`,\n            content: normalizeChildren(children),\n            ...value ? {\n                \"data-value\": value\n            } : {}\n        }),\n        (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n            property: `fc:frame:button:${index}:action`,\n            content: \"post\"\n        }),\n        action && (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n            property: `fc:frame:button:${index}:target`,\n            content: action\n        })\n    ];\n}\nButtonAddCastAction.__type = \"button\";\nfunction ButtonAddCastAction({ action, children, name, icon, // @ts-ignore - private\nindex = 1 }) {\n    return [\n        (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n            property: `fc:frame:button:${index}`,\n            content: normalizeChildren(children),\n            \"data-value\": buttonPrefix.addCastAction\n        }),\n        (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n            property: `fc:frame:button:${index}:action`,\n            content: \"link\"\n        }),\n        (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n            property: `fc:frame:button:${index}:target`,\n            content: `https://warpcast.com/~/add-cast-action?postUrl=${action}&name=${name}&actionType=post&icon=${icon}`\n        })\n    ];\n}\nButtonLink.__type = \"button\";\nfunction ButtonLink({ children, // @ts-ignore - private\nindex = 1, href }) {\n    return [\n        (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n            property: `fc:frame:button:${index}`,\n            content: normalizeChildren(children),\n            \"data-value\": buttonPrefix.link\n        }),\n        (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n            property: `fc:frame:button:${index}:action`,\n            content: \"link\"\n        }),\n        (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n            property: `fc:frame:button:${index}:target`,\n            content: href\n        })\n    ];\n}\nButtonMint.__type = \"button\";\nfunction ButtonMint({ children, // @ts-ignore - private\nindex = 1, target }) {\n    return [\n        (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n            property: `fc:frame:button:${index}`,\n            content: normalizeChildren(children),\n            \"data-value\": buttonPrefix.mint\n        }),\n        (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n            property: `fc:frame:button:${index}:action`,\n            content: \"mint\"\n        }),\n        (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n            property: `fc:frame:button:${index}:target`,\n            content: target\n        })\n    ];\n}\nButtonRedirect.__type = \"button\";\nfunction ButtonRedirect({ children, // @ts-ignore - private\nindex = 1, location }) {\n    return [\n        (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n            property: `fc:frame:button:${index}`,\n            content: normalizeChildren(children),\n            \"data-type\": \"redirect\",\n            \"data-value\": `${buttonPrefix.redirect}:${location}`\n        }),\n        (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n            property: `fc:frame:button:${index}:action`,\n            content: \"post_redirect\"\n        })\n    ];\n}\nButtonReset.__type = \"button\";\nfunction ButtonReset({ children, // @ts-ignore - private\nindex = 1 }) {\n    return (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n        property: `fc:frame:button:${index}`,\n        content: normalizeChildren(children),\n        \"data-value\": buttonPrefix.reset,\n        \"data-type\": \"reset\"\n    });\n}\nButtonTransaction.__type = \"button\";\nfunction ButtonTransaction({ action, children, // @ts-ignore - private\nindex = 1, target }) {\n    return [\n        (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n            property: `fc:frame:button:${index}`,\n            content: normalizeChildren(children),\n            \"data-value\": buttonPrefix.transaction\n        }),\n        (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n            property: `fc:frame:button:${index}:action`,\n            content: \"tx\"\n        }),\n        (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n            property: `fc:frame:button:${index}:target`,\n            content: target\n        }),\n        action && (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n            property: `fc:frame:button:${index}:post_url`,\n            content: action\n        })\n    ];\n}\nconst Button = Object.assign(ButtonRoot, {\n    AddCastAction: ButtonAddCastAction,\n    Link: ButtonLink,\n    Mint: ButtonMint,\n    Redirect: ButtonRedirect,\n    Reset: ButtonReset,\n    Transaction: ButtonTransaction\n});\nfunction normalizeChildren(children) {\n    return Array.isArray(children) ? children.join(\"\") : children;\n} //# sourceMappingURL=Button.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/components/Button.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/components/TextInput.js":
/*!********************************************************!*\
  !*** ./node_modules/frog/_lib/components/TextInput.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TextInput: () => (/* binding */ TextInput)\n/* harmony export */ });\n/* harmony import */ var frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! frog/jsx/jsx-runtime */ \"(rsc)/./node_modules/frog/_lib/jsx/jsx-dev-runtime/index.js\");\n\nTextInput.__type = \"text-input\";\nfunction TextInput({ placeholder }) {\n    return (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n        property: \"fc:frame:input:text\",\n        content: placeholder\n    });\n} //# sourceMappingURL=TextInput.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL2NvbXBvbmVudHMvVGV4dElucHV0LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW1EO0FBQ25ERSxVQUFVQyxNQUFNLEdBQUc7QUFDWixTQUFTRCxVQUFVLEVBQUVFLFdBQVcsRUFBRTtJQUNyQyxPQUFPSCw0REFBSUEsQ0FBQyxRQUFRO1FBQUVJLFVBQVU7UUFBdUJDLFNBQVNGO0lBQVk7QUFDaEYsRUFDQSxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZWdnYXItLy4vbm9kZV9tb2R1bGVzL2Zyb2cvX2xpYi9jb21wb25lbnRzL1RleHRJbnB1dC5qcz9iNDc0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcImZyb2cvanN4L2pzeC1ydW50aW1lXCI7XG5UZXh0SW5wdXQuX190eXBlID0gJ3RleHQtaW5wdXQnO1xuZXhwb3J0IGZ1bmN0aW9uIFRleHRJbnB1dCh7IHBsYWNlaG9sZGVyIH0pIHtcbiAgICByZXR1cm4gX2pzeChcIm1ldGFcIiwgeyBwcm9wZXJ0eTogXCJmYzpmcmFtZTppbnB1dDp0ZXh0XCIsIGNvbnRlbnQ6IHBsYWNlaG9sZGVyIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGV4dElucHV0LmpzLm1hcCJdLCJuYW1lcyI6WyJqc3giLCJfanN4IiwiVGV4dElucHV0IiwiX190eXBlIiwicGxhY2Vob2xkZXIiLCJwcm9wZXJ0eSIsImNvbnRlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/components/TextInput.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/dev/api.js":
/*!*******************************************!*\
  !*** ./node_modules/frog/_lib/dev/api.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiRoutes: () => (/* binding */ apiRoutes),\n/* harmony export */   getFrameUrls: () => (/* binding */ getFrameUrls),\n/* harmony export */   getInitialData: () => (/* binding */ getInitialData)\n/* harmony export */ });\n/* harmony import */ var _hono_valibot_validator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hono/valibot-validator */ \"(rsc)/./node_modules/@hono/valibot-validator/dist/esm/index.js\");\n/* harmony import */ var _noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @noble/curves/abstract/utils */ \"(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/utils.js\");\n/* harmony import */ var _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @noble/curves/ed25519 */ \"(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/ed25519.js\");\n/* harmony import */ var hono__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! hono */ \"(rsc)/./node_modules/hono/dist/index.js\");\n/* harmony import */ var hono_cookie__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! hono/cookie */ \"(rsc)/./node_modules/hono/dist/helper/cookie/index.js\");\n/* harmony import */ var hono_http_exception__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! hono/http-exception */ \"(rsc)/./node_modules/hono/dist/http-exception.js\");\n/* harmony import */ var valibot__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! valibot */ \"(rsc)/./node_modules/valibot/dist/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./constants.js */ \"(rsc)/./node_modules/frog/_lib/dev/constants.js\");\n/* harmony import */ var _schemas_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./schemas.js */ \"(rsc)/./node_modules/frog/_lib/dev/schemas.js\");\n/* harmony import */ var _utils_fetchFrame_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/fetchFrame.js */ \"(rsc)/./node_modules/frog/_lib/dev/utils/fetchFrame.js\");\n/* harmony import */ var _utils_getHtmlSize_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/getHtmlSize.js */ \"(rsc)/./node_modules/frog/_lib/dev/utils/getHtmlSize.js\");\n/* harmony import */ var _utils_getImageSize_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/getImageSize.js */ \"(rsc)/./node_modules/frog/_lib/dev/utils/getImageSize.js\");\n/* harmony import */ var _utils_htmlToMetadata_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/htmlToMetadata.js */ \"(rsc)/./node_modules/frog/_lib/dev/utils/htmlToMetadata.js\");\n/* harmony import */ var _utils_uid_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/uid.js */ \"(rsc)/./node_modules/frog/_lib/dev/utils/uid.js\");\n/* harmony import */ var _utils_warpcast_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./utils/warpcast.js */ \"(rsc)/./node_modules/frog/_lib/dev/utils/warpcast.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction apiRoutes(options) {\n    const { appFid, appMnemonic, hub, routes, secret } = options;\n    return new hono__WEBPACK_IMPORTED_MODULE_1__.Hono().use(\"*\", async (c, next)=>{\n        const userCookie = (0,hono_cookie__WEBPACK_IMPORTED_MODULE_2__.getCookie)(c, \"user\");\n        const fid = userCookie ? JSON.parse(userCookie).userFid : undefined;\n        c.set(\"fid\", fid);\n        const sessionCookie = secret ? await (0,hono_cookie__WEBPACK_IMPORTED_MODULE_2__.getSignedCookie)(c, secret, \"session\") : (0,hono_cookie__WEBPACK_IMPORTED_MODULE_2__.getCookie)(c, \"session\");\n        const keypair = sessionCookie ? JSON.parse(sessionCookie) : undefined;\n        c.set(\"keypair\", keypair);\n        await next();\n    }).get(\"/frames\", (c)=>{\n        const url = new URL(c.req.url);\n        const frameUrls = getFrameUrls(url.origin, routes);\n        return c.json(frameUrls);\n    }).get(\"/frames/:url\", async (c)=>{\n        const url = decodeURIComponent(c.req.param(\"url\"));\n        const initialData = await getInitialData(url);\n        return c.json(initialData);\n    }).post(\"/frames/:url/action\", (0,_hono_valibot_validator__WEBPACK_IMPORTED_MODULE_0__.vValidator)(\"json\", _schemas_js__WEBPACK_IMPORTED_MODULE_4__.postSchema), async (c)=>{\n        const url = decodeURIComponent(c.req.param(\"url\"));\n        const json = c.req.valid(\"json\");\n        const fid = json.fid ?? c.var.fid ?? _constants_js__WEBPACK_IMPORTED_MODULE_5__.defaultFid;\n        const body = {\n            ...json,\n            fid\n        };\n        const { response, speed } = await (0,_utils_fetchFrame_js__WEBPACK_IMPORTED_MODULE_6__.fetchFrame)({\n            body,\n            privateKey: c.var.keypair?.privateKey,\n            url\n        });\n        if (!response) throw new Error(\"Failed to fetch frame\");\n        const cloned = response.clone();\n        const text = await response.text();\n        const metadata = (0,_utils_htmlToMetadata_js__WEBPACK_IMPORTED_MODULE_7__.htmlToMetadata)(text);\n        const { context, frame } = metadata;\n        const sizes = await Promise.all([\n            (0,_utils_getHtmlSize_js__WEBPACK_IMPORTED_MODULE_8__.getHtmlSize)(cloned),\n            (0,_utils_getImageSize_js__WEBPACK_IMPORTED_MODULE_9__.getImageSize)(frame.imageUrl)\n        ]);\n        return c.json({\n            id: (0,_utils_uid_js__WEBPACK_IMPORTED_MODULE_10__.uid)(),\n            timestamp: Date.now(),\n            type: \"action\",\n            method: \"post\",\n            body,\n            context,\n            frame,\n            metrics: {\n                htmlSize: sizes[0],\n                imageSize: sizes[1],\n                speed: speed\n            },\n            response: {\n                success: true,\n                error: undefined,\n                status: response.status,\n                statusText: response.statusText\n            },\n            url\n        });\n    }).post(\"/frames/:url/redirect\", (0,_hono_valibot_validator__WEBPACK_IMPORTED_MODULE_0__.vValidator)(\"json\", _schemas_js__WEBPACK_IMPORTED_MODULE_4__.postSchema), async (c)=>{\n        const url = decodeURIComponent(c.req.param(\"url\"));\n        const json = c.req.valid(\"json\");\n        const fid = json.fid ?? c.var.fid ?? _constants_js__WEBPACK_IMPORTED_MODULE_5__.defaultFid;\n        const body = {\n            ...json,\n            fid\n        };\n        const { error, response, speed } = await (0,_utils_fetchFrame_js__WEBPACK_IMPORTED_MODULE_6__.fetchFrame)({\n            body,\n            privateKey: c.var.keypair?.privateKey,\n            url\n        });\n        return c.json({\n            id: (0,_utils_uid_js__WEBPACK_IMPORTED_MODULE_10__.uid)(),\n            timestamp: Date.now(),\n            type: \"redirect\",\n            method: \"post\",\n            body,\n            metrics: {\n                speed\n            },\n            response: response?.redirected ? {\n                success: true,\n                location: response.url,\n                error: undefined,\n                status: 302,\n                statusText: \"Found\"\n            } : {\n                success: false,\n                error: error?.cause ? `${error.cause}`.replace(\"Error: \", \"\") : error?.message,\n                status: response?.status ?? 500,\n                statusText: response?.statusText ?? \"Internal Server Error\"\n            },\n            sourceFrameId: json.sourceFrameId,\n            url\n        });\n    }).post(\"/frames/:url/tx\", (0,_hono_valibot_validator__WEBPACK_IMPORTED_MODULE_0__.vValidator)(\"json\", _schemas_js__WEBPACK_IMPORTED_MODULE_4__.postSchema), async (c)=>{\n        const url = decodeURIComponent(c.req.param(\"url\"));\n        const json = c.req.valid(\"json\");\n        const fid = json.fid ?? c.var.fid ?? _constants_js__WEBPACK_IMPORTED_MODULE_5__.defaultFid;\n        const body = {\n            ...json,\n            fid\n        };\n        const { response, speed } = await (0,_utils_fetchFrame_js__WEBPACK_IMPORTED_MODULE_6__.fetchFrame)({\n            body,\n            privateKey: c.var.keypair?.privateKey,\n            url\n        });\n        // TODO: Handle errors\n        if (!response) throw new Error(\"Failed to fetch frame\");\n        const data = await response.json();\n        return c.json({\n            id: (0,_utils_uid_js__WEBPACK_IMPORTED_MODULE_10__.uid)(),\n            timestamp: Date.now(),\n            type: \"tx\",\n            method: \"post\",\n            body,\n            metrics: {\n                speed\n            },\n            response: {\n                success: true,\n                data,\n                error: undefined,\n                status: response.status,\n                statusText: response.statusText\n            },\n            sourceFrameId: json.sourceFrameId,\n            url\n        });\n    }).get(\"/auth/code\", async (c)=>{\n        // 1. Create keypair\n        const privateKeyBytes = _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_11__.ed25519.utils.randomPrivateKey();\n        const publicKeyBytes = _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_11__.ed25519.getPublicKey(privateKeyBytes);\n        const privateKey = `0x${(0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_12__.bytesToHex)(privateKeyBytes)}`;\n        const publicKey = `0x${(0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_12__.bytesToHex)(publicKeyBytes)}`;\n        // 2. Sign key request. By default, use hosted service.\n        const { deadline, requestFid, signature } = await (0,_utils_warpcast_js__WEBPACK_IMPORTED_MODULE_13__.getSignedKeyRequest)({\n            appFid,\n            appMnemonic,\n            publicKey\n        });\n        // 3. Create key request to register public key\n        const response = await (0,_utils_warpcast_js__WEBPACK_IMPORTED_MODULE_13__.postSignedKeyRequest)({\n            deadline,\n            publicKey,\n            requestFid,\n            signature\n        });\n        const { token, deeplinkUrl: url } = response.result.signedKeyRequest;\n        // 4. Save keypair in cookie\n        const value = JSON.stringify({\n            privateKey,\n            publicKey\n        });\n        if (secret) await (0,hono_cookie__WEBPACK_IMPORTED_MODULE_2__.setSignedCookie)(c, \"session\", value, secret, _constants_js__WEBPACK_IMPORTED_MODULE_5__.defaultCookieOptions);\n        else (0,hono_cookie__WEBPACK_IMPORTED_MODULE_2__.setCookie)(c, \"session\", value, {\n            ..._constants_js__WEBPACK_IMPORTED_MODULE_5__.defaultCookieOptions,\n            httpOnly: true\n        });\n        return c.json({\n            token,\n            url\n        });\n    }).get(\"/auth/status/:token\", async (c)=>{\n        const token = c.req.param(\"token\");\n        const response = await (0,_utils_warpcast_js__WEBPACK_IMPORTED_MODULE_13__.getSignedKeyRequestForToken)(token);\n        const { state = \"pending\", userFid } = response.result?.signedKeyRequest ?? {};\n        if (state === \"completed\") {\n            let user = {\n                state,\n                token,\n                userFid: userFid\n            };\n            if (hub && userFid) {\n                const data = await (0,_utils_warpcast_js__WEBPACK_IMPORTED_MODULE_13__.getUserDataByFid)(hub, userFid);\n                user = {\n                    ...user,\n                    ...data\n                };\n            }\n            (0,hono_cookie__WEBPACK_IMPORTED_MODULE_2__.setCookie)(c, \"user\", JSON.stringify({\n                token,\n                userFid\n            }), _constants_js__WEBPACK_IMPORTED_MODULE_5__.defaultCookieOptions);\n            return c.json(user);\n        }\n        return c.json({\n            state\n        });\n    }).post(\"/auth/logout\", async (c)=>{\n        (0,hono_cookie__WEBPACK_IMPORTED_MODULE_2__.deleteCookie)(c, \"session\");\n        (0,hono_cookie__WEBPACK_IMPORTED_MODULE_2__.deleteCookie)(c, \"user\");\n        return c.json({\n            success: true\n        });\n    }).post(\"/debug/image/:url\", (0,_hono_valibot_validator__WEBPACK_IMPORTED_MODULE_0__.vValidator)(\"json\", (0,valibot__WEBPACK_IMPORTED_MODULE_14__.union)([\n        (0,valibot__WEBPACK_IMPORTED_MODULE_14__.object)({}),\n        _schemas_js__WEBPACK_IMPORTED_MODULE_4__.postSchema\n    ])), async (c)=>{\n        const url = decodeURIComponent(c.req.param(\"url\"));\n        let text;\n        const body = await c.req.json();\n        const hasBody = Object.keys(body).length > 0;\n        const headers = {\n            ..._constants_js__WEBPACK_IMPORTED_MODULE_5__.defaultHeaders,\n            Accept: \"text/html\"\n        };\n        if (hasBody) {\n            const json = (0,valibot__WEBPACK_IMPORTED_MODULE_14__.parse)(_schemas_js__WEBPACK_IMPORTED_MODULE_4__.postSchema, body);\n            const params = {\n                body: {\n                    ...json,\n                    fid: json.fid ?? c.var.fid ?? _constants_js__WEBPACK_IMPORTED_MODULE_5__.defaultFid\n                },\n                headers,\n                privateKey: c.var.keypair?.privateKey,\n                url\n            };\n            text = await (0,_utils_fetchFrame_js__WEBPACK_IMPORTED_MODULE_6__.fetchFrame)(params).then((result)=>result.response).then((response)=>response?.text());\n        } else text = await fetch(url, {\n            headers\n        }).then((response)=>response.text());\n        if (!text) throw new hono_http_exception__WEBPACK_IMPORTED_MODULE_3__.HTTPException(500, {\n            message: \"Failed to fetch\"\n        });\n        return c.html(text);\n    });\n}\nfunction getFrameUrls(origin, routes) {\n    const frameUrls = [];\n    for (const route of routes){\n        if (route.isMiddleware) continue;\n        if (route.method !== \"ALL\") continue;\n        frameUrls.push(`${origin}${route.path}`);\n    }\n    return frameUrls;\n}\nasync function getInitialData(frameUrl) {\n    const t0 = performance.now();\n    const response = await fetch(frameUrl, {\n        headers: _constants_js__WEBPACK_IMPORTED_MODULE_5__.defaultHeaders\n    });\n    const t1 = performance.now();\n    const speed = t1 - t0;\n    const cloned = response.clone();\n    const text = await response.text();\n    // Vercel requires authentication by default for preview deployments\n    if (text.includes(\"Authentication Required\") && text.includes(\"vercel\")) throw new hono_http_exception__WEBPACK_IMPORTED_MODULE_3__.HTTPException(401, {\n        message: \"Vercel Authentication blocked Frog Devtools\\nLearn more: https://vercel.com/docs/security/deployment-protection\"\n    });\n    const metadata = (0,_utils_htmlToMetadata_js__WEBPACK_IMPORTED_MODULE_7__.htmlToMetadata)(text);\n    const { context, frame } = metadata;\n    const sizes = await Promise.all([\n        (0,_utils_getHtmlSize_js__WEBPACK_IMPORTED_MODULE_8__.getHtmlSize)(cloned),\n        (0,_utils_getImageSize_js__WEBPACK_IMPORTED_MODULE_9__.getImageSize)(frame.imageUrl)\n    ]);\n    return {\n        id: (0,_utils_uid_js__WEBPACK_IMPORTED_MODULE_10__.uid)(),\n        timestamp: Date.now(),\n        type: \"initial\",\n        method: \"get\",\n        context,\n        frame,\n        metrics: {\n            htmlSize: sizes[0],\n            imageSize: sizes[1],\n            speed\n        },\n        response: {\n            success: true,\n            error: undefined,\n            status: response.status,\n            statusText: response.statusText\n        },\n        url: frameUrl\n    };\n} //# sourceMappingURL=api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/dev/api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/dev/constants.js":
/*!*************************************************!*\
  !*** ./node_modules/frog/_lib/dev/constants.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultCastId: () => (/* binding */ defaultCastId),\n/* harmony export */   defaultCookieOptions: () => (/* binding */ defaultCookieOptions),\n/* harmony export */   defaultFid: () => (/* binding */ defaultFid),\n/* harmony export */   defaultHeaders: () => (/* binding */ defaultHeaders),\n/* harmony export */   uiDistDir: () => (/* binding */ uiDistDir)\n/* harmony export */ });\nconst defaultHeaders = {\n    \"x-frog-dev\": \"true\"\n};\nconst defaultFid = 1;\nconst defaultCastId = {\n    fid: defaultFid,\n    hash: \"0x0000000000000000000000000000000000000000\"\n};\nconst defaultCookieOptions = {\n    maxAge: 30 * 86400,\n    sameSite: \"Strict\",\n    secure: true\n};\nconst uiDistDir = \".frog\"; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL2Rldi9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBTyxNQUFNQSxpQkFBaUI7SUFDMUIsY0FBYztBQUNsQixFQUFFO0FBQ0ssTUFBTUMsYUFBYSxFQUFFO0FBQ3JCLE1BQU1DLGdCQUFnQjtJQUN6QkMsS0FBS0Y7SUFDTEcsTUFBTTtBQUNWLEVBQUU7QUFDSyxNQUFNQyx1QkFBdUI7SUFDaENDLFFBQVEsS0FBSztJQUNiQyxVQUFVO0lBQ1ZDLFFBQVE7QUFDWixFQUFFO0FBQ0ssTUFBTUMsWUFBWSxRQUFRLENBQ2pDLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2JlZ2dhci0vLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL2Rldi9jb25zdGFudHMuanM/ZmVkMSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgZGVmYXVsdEhlYWRlcnMgPSB7XG4gICAgJ3gtZnJvZy1kZXYnOiAndHJ1ZScsXG59O1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRGaWQgPSAxO1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRDYXN0SWQgPSB7XG4gICAgZmlkOiBkZWZhdWx0RmlkLFxuICAgIGhhc2g6ICcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxufTtcbmV4cG9ydCBjb25zdCBkZWZhdWx0Q29va2llT3B0aW9ucyA9IHtcbiAgICBtYXhBZ2U6IDMwICogODY0MDAsXG4gICAgc2FtZVNpdGU6ICdTdHJpY3QnLFxuICAgIHNlY3VyZTogdHJ1ZSxcbn07XG5leHBvcnQgY29uc3QgdWlEaXN0RGlyID0gJy5mcm9nJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiXSwibmFtZXMiOlsiZGVmYXVsdEhlYWRlcnMiLCJkZWZhdWx0RmlkIiwiZGVmYXVsdENhc3RJZCIsImZpZCIsImhhc2giLCJkZWZhdWx0Q29va2llT3B0aW9ucyIsIm1heEFnZSIsInNhbWVTaXRlIiwic2VjdXJlIiwidWlEaXN0RGlyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/dev/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/dev/devtools.js":
/*!************************************************!*\
  !*** ./node_modules/frog/_lib/dev/devtools.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   devtools: () => (/* binding */ devtools),\n/* harmony export */   routes: () => (/* binding */ routes)\n/* harmony export */ });\n/* harmony import */ var frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! frog/jsx/jsx-runtime */ \"(rsc)/./node_modules/frog/_lib/jsx/jsx-dev-runtime/index.js\");\n/* harmony import */ var frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! frog/jsx/jsx-runtime */ \"(rsc)/./node_modules/hono/dist/jsx/index.js\");\n/* harmony import */ var hono__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hono */ \"(rsc)/./node_modules/hono/dist/index.js\");\n/* harmony import */ var hono_cookie__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! hono/cookie */ \"(rsc)/./node_modules/hono/dist/helper/cookie/index.js\");\n/* harmony import */ var hono_dev__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! hono/dev */ \"(rsc)/./node_modules/hono/dist/helper/dev/index.js\");\n/* harmony import */ var hono_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! hono/html */ \"(rsc)/./node_modules/hono/dist/helper/html/index.js\");\n/* harmony import */ var hono_http_exception__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! hono/http-exception */ \"(rsc)/./node_modules/hono/dist/http-exception.js\");\n/* harmony import */ var _utils_getRequestUrl_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/getRequestUrl.js */ \"(rsc)/./node_modules/frog/_lib/utils/getRequestUrl.js\");\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./api.js */ \"(rsc)/./node_modules/frog/_lib/dev/api.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./constants.js */ \"(rsc)/./node_modules/frog/_lib/dev/constants.js\");\n/* harmony import */ var _utils_warpcast_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/warpcast.js */ \"(rsc)/./node_modules/frog/_lib/dev/utils/warpcast.js\");\n\n\n\n\n\n\n\n\n\n\nfunction devtools(frog, options) {\n    if (!(frog.dev?.enabled ?? true)) return;\n    const { appFid = frog.dev?.appFid, appMnemonic = frog.dev?.appMnemonic, assetsPath, basePath = \"/dev\", root, serveStatic, serveStaticOptions } = options ?? {};\n    let publicPath = \"\";\n    if (assetsPath) publicPath = assetsPath === \"/\" ? \"\" : assetsPath;\n    else if (serveStatic) publicPath = `.${basePath}`;\n    else if (frog.assetsPath) publicPath = frog.assetsPath === \"/\" ? \"\" : frog.assetsPath;\n    else publicPath = `/${_constants_js__WEBPACK_IMPORTED_MODULE_5__.uiDistDir}`;\n    const rootBasePath = frog.basePath === \"/\" ? \"\" : frog.basePath;\n    const devBasePath = `${rootBasePath}${basePath}`;\n    const app = routes({\n        appFid,\n        appMnemonic,\n        basePath: devBasePath,\n        hub: frog.hub || (frog.hubApiUrl ? {\n            apiUrl: frog.hubApiUrl\n        } : undefined),\n        publicPath,\n        root,\n        routes: (0,hono_dev__WEBPACK_IMPORTED_MODULE_2__.inspectRoutes)(frog.hono),\n        secret: frog.secret,\n        serveStatic,\n        serveStaticOptions\n    });\n    frog.hono.route(basePath, app);\n    frog._dev = devBasePath;\n}\nfunction routes(options) {\n    const { appFid, appMnemonic, basePath, hub, publicPath, root, routes, secret, serveStatic, serveStaticOptions } = options;\n    const app = new hono__WEBPACK_IMPORTED_MODULE_0__.Hono();\n    const assetsPath = publicPath.endsWith(\"/\") ? publicPath.replace(/\\/$/, \"\") : publicPath;\n    app.get(\"/\", async (c)=>{\n        const { origin } = (0,_utils_getRequestUrl_js__WEBPACK_IMPORTED_MODULE_6__.getRequestUrl)(c.req);\n        const baseUrl = `${origin}${basePath}`;\n        let frameUrls = [];\n        let initialData = undefined;\n        const url = c.req.query(\"url\");\n        if (url || routes.length) {\n            frameUrls = (0,_api_js__WEBPACK_IMPORTED_MODULE_7__.getFrameUrls)(origin, routes);\n            let frameUrl = frameUrls[0];\n            if (url) {\n                const tmpUrl = `${origin}${url}`;\n                if (url.startsWith(\"/\")) frameUrl = tmpUrl;\n                else frameUrl = url;\n            }\n            try {\n                if (frameUrl) initialData = await (0,_api_js__WEBPACK_IMPORTED_MODULE_7__.getInitialData)(frameUrl);\n            } catch (error) {\n                if (error instanceof hono_http_exception__WEBPACK_IMPORTED_MODULE_4__.HTTPException) throw error;\n            }\n        }\n        let user = undefined;\n        const cookie = (0,hono_cookie__WEBPACK_IMPORTED_MODULE_1__.getCookie)(c, \"user\");\n        if (cookie) try {\n            const parsed = JSON.parse(cookie);\n            if (parsed && hub) {\n                const data = await (0,_utils_warpcast_js__WEBPACK_IMPORTED_MODULE_8__.getUserDataByFid)(hub, parsed.userFid);\n                user = {\n                    state: \"completed\",\n                    ...parsed,\n                    ...data\n                };\n            }\n        } catch  {}\n        const bootstrap = JSON.stringify({\n            data: initialData,\n            frameUrls,\n            user\n        });\n        const title = initialData ? `frame: ${new URL(initialData.url).pathname}` : \"Frog Devtools\";\n        return c.html((0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.Fragment, {\n            children: [\n                hono_html__WEBPACK_IMPORTED_MODULE_3__.html`<!doctype html>`,\n                (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(\"html\", {\n                    lang: \"en\",\n                    children: [\n                        (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(\"head\", {\n                            children: [\n                                (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(\"meta\", {\n                                    charset: \"UTF-8\"\n                                }),\n                                (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(\"meta\", {\n                                    name: \"viewport\",\n                                    content: \"width=device-width, initial-scale=1.0\"\n                                }),\n                                (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(\"title\", {\n                                    children: title\n                                }),\n                                (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(\"script\", {\n                                    type: \"module\",\n                                    children: hono_html__WEBPACK_IMPORTED_MODULE_3__.html`globalThis.__FROG_BASE_URL__ = '${baseUrl}'`\n                                }),\n                                (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(\"script\", {\n                                    type: \"module\",\n                                    crossorigin: \"\",\n                                    src: `${assetsPath}/main.js`\n                                }),\n                                (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(\"link\", {\n                                    rel: \"stylesheet\",\n                                    crossorigin: \"\",\n                                    href: `${assetsPath}/assets/main.css`\n                                }),\n                                (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(\"link\", {\n                                    rel: \"alternate icon\",\n                                    type: \"image/png\",\n                                    href: `${assetsPath}/assets/icon.png`\n                                }),\n                                (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(\"style\", {\n                                    id: \"__SSR_STYLE__\",\n                                    children: hono_html__WEBPACK_IMPORTED_MODULE_3__.html`\n                  @media (prefers-color-scheme: dark) {\n                    html {\n                      background-color: #000;\n                    }\n                  }\n                `\n                                })\n                            ]\n                        }),\n                        (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(\"body\", {\n                            children: [\n                                (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(\"div\", {\n                                    id: \"root\"\n                                }),\n                                (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxDEV)(\"script\", {\n                                    id: \"__FROG_DATA__\",\n                                    type: \"application/json\",\n                                    // biome-ignore lint/security/noDangerouslySetInnerHtml: <explanation>\n                                    dangerouslySetInnerHTML: {\n                                        __html: bootstrap\n                                    }\n                                })\n                            ]\n                        })\n                    ]\n                })\n            ]\n        }));\n    }).route(\"/api\", (0,_api_js__WEBPACK_IMPORTED_MODULE_7__.apiRoutes)({\n        appFid,\n        appMnemonic,\n        hub,\n        routes,\n        secret\n    }));\n    if (serveStatic) app.get(\"/*\", serveStatic({\n        manifest: \"\",\n        rewriteRequestPath (path) {\n            return path.replace(basePath, _constants_js__WEBPACK_IMPORTED_MODULE_5__.uiDistDir);\n        },\n        root,\n        ...serveStaticOptions\n    }));\n    return app;\n} //# sourceMappingURL=devtools.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/dev/devtools.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/dev/index.js":
/*!*********************************************!*\
  !*** ./node_modules/frog/_lib/dev/index.js ***!
  \*********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   devtools: () => (/* binding */ devtools)\n/* harmony export */ });\n/* harmony import */ var hono__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hono */ \"(rsc)/./node_modules/hono/dist/index.js\");\n/* harmony import */ var _devtools_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./devtools.js */ \"(rsc)/./node_modules/frog/_lib/dev/devtools.js\");\n/* harmony import */ var _utils_getUiRoot_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/getUiRoot.js */ \"(rsc)/./node_modules/frog/_lib/dev/utils/getUiRoot.js\");\n\n\n\nconst root = await (0,_utils_getUiRoot_js__WEBPACK_IMPORTED_MODULE_1__.getUiRoot)();\n/**\n * Built-in devtools with live preview, hot reload, time-travel debugging, and more.\n *\n * @see https://frog.fm/dev/devtools\n */ function devtools(frog, options) {\n    (0,_devtools_js__WEBPACK_IMPORTED_MODULE_2__.devtools)(frog, {\n        ...options,\n        root\n    });\n} //# sourceMappingURL=index.js.map\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL2Rldi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFzQjtBQUNxQztBQUNWO0FBQ2pELE1BQU1HLE9BQU8sTUFBTUQsOERBQVNBO0FBQzVCOzs7O0NBSUMsR0FDTSxTQUFTRixTQUFTSSxJQUFJLEVBQUVDLE9BQU87SUFDbENKLHNEQUFhQSxDQUFDRyxNQUFNO1FBQUUsR0FBR0MsT0FBTztRQUFFRjtJQUFLO0FBQzNDLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmVnZ2FyLS8uL25vZGVfbW9kdWxlcy9mcm9nL19saWIvZGV2L2luZGV4LmpzP2VhZTgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHt9IGZyb20gJ2hvbm8nO1xuaW1wb3J0IHsgZGV2dG9vbHMgYXMgZGV2dG9vbHNfYmFzZSwgfSBmcm9tICcuL2RldnRvb2xzLmpzJztcbmltcG9ydCB7IGdldFVpUm9vdCB9IGZyb20gJy4vdXRpbHMvZ2V0VWlSb290LmpzJztcbmNvbnN0IHJvb3QgPSBhd2FpdCBnZXRVaVJvb3QoKTtcbi8qKlxuICogQnVpbHQtaW4gZGV2dG9vbHMgd2l0aCBsaXZlIHByZXZpZXcsIGhvdCByZWxvYWQsIHRpbWUtdHJhdmVsIGRlYnVnZ2luZywgYW5kIG1vcmUuXG4gKlxuICogQHNlZSBodHRwczovL2Zyb2cuZm0vZGV2L2RldnRvb2xzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXZ0b29scyhmcm9nLCBvcHRpb25zKSB7XG4gICAgZGV2dG9vbHNfYmFzZShmcm9nLCB7IC4uLm9wdGlvbnMsIHJvb3QgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiZGV2dG9vbHMiLCJkZXZ0b29sc19iYXNlIiwiZ2V0VWlSb290Iiwicm9vdCIsImZyb2ciLCJvcHRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/dev/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/dev/schemas.js":
/*!***********************************************!*\
  !*** ./node_modules/frog/_lib/dev/schemas.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   postSchema: () => (/* binding */ postSchema)\n/* harmony export */ });\n/* harmony import */ var valibot__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! valibot */ \"(rsc)/./node_modules/valibot/dist/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"(rsc)/./node_modules/frog/_lib/dev/constants.js\");\n\n\n// TODO: Add additional validations\nconst postSchema = (0,valibot__WEBPACK_IMPORTED_MODULE_0__.object)({\n    buttonIndex: (0,valibot__WEBPACK_IMPORTED_MODULE_0__.number)([\n        (0,valibot__WEBPACK_IMPORTED_MODULE_0__.integer)(),\n        (0,valibot__WEBPACK_IMPORTED_MODULE_0__.minValue)(1),\n        (0,valibot__WEBPACK_IMPORTED_MODULE_0__.maxValue)(4)\n    ]),\n    castId: (0,valibot__WEBPACK_IMPORTED_MODULE_0__.optional)((0,valibot__WEBPACK_IMPORTED_MODULE_0__.object)({\n        fid: (0,valibot__WEBPACK_IMPORTED_MODULE_0__.number)([\n            (0,valibot__WEBPACK_IMPORTED_MODULE_0__.integer)(),\n            (0,valibot__WEBPACK_IMPORTED_MODULE_0__.minValue)(1)\n        ]),\n        hash: (0,valibot__WEBPACK_IMPORTED_MODULE_0__.string)()\n    }), _constants_js__WEBPACK_IMPORTED_MODULE_1__.defaultCastId),\n    fid: (0,valibot__WEBPACK_IMPORTED_MODULE_0__.number)([\n        (0,valibot__WEBPACK_IMPORTED_MODULE_0__.integer)(),\n        (0,valibot__WEBPACK_IMPORTED_MODULE_0__.minValue)(1)\n    ]),\n    fromAddress: (0,valibot__WEBPACK_IMPORTED_MODULE_0__.union)([\n        (0,valibot__WEBPACK_IMPORTED_MODULE_0__.undefined_)(),\n        (0,valibot__WEBPACK_IMPORTED_MODULE_0__.string)()\n    ]),\n    inputText: (0,valibot__WEBPACK_IMPORTED_MODULE_0__.union)([\n        (0,valibot__WEBPACK_IMPORTED_MODULE_0__.undefined_)(),\n        (0,valibot__WEBPACK_IMPORTED_MODULE_0__.string)()\n    ]),\n    state: (0,valibot__WEBPACK_IMPORTED_MODULE_0__.union)([\n        (0,valibot__WEBPACK_IMPORTED_MODULE_0__.undefined_)(),\n        (0,valibot__WEBPACK_IMPORTED_MODULE_0__.string)()\n    ]),\n    transactionId: (0,valibot__WEBPACK_IMPORTED_MODULE_0__.union)([\n        (0,valibot__WEBPACK_IMPORTED_MODULE_0__.undefined_)(),\n        (0,valibot__WEBPACK_IMPORTED_MODULE_0__.string)()\n    ]),\n    sourceFrameId: (0,valibot__WEBPACK_IMPORTED_MODULE_0__.string)()\n}); //# sourceMappingURL=schemas.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL2Rldi9zY2hlbWFzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE0RztBQUM3RDtBQUMvQyxtQ0FBbUM7QUFDNUIsTUFBTVUsYUFBYU4sK0NBQU1BLENBQUM7SUFDN0JPLGFBQWFSLCtDQUFNQSxDQUFDO1FBQUNILGdEQUFPQTtRQUFJRSxpREFBUUEsQ0FBQztRQUFJRCxpREFBUUEsQ0FBQztLQUFHO0lBQ3pEVyxRQUFRUCxpREFBUUEsQ0FBQ0QsK0NBQU1BLENBQUM7UUFDcEJTLEtBQUtWLCtDQUFNQSxDQUFDO1lBQUNILGdEQUFPQTtZQUFJRSxpREFBUUEsQ0FBQztTQUFHO1FBQ3BDWSxNQUFNUiwrQ0FBTUE7SUFDaEIsSUFBSUcsd0RBQWFBO0lBQ2pCSSxLQUFLViwrQ0FBTUEsQ0FBQztRQUFDSCxnREFBT0E7UUFBSUUsaURBQVFBLENBQUM7S0FBRztJQUNwQ2EsYUFBYVAsOENBQUtBLENBQUM7UUFBQ0QsbURBQVVBO1FBQUlELCtDQUFNQTtLQUFHO0lBQzNDVSxXQUFXUiw4Q0FBS0EsQ0FBQztRQUFDRCxtREFBVUE7UUFBSUQsK0NBQU1BO0tBQUc7SUFDekNXLE9BQU9ULDhDQUFLQSxDQUFDO1FBQUNELG1EQUFVQTtRQUFJRCwrQ0FBTUE7S0FBRztJQUNyQ1ksZUFBZVYsOENBQUtBLENBQUM7UUFBQ0QsbURBQVVBO1FBQUlELCtDQUFNQTtLQUFHO0lBQzdDYSxlQUFlYiwrQ0FBTUE7QUFDekIsR0FBRyxDQUNILG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2JlZ2dhci0vLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL2Rldi9zY2hlbWFzLmpzPzM2ZjMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW50ZWdlciwgbWF4VmFsdWUsIG1pblZhbHVlLCBudW1iZXIsIG9iamVjdCwgb3B0aW9uYWwsIHN0cmluZywgdW5kZWZpbmVkXywgdW5pb24sIH0gZnJvbSAndmFsaWJvdCc7XG5pbXBvcnQgeyBkZWZhdWx0Q2FzdElkIH0gZnJvbSAnLi9jb25zdGFudHMuanMnO1xuLy8gVE9ETzogQWRkIGFkZGl0aW9uYWwgdmFsaWRhdGlvbnNcbmV4cG9ydCBjb25zdCBwb3N0U2NoZW1hID0gb2JqZWN0KHtcbiAgICBidXR0b25JbmRleDogbnVtYmVyKFtpbnRlZ2VyKCksIG1pblZhbHVlKDEpLCBtYXhWYWx1ZSg0KV0pLFxuICAgIGNhc3RJZDogb3B0aW9uYWwob2JqZWN0KHtcbiAgICAgICAgZmlkOiBudW1iZXIoW2ludGVnZXIoKSwgbWluVmFsdWUoMSldKSxcbiAgICAgICAgaGFzaDogc3RyaW5nKCksXG4gICAgfSksIGRlZmF1bHRDYXN0SWQpLFxuICAgIGZpZDogbnVtYmVyKFtpbnRlZ2VyKCksIG1pblZhbHVlKDEpXSksXG4gICAgZnJvbUFkZHJlc3M6IHVuaW9uKFt1bmRlZmluZWRfKCksIHN0cmluZygpXSksXG4gICAgaW5wdXRUZXh0OiB1bmlvbihbdW5kZWZpbmVkXygpLCBzdHJpbmcoKV0pLFxuICAgIHN0YXRlOiB1bmlvbihbdW5kZWZpbmVkXygpLCBzdHJpbmcoKV0pLFxuICAgIHRyYW5zYWN0aW9uSWQ6IHVuaW9uKFt1bmRlZmluZWRfKCksIHN0cmluZygpXSksXG4gICAgc291cmNlRnJhbWVJZDogc3RyaW5nKCksXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVtYXMuanMubWFwIl0sIm5hbWVzIjpbImludGVnZXIiLCJtYXhWYWx1ZSIsIm1pblZhbHVlIiwibnVtYmVyIiwib2JqZWN0Iiwib3B0aW9uYWwiLCJzdHJpbmciLCJ1bmRlZmluZWRfIiwidW5pb24iLCJkZWZhdWx0Q2FzdElkIiwicG9zdFNjaGVtYSIsImJ1dHRvbkluZGV4IiwiY2FzdElkIiwiZmlkIiwiaGFzaCIsImZyb21BZGRyZXNzIiwiaW5wdXRUZXh0Iiwic3RhdGUiLCJ0cmFuc2FjdGlvbklkIiwic291cmNlRnJhbWVJZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/dev/schemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/dev/utils/env.js":
/*!*************************************************!*\
  !*** ./node_modules/frog/_lib/dev/utils/env.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isCloudflareWorkers: () => (/* binding */ isCloudflareWorkers)\n/* harmony export */ });\nfunction isCloudflareWorkers() {\n    return(// @ts-ignore\n    typeof WebSocketPair !== \"undefined\" || // @ts-ignore\n    typeof navigator !== \"undefined\" && navigator.userAgent === \"Cloudflare-Workers\" || // @ts-ignore\n    typeof EdgeRuntime !== \"undefined\" && EdgeRuntime === \"vercel\");\n} //# sourceMappingURL=env.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL2Rldi91dGlscy9lbnYuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBO0lBQ1osT0FDQSxhQUFhO0lBQ2IsT0FBT0Msa0JBQWtCLGVBQ3JCLGFBQWE7SUFDWixPQUFPQyxjQUFjLGVBQ2xCQSxVQUFVQyxTQUFTLEtBQUssd0JBQzVCLGFBQWE7SUFDWixPQUFPQyxnQkFBZ0IsZUFBZUEsZ0JBQWdCO0FBQy9ELEVBQ0EsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmVnZ2FyLS8uL25vZGVfbW9kdWxlcy9mcm9nL19saWIvZGV2L3V0aWxzL2Vudi5qcz83OWJjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBpc0Nsb3VkZmxhcmVXb3JrZXJzKCkge1xuICAgIHJldHVybiAoXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHR5cGVvZiBXZWJTb2NrZXRQYWlyICE9PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudCA9PT0gJ0Nsb3VkZmxhcmUtV29ya2VycycpIHx8XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgKHR5cGVvZiBFZGdlUnVudGltZSAhPT0gJ3VuZGVmaW5lZCcgJiYgRWRnZVJ1bnRpbWUgPT09ICd2ZXJjZWwnKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnYuanMubWFwIl0sIm5hbWVzIjpbImlzQ2xvdWRmbGFyZVdvcmtlcnMiLCJXZWJTb2NrZXRQYWlyIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiRWRnZVJ1bnRpbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/dev/utils/env.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/dev/utils/fetchFrame.js":
/*!********************************************************!*\
  !*** ./node_modules/frog/_lib/dev/utils/fetchFrame.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchFrame: () => (/* binding */ fetchFrame)\n/* harmony export */ });\n/* harmony import */ var _noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/curves/abstract/utils */ \"(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/utils.js\");\n/* harmony import */ var _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/curves/ed25519 */ \"(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/ed25519.js\");\n/* harmony import */ var _noble_hashes_blake3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/hashes/blake3 */ \"(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/blake3.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/utils */ \"(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _protobufs_generated_message_pb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../protobufs/generated/message_pb.js */ \"(rsc)/./node_modules/frog/_lib/protobufs/generated/message_pb.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/frog/_lib/dev/constants.js\");\n\n\n\n\n\n\nasync function fetchFrame(parameters) {\n    const { body, headers, privateKey, url } = parameters;\n    const { buttonIndex, castId, fid, fromAddress, state, transactionId } = body;\n    const inputText = body.inputText ? body.inputText : undefined;\n    const network = _protobufs_generated_message_pb_js__WEBPACK_IMPORTED_MODULE_0__.FarcasterNetwork.MAINNET;\n    const epoch = 1609459200000; // January 1, 2021 UTC\n    const timestamp = Math.round((Date.now() - epoch) / 1000);\n    // TODO: Add additional validation\n    // https://github.com/farcasterxyz/hub-monorepo/blob/main/packages/core/src/validations.ts#L777\n    if (timestamp > 2 ** 32 - 1) throw new Error(\"time too far in future\");\n    if (typeof fid !== \"number\" || fid <= 0 || !Number.isInteger(fid)) throw new Error(\"Invalid fid\");\n    if (!Object.values(_protobufs_generated_message_pb_js__WEBPACK_IMPORTED_MODULE_0__.FarcasterNetwork).includes(network)) throw new Error(\"Invalid network\");\n    const frameActionBody = new _protobufs_generated_message_pb_js__WEBPACK_IMPORTED_MODULE_0__.FrameActionBody({\n        address: fromAddress ? (0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(fromAddress.slice(2)) : undefined,\n        buttonIndex,\n        castId: {\n            fid: BigInt(castId.fid),\n            hash: (0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(castId.hash.slice(2))\n        },\n        inputText: inputText ? (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__.toBytes)(inputText) : undefined,\n        state: state ? (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__.toBytes)(state) : undefined,\n        url: (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__.toBytes)(url),\n        transactionId: transactionId ? (0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(transactionId.slice(2)) : undefined\n    });\n    const messageData = new _protobufs_generated_message_pb_js__WEBPACK_IMPORTED_MODULE_0__.MessageData({\n        body: {\n            case: \"frameActionBody\",\n            value: frameActionBody\n        },\n        fid: BigInt(fid),\n        network,\n        timestamp,\n        type: _protobufs_generated_message_pb_js__WEBPACK_IMPORTED_MODULE_0__.MessageType.FRAME_ACTION\n    });\n    const dataBytes = messageData.toBinary();\n    const hash = (0,_noble_hashes_blake3__WEBPACK_IMPORTED_MODULE_3__.blake3)(dataBytes, {\n        dkLen: 20\n    });\n    const privateKeyBytes = privateKey ? (0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(privateKey.slice(2)) : _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_4__.ed25519.utils.randomPrivateKey();\n    const message = new _protobufs_generated_message_pb_js__WEBPACK_IMPORTED_MODULE_0__.Message({\n        data: messageData,\n        hash,\n        hashScheme: _protobufs_generated_message_pb_js__WEBPACK_IMPORTED_MODULE_0__.HashScheme.BLAKE3,\n        signature: _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_4__.ed25519.sign(hash, privateKeyBytes),\n        signatureScheme: _protobufs_generated_message_pb_js__WEBPACK_IMPORTED_MODULE_0__.SignatureScheme.ED25519,\n        signer: _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_4__.ed25519.getPublicKey(privateKeyBytes)\n    });\n    const messageBytes = (0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(message.toBinary());\n    const t0 = performance.now();\n    let response;\n    let error;\n    try {\n        response = await fetch(url, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ..._constants_js__WEBPACK_IMPORTED_MODULE_5__.defaultHeaders,\n                ...headers\n            },\n            body: JSON.stringify({\n                untrustedData: {\n                    address: fromAddress,\n                    buttonIndex,\n                    castId,\n                    fid,\n                    inputText,\n                    state,\n                    transactionId,\n                    messageHash: `0x${(0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(message.hash)}`,\n                    network,\n                    timestamp: message.data?.timestamp,\n                    url\n                },\n                trustedData: {\n                    messageBytes\n                }\n            })\n        });\n    } catch (err) {\n        error = err;\n    }\n    const t1 = performance.now();\n    const speed = t1 - t0;\n    return {\n        error,\n        response,\n        speed\n    };\n} //# sourceMappingURL=fetchFrame.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/dev/utils/fetchFrame.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/dev/utils/getHtmlSize.js":
/*!*********************************************************!*\
  !*** ./node_modules/frog/_lib/dev/utils/getHtmlSize.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getHtmlSize: () => (/* binding */ getHtmlSize)\n/* harmony export */ });\nasync function getHtmlSize(response) {\n    const blob = await response.blob();\n    return blob.size;\n} //# sourceMappingURL=getHtmlSize.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL2Rldi91dGlscy9nZXRIdG1sU2l6ZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sZUFBZUEsWUFBWUMsUUFBUTtJQUN0QyxNQUFNQyxPQUFPLE1BQU1ELFNBQVNDLElBQUk7SUFDaEMsT0FBT0EsS0FBS0MsSUFBSTtBQUNwQixFQUNBLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL2JlZ2dhci0vLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL2Rldi91dGlscy9nZXRIdG1sU2l6ZS5qcz9kZDMxIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRIdG1sU2l6ZShyZXNwb25zZSkge1xuICAgIGNvbnN0IGJsb2IgPSBhd2FpdCByZXNwb25zZS5ibG9iKCk7XG4gICAgcmV0dXJuIGJsb2Iuc2l6ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldEh0bWxTaXplLmpzLm1hcCJdLCJuYW1lcyI6WyJnZXRIdG1sU2l6ZSIsInJlc3BvbnNlIiwiYmxvYiIsInNpemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/dev/utils/getHtmlSize.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/dev/utils/getImageSize.js":
/*!**********************************************************!*\
  !*** ./node_modules/frog/_lib/dev/utils/getImageSize.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getImageSize: () => (/* binding */ getImageSize)\n/* harmony export */ });\nasync function getImageSize(url) {\n    const response = await fetch(url);\n    const blob = await response.blob();\n    return blob.size;\n} //# sourceMappingURL=getImageSize.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL2Rldi91dGlscy9nZXRJbWFnZVNpemUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLGVBQWVBLGFBQWFDLEdBQUc7SUFDbEMsTUFBTUMsV0FBVyxNQUFNQyxNQUFNRjtJQUM3QixNQUFNRyxPQUFPLE1BQU1GLFNBQVNFLElBQUk7SUFDaEMsT0FBT0EsS0FBS0MsSUFBSTtBQUNwQixFQUNBLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL2JlZ2dhci0vLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL2Rldi91dGlscy9nZXRJbWFnZVNpemUuanM/YWRkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0SW1hZ2VTaXplKHVybCkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsKTtcbiAgICBjb25zdCBibG9iID0gYXdhaXQgcmVzcG9uc2UuYmxvYigpO1xuICAgIHJldHVybiBibG9iLnNpemU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRJbWFnZVNpemUuanMubWFwIl0sIm5hbWVzIjpbImdldEltYWdlU2l6ZSIsInVybCIsInJlc3BvbnNlIiwiZmV0Y2giLCJibG9iIiwic2l6ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/dev/utils/getImageSize.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/dev/utils/getUiRoot.js":
/*!*******************************************************!*\
  !*** ./node_modules/frog/_lib/dev/utils/getUiRoot.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getUiRoot: () => (/* binding */ getUiRoot)\n/* harmony export */ });\n/* harmony import */ var _env_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./env.js */ \"(rsc)/./node_modules/frog/_lib/dev/utils/env.js\");\n\nasync function getUiRoot() {\n    if (!(0,_env_js__WEBPACK_IMPORTED_MODULE_0__.isCloudflareWorkers)()) {\n        const { dirname, relative, resolve } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:path */ \"node:path\", 19));\n        const { fileURLToPath } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:url */ \"node:url\", 19));\n        return relative(\"./\", resolve(dirname(fileURLToPath(\"file:///Users/bryangarcia-felix/Desktop/frames/beggar/node_modules/frog/_lib/dev/utils/getUiRoot.js\")), \"../../ui\"));\n    }\n    return;\n} //# sourceMappingURL=getUiRoot.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL2Rldi91dGlscy9nZXRVaVJvb3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0M7QUFDeEMsZUFBZUM7SUFDbEIsSUFBSSxDQUFDRCw0REFBbUJBLElBQUk7UUFDeEIsTUFBTSxFQUFFRSxPQUFPLEVBQUVDLFFBQVEsRUFBRUMsT0FBTyxFQUFFLEdBQUcsTUFBTSx3SEFBTztRQUNwRCxNQUFNLEVBQUVDLGFBQWEsRUFBRSxHQUFHLE1BQU0sc0hBQU87UUFDdkMsT0FBT0YsU0FBUyxNQUFNQyxRQUFRRixRQUFRRyxjQUFjLHFHQUFlLElBQUk7SUFDM0U7SUFDQTtBQUNKLEVBQ0EscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmVnZ2FyLS8uL25vZGVfbW9kdWxlcy9mcm9nL19saWIvZGV2L3V0aWxzL2dldFVpUm9vdC5qcz9kZjY0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzQ2xvdWRmbGFyZVdvcmtlcnMgfSBmcm9tICcuL2Vudi5qcyc7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VWlSb290KCkge1xuICAgIGlmICghaXNDbG91ZGZsYXJlV29ya2VycygpKSB7XG4gICAgICAgIGNvbnN0IHsgZGlybmFtZSwgcmVsYXRpdmUsIHJlc29sdmUgfSA9IGF3YWl0IGltcG9ydCgnbm9kZTpwYXRoJyk7XG4gICAgICAgIGNvbnN0IHsgZmlsZVVSTFRvUGF0aCB9ID0gYXdhaXQgaW1wb3J0KCdub2RlOnVybCcpO1xuICAgICAgICByZXR1cm4gcmVsYXRpdmUoJy4vJywgcmVzb2x2ZShkaXJuYW1lKGZpbGVVUkxUb1BhdGgoaW1wb3J0Lm1ldGEudXJsKSksICcuLi8uLi91aScpKTtcbiAgICB9XG4gICAgcmV0dXJuO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0VWlSb290LmpzLm1hcCJdLCJuYW1lcyI6WyJpc0Nsb3VkZmxhcmVXb3JrZXJzIiwiZ2V0VWlSb290IiwiZGlybmFtZSIsInJlbGF0aXZlIiwicmVzb2x2ZSIsImZpbGVVUkxUb1BhdGgiLCJ1cmwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/dev/utils/getUiRoot.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/dev/utils/htmlToMetadata.js":
/*!************************************************************!*\
  !*** ./node_modules/frog/_lib/dev/utils/htmlToMetadata.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   htmlToMetadata: () => (/* binding */ htmlToMetadata)\n/* harmony export */ });\n/* harmony import */ var dom_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dom-parser */ \"(rsc)/./node_modules/dom-parser/dist/index.js\");\n/* harmony import */ var _utils_deserializeJson_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/deserializeJson.js */ \"(rsc)/./node_modules/frog/_lib/utils/deserializeJson.js\");\n/* harmony import */ var _utils_getFrameMetadata_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/getFrameMetadata.js */ \"(rsc)/./node_modules/frog/_lib/utils/getFrameMetadata.js\");\n/* harmony import */ var _parseButtons_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parseButtons.js */ \"(rsc)/./node_modules/frog/_lib/dev/utils/parseButtons.js\");\n\n\n\n\n\n\n\nfunction htmlToMetadata(html) {\n    const dom = (0,dom_parser__WEBPACK_IMPORTED_MODULE_0__.parseFromString)(html.replace(/<!doctype html>/i, \"\"));\n    const nodes = dom.getElementsByTagName(\"meta\");\n    const metadata = [];\n    const htmlTags = [];\n    const properties = {};\n    for (const node of nodes){\n        const property = node.getAttribute(\"property\") ?? node.getAttribute(\"name\");\n        const content = node.getAttribute(\"content\");\n        if (!property) continue;\n        if (!property.match(_utils_getFrameMetadata_js__WEBPACK_IMPORTED_MODULE_1__.metaTagPropertyRegex)) continue;\n        metadata.push({\n            property,\n            content\n        });\n        properties[property] = content;\n        // filter these properties out and add back on the client to save url space\n        // tip: search for `_frog_${property}` to see where it's added back\n        const excludeProperties = [\n            \"fc:frame:image\",\n            \"fc:frame:post_url\",\n            \"fc:frame:state\",\n            \"og:image\"\n        ];\n        let text = node.outerHTML;\n        if (excludeProperties.includes(property ?? \"\")) text = text.replace(/content=\".*?\"/, `content=\"_frog_${property}\"`);\n        htmlTags.push(text);\n    }\n    const buttons = (0,_parseButtons_js__WEBPACK_IMPORTED_MODULE_2__.parseButtons)(metadata);\n    return {\n        context: properties[\"frog:context\"] ? (0,_utils_deserializeJson_js__WEBPACK_IMPORTED_MODULE_3__.deserializeJson)(properties[\"frog:context\"]) : undefined,\n        frame: {\n            buttons,\n            image: properties[\"og:image\"],\n            imageAspectRatio: properties[\"fc:frame:image:aspect_ratio\"] ?? \"1.91:1\",\n            imageUrl: properties[\"fc:frame:image\"],\n            input: properties[\"fc:frame:input:text\"] ? {\n                text: properties[\"fc:frame:input:text\"]\n            } : undefined,\n            postUrl: properties[\"fc:frame:post_url\"],\n            state: properties[\"fc:frame:state\"],\n            title: properties[\"og:title\"],\n            version: properties[\"fc:frame\"] ?? \"vNext\",\n            debug: {\n                htmlTags\n            }\n        },\n        properties: metadata\n    };\n} //# sourceMappingURL=htmlToMetadata.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL2Rldi91dGlscy9odG1sVG9NZXRhZGF0YS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE2QztBQUNMO0FBQ0Y7QUFDMkI7QUFDTztBQUMzQztBQUNvQjtBQUMxQyxTQUFTSSxlQUFlQyxJQUFJO0lBQy9CLE1BQU1DLE1BQU1OLDJEQUFlQSxDQUFDSyxLQUFLRSxPQUFPLENBQUMsb0JBQW9CO0lBQzdELE1BQU1DLFFBQVFGLElBQUlHLG9CQUFvQixDQUFDO0lBQ3ZDLE1BQU1DLFdBQVcsRUFBRTtJQUNuQixNQUFNQyxXQUFXLEVBQUU7SUFDbkIsTUFBTUMsYUFBYSxDQUFDO0lBQ3BCLEtBQUssTUFBTUMsUUFBUUwsTUFBTztRQUN0QixNQUFNTSxXQUFZRCxLQUFLRSxZQUFZLENBQUMsZUFDaENGLEtBQUtFLFlBQVksQ0FBQztRQUN0QixNQUFNQyxVQUFVSCxLQUFLRSxZQUFZLENBQUM7UUFDbEMsSUFBSSxDQUFDRCxVQUNEO1FBQ0osSUFBSSxDQUFDQSxTQUFTRyxLQUFLLENBQUNmLDRFQUFvQkEsR0FDcEM7UUFDSlEsU0FBU1EsSUFBSSxDQUFDO1lBQUVKO1lBQVVFO1FBQVE7UUFDbENKLFVBQVUsQ0FBQ0UsU0FBUyxHQUFHRTtRQUN2QiwyRUFBMkU7UUFDM0UsbUVBQW1FO1FBQ25FLE1BQU1HLG9CQUFvQjtZQUN0QjtZQUNBO1lBQ0E7WUFDQTtTQUNIO1FBQ0QsSUFBSUMsT0FBT1AsS0FBS1EsU0FBUztRQUN6QixJQUFJRixrQkFBa0JHLFFBQVEsQ0FBQ1IsWUFBWSxLQUN2Q00sT0FBT0EsS0FBS2IsT0FBTyxDQUFDLGlCQUFpQixDQUFDLGVBQWUsRUFBRU8sU0FBUyxDQUFDLENBQUM7UUFDdEVILFNBQVNPLElBQUksQ0FBQ0U7SUFDbEI7SUFDQSxNQUFNRyxVQUFVcEIsOERBQVlBLENBQUNPO0lBQzdCLE9BQU87UUFDSGMsU0FBU1osVUFBVSxDQUFDLGVBQWUsR0FDN0JYLDBFQUFlQSxDQUFDVyxVQUFVLENBQUMsZUFBZSxJQUMxQ2E7UUFDTkMsT0FBTztZQUNISDtZQUNBSSxPQUFPZixVQUFVLENBQUMsV0FBVztZQUM3QmdCLGtCQUFrQmhCLFVBQVUsQ0FBQyw4QkFBOEIsSUFDdkQ7WUFDSmlCLFVBQVVqQixVQUFVLENBQUMsaUJBQWlCO1lBQ3RDa0IsT0FBT2xCLFVBQVUsQ0FBQyxzQkFBc0IsR0FDbEM7Z0JBQUVRLE1BQU1SLFVBQVUsQ0FBQyxzQkFBc0I7WUFBQyxJQUMxQ2E7WUFDTk0sU0FBU25CLFVBQVUsQ0FBQyxvQkFBb0I7WUFDeENvQixPQUFPcEIsVUFBVSxDQUFDLGlCQUFpQjtZQUNuQ3FCLE9BQU9yQixVQUFVLENBQUMsV0FBVztZQUM3QnNCLFNBQVN0QixVQUFVLENBQUMsV0FBVyxJQUFJO1lBQ25DdUIsT0FBTztnQkFDSHhCO1lBQ0o7UUFDSjtRQUNBQyxZQUFZRjtJQUNoQjtBQUNKLEVBQ0EsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmVnZ2FyLS8uL25vZGVfbW9kdWxlcy9mcm9nL19saWIvZGV2L3V0aWxzL2h0bWxUb01ldGFkYXRhLmpzP2RkYTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2VGcm9tU3RyaW5nIH0gZnJvbSAnZG9tLXBhcnNlcic7XG5pbXBvcnQge30gZnJvbSAnLi4vLi4vdHlwZXMvY29udGV4dC5qcyc7XG5pbXBvcnQge30gZnJvbSAnLi4vLi4vdHlwZXMvZnJhbWUuanMnO1xuaW1wb3J0IHsgZGVzZXJpYWxpemVKc29uIH0gZnJvbSAnLi4vLi4vdXRpbHMvZGVzZXJpYWxpemVKc29uLmpzJztcbmltcG9ydCB7IG1ldGFUYWdQcm9wZXJ0eVJlZ2V4LCB9IGZyb20gJy4uLy4uL3V0aWxzL2dldEZyYW1lTWV0YWRhdGEuanMnO1xuaW1wb3J0IHt9IGZyb20gJy4uL3R5cGVzLmpzJztcbmltcG9ydCB7IHBhcnNlQnV0dG9ucyB9IGZyb20gJy4vcGFyc2VCdXR0b25zLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBodG1sVG9NZXRhZGF0YShodG1sKSB7XG4gICAgY29uc3QgZG9tID0gcGFyc2VGcm9tU3RyaW5nKGh0bWwucmVwbGFjZSgvPCFkb2N0eXBlIGh0bWw+L2ksICcnKSk7XG4gICAgY29uc3Qgbm9kZXMgPSBkb20uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ21ldGEnKTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IFtdO1xuICAgIGNvbnN0IGh0bWxUYWdzID0gW107XG4gICAgY29uc3QgcHJvcGVydGllcyA9IHt9O1xuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBub2Rlcykge1xuICAgICAgICBjb25zdCBwcm9wZXJ0eSA9IChub2RlLmdldEF0dHJpYnV0ZSgncHJvcGVydHknKSA/P1xuICAgICAgICAgICAgbm9kZS5nZXRBdHRyaWJ1dGUoJ25hbWUnKSk7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBub2RlLmdldEF0dHJpYnV0ZSgnY29udGVudCcpO1xuICAgICAgICBpZiAoIXByb3BlcnR5KVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGlmICghcHJvcGVydHkubWF0Y2gobWV0YVRhZ1Byb3BlcnR5UmVnZXgpKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIG1ldGFkYXRhLnB1c2goeyBwcm9wZXJ0eSwgY29udGVudCB9KTtcbiAgICAgICAgcHJvcGVydGllc1twcm9wZXJ0eV0gPSBjb250ZW50O1xuICAgICAgICAvLyBmaWx0ZXIgdGhlc2UgcHJvcGVydGllcyBvdXQgYW5kIGFkZCBiYWNrIG9uIHRoZSBjbGllbnQgdG8gc2F2ZSB1cmwgc3BhY2VcbiAgICAgICAgLy8gdGlwOiBzZWFyY2ggZm9yIGBfZnJvZ18ke3Byb3BlcnR5fWAgdG8gc2VlIHdoZXJlIGl0J3MgYWRkZWQgYmFja1xuICAgICAgICBjb25zdCBleGNsdWRlUHJvcGVydGllcyA9IFtcbiAgICAgICAgICAgICdmYzpmcmFtZTppbWFnZScsXG4gICAgICAgICAgICAnZmM6ZnJhbWU6cG9zdF91cmwnLFxuICAgICAgICAgICAgJ2ZjOmZyYW1lOnN0YXRlJyxcbiAgICAgICAgICAgICdvZzppbWFnZScsXG4gICAgICAgIF07XG4gICAgICAgIGxldCB0ZXh0ID0gbm9kZS5vdXRlckhUTUw7XG4gICAgICAgIGlmIChleGNsdWRlUHJvcGVydGllcy5pbmNsdWRlcyhwcm9wZXJ0eSA/PyAnJykpXG4gICAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9jb250ZW50PVwiLio/XCIvLCBgY29udGVudD1cIl9mcm9nXyR7cHJvcGVydHl9XCJgKTtcbiAgICAgICAgaHRtbFRhZ3MucHVzaCh0ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgYnV0dG9ucyA9IHBhcnNlQnV0dG9ucyhtZXRhZGF0YSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29udGV4dDogcHJvcGVydGllc1snZnJvZzpjb250ZXh0J11cbiAgICAgICAgICAgID8gZGVzZXJpYWxpemVKc29uKHByb3BlcnRpZXNbJ2Zyb2c6Y29udGV4dCddKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgIGZyYW1lOiB7XG4gICAgICAgICAgICBidXR0b25zLFxuICAgICAgICAgICAgaW1hZ2U6IHByb3BlcnRpZXNbJ29nOmltYWdlJ10sXG4gICAgICAgICAgICBpbWFnZUFzcGVjdFJhdGlvOiBwcm9wZXJ0aWVzWydmYzpmcmFtZTppbWFnZTphc3BlY3RfcmF0aW8nXSA/P1xuICAgICAgICAgICAgICAgICcxLjkxOjEnLFxuICAgICAgICAgICAgaW1hZ2VVcmw6IHByb3BlcnRpZXNbJ2ZjOmZyYW1lOmltYWdlJ10sXG4gICAgICAgICAgICBpbnB1dDogcHJvcGVydGllc1snZmM6ZnJhbWU6aW5wdXQ6dGV4dCddXG4gICAgICAgICAgICAgICAgPyB7IHRleHQ6IHByb3BlcnRpZXNbJ2ZjOmZyYW1lOmlucHV0OnRleHQnXSB9XG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBwb3N0VXJsOiBwcm9wZXJ0aWVzWydmYzpmcmFtZTpwb3N0X3VybCddLFxuICAgICAgICAgICAgc3RhdGU6IHByb3BlcnRpZXNbJ2ZjOmZyYW1lOnN0YXRlJ10sXG4gICAgICAgICAgICB0aXRsZTogcHJvcGVydGllc1snb2c6dGl0bGUnXSxcbiAgICAgICAgICAgIHZlcnNpb246IHByb3BlcnRpZXNbJ2ZjOmZyYW1lJ10gPz8gJ3ZOZXh0JyxcbiAgICAgICAgICAgIGRlYnVnOiB7XG4gICAgICAgICAgICAgICAgaHRtbFRhZ3MsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBwcm9wZXJ0aWVzOiBtZXRhZGF0YSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aHRtbFRvTWV0YWRhdGEuanMubWFwIl0sIm5hbWVzIjpbInBhcnNlRnJvbVN0cmluZyIsImRlc2VyaWFsaXplSnNvbiIsIm1ldGFUYWdQcm9wZXJ0eVJlZ2V4IiwicGFyc2VCdXR0b25zIiwiaHRtbFRvTWV0YWRhdGEiLCJodG1sIiwiZG9tIiwicmVwbGFjZSIsIm5vZGVzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJtZXRhZGF0YSIsImh0bWxUYWdzIiwicHJvcGVydGllcyIsIm5vZGUiLCJwcm9wZXJ0eSIsImdldEF0dHJpYnV0ZSIsImNvbnRlbnQiLCJtYXRjaCIsInB1c2giLCJleGNsdWRlUHJvcGVydGllcyIsInRleHQiLCJvdXRlckhUTUwiLCJpbmNsdWRlcyIsImJ1dHRvbnMiLCJjb250ZXh0IiwidW5kZWZpbmVkIiwiZnJhbWUiLCJpbWFnZSIsImltYWdlQXNwZWN0UmF0aW8iLCJpbWFnZVVybCIsImlucHV0IiwicG9zdFVybCIsInN0YXRlIiwidGl0bGUiLCJ2ZXJzaW9uIiwiZGVidWciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/dev/utils/htmlToMetadata.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/dev/utils/parseButtons.js":
/*!**********************************************************!*\
  !*** ./node_modules/frog/_lib/dev/utils/parseButtons.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseButtons: () => (/* binding */ parseButtons)\n/* harmony export */ });\n\n\n// https://regexr.com/7rlm0\nconst buttonRegex = /fc:frame:button:(1|2|3|4)(?::(action|post_url|target))?$/;\nfunction parseButtons(metadata) {\n    let currentButtonIndex = 0;\n    let buttonsAreMissing = false;\n    let buttonsAreOutOfOrder = false;\n    const buttonMap = new Map();\n    const buttonActionMap = new Map();\n    const buttonPostUrlMap = new Map();\n    const buttonTargetMap = new Map();\n    const invalidButtons = [];\n    for (const meta of metadata){\n        const { property } = meta;\n        if (!buttonRegex.test(property)) continue;\n        const matchArray = property.match(buttonRegex);\n        const index = parseInt(matchArray[1], 10);\n        const type = matchArray[2];\n        const content = meta.content ?? \"\";\n        if (type === \"action\") buttonActionMap.set(index, content);\n        else if (type === \"post_url\") buttonPostUrlMap.set(index, content);\n        else if (type === \"target\") buttonTargetMap.set(index, content);\n        else {\n            if (currentButtonIndex >= index) buttonsAreOutOfOrder = true;\n            if (currentButtonIndex + 1 === index) currentButtonIndex = index;\n            else buttonsAreMissing = true;\n            if (buttonsAreOutOfOrder || buttonsAreMissing) invalidButtons.push(index);\n            const title = content ?? index;\n            buttonMap.set(index, {\n                index,\n                title\n            });\n        }\n    }\n    const buttons = [];\n    for (const [index, button] of buttonMap){\n        const postUrl = buttonPostUrlMap.get(index);\n        const type = buttonActionMap.get(index) ?? \"post\";\n        const target = buttonTargetMap.get(index);\n        buttons.push({\n            ...button,\n            postUrl,\n            target,\n            type\n        });\n    }\n    // Using `sort` over `toSorted` for Node.js < 20 compatibility (ie. Vercel default).\n    buttons.sort((a, b)=>a.index - b.index);\n    return buttons;\n} //# sourceMappingURL=parseButtons.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL2Rldi91dGlscy9wYXJzZUJ1dHRvbnMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFpRDtBQUNwQjtBQUM3QiwyQkFBMkI7QUFDM0IsTUFBTUEsY0FBYztBQUNiLFNBQVNDLGFBQWFDLFFBQVE7SUFDakMsSUFBSUMscUJBQXFCO0lBQ3pCLElBQUlDLG9CQUFvQjtJQUN4QixJQUFJQyx1QkFBdUI7SUFDM0IsTUFBTUMsWUFBWSxJQUFJQztJQUN0QixNQUFNQyxrQkFBa0IsSUFBSUQ7SUFDNUIsTUFBTUUsbUJBQW1CLElBQUlGO0lBQzdCLE1BQU1HLGtCQUFrQixJQUFJSDtJQUM1QixNQUFNSSxpQkFBaUIsRUFBRTtJQUN6QixLQUFLLE1BQU1DLFFBQVFWLFNBQVU7UUFDekIsTUFBTSxFQUFFVyxRQUFRLEVBQUUsR0FBR0Q7UUFDckIsSUFBSSxDQUFDWixZQUFZYyxJQUFJLENBQUNELFdBQ2xCO1FBQ0osTUFBTUUsYUFBYUYsU0FBU0csS0FBSyxDQUFDaEI7UUFDbEMsTUFBTWlCLFFBQVFDLFNBQVNILFVBQVUsQ0FBQyxFQUFFLEVBQUU7UUFDdEMsTUFBTUksT0FBT0osVUFBVSxDQUFDLEVBQUU7UUFDMUIsTUFBTUssVUFBVVIsS0FBS1EsT0FBTyxJQUFJO1FBQ2hDLElBQUlELFNBQVMsVUFDVFgsZ0JBQWdCYSxHQUFHLENBQUNKLE9BQU9HO2FBQzFCLElBQUlELFNBQVMsWUFDZFYsaUJBQWlCWSxHQUFHLENBQUNKLE9BQU9HO2FBQzNCLElBQUlELFNBQVMsVUFDZFQsZ0JBQWdCVyxHQUFHLENBQUNKLE9BQU9HO2FBQzFCO1lBQ0QsSUFBSWpCLHNCQUFzQmMsT0FDdEJaLHVCQUF1QjtZQUMzQixJQUFJRixxQkFBcUIsTUFBTWMsT0FDM0JkLHFCQUFxQmM7aUJBRXJCYixvQkFBb0I7WUFDeEIsSUFBSUMsd0JBQXdCRCxtQkFDeEJPLGVBQWVXLElBQUksQ0FBQ0w7WUFDeEIsTUFBTU0sUUFBUUgsV0FBV0g7WUFDekJYLFVBQVVlLEdBQUcsQ0FBQ0osT0FBTztnQkFBRUE7Z0JBQU9NO1lBQU07UUFDeEM7SUFDSjtJQUNBLE1BQU1DLFVBQVUsRUFBRTtJQUNsQixLQUFLLE1BQU0sQ0FBQ1AsT0FBT1EsT0FBTyxJQUFJbkIsVUFBVztRQUNyQyxNQUFNb0IsVUFBVWpCLGlCQUFpQmtCLEdBQUcsQ0FBQ1Y7UUFDckMsTUFBTUUsT0FBT1gsZ0JBQWdCbUIsR0FBRyxDQUFDVixVQUFVO1FBQzNDLE1BQU1XLFNBQVNsQixnQkFBZ0JpQixHQUFHLENBQUNWO1FBQ25DTyxRQUFRRixJQUFJLENBQUM7WUFDVCxHQUFHRyxNQUFNO1lBQ1RDO1lBQ0FFO1lBQ0FUO1FBQ0o7SUFDSjtJQUNBLG9GQUFvRjtJQUNwRkssUUFBUUssSUFBSSxDQUFDLENBQUNDLEdBQUdDLElBQU1ELEVBQUViLEtBQUssR0FBR2MsRUFBRWQsS0FBSztJQUN4QyxPQUFPTztBQUNYLEVBQ0Esd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmVnZ2FyLS8uL25vZGVfbW9kdWxlcy9mcm9nL19saWIvZGV2L3V0aWxzL3BhcnNlQnV0dG9ucy5qcz9mZjkyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7fSBmcm9tICcuLi8uLi91dGlscy9nZXRGcmFtZU1ldGFkYXRhLmpzJztcbmltcG9ydCB7fSBmcm9tICcuLi90eXBlcy5qcyc7XG4vLyBodHRwczovL3JlZ2V4ci5jb20vN3JsbTBcbmNvbnN0IGJ1dHRvblJlZ2V4ID0gL2ZjOmZyYW1lOmJ1dHRvbjooMXwyfDN8NCkoPzo6KGFjdGlvbnxwb3N0X3VybHx0YXJnZXQpKT8kLztcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUJ1dHRvbnMobWV0YWRhdGEpIHtcbiAgICBsZXQgY3VycmVudEJ1dHRvbkluZGV4ID0gMDtcbiAgICBsZXQgYnV0dG9uc0FyZU1pc3NpbmcgPSBmYWxzZTtcbiAgICBsZXQgYnV0dG9uc0FyZU91dE9mT3JkZXIgPSBmYWxzZTtcbiAgICBjb25zdCBidXR0b25NYXAgPSBuZXcgTWFwKCk7XG4gICAgY29uc3QgYnV0dG9uQWN0aW9uTWFwID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IGJ1dHRvblBvc3RVcmxNYXAgPSBuZXcgTWFwKCk7XG4gICAgY29uc3QgYnV0dG9uVGFyZ2V0TWFwID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IGludmFsaWRCdXR0b25zID0gW107XG4gICAgZm9yIChjb25zdCBtZXRhIG9mIG1ldGFkYXRhKSB7XG4gICAgICAgIGNvbnN0IHsgcHJvcGVydHkgfSA9IG1ldGE7XG4gICAgICAgIGlmICghYnV0dG9uUmVnZXgudGVzdChwcm9wZXJ0eSkpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY29uc3QgbWF0Y2hBcnJheSA9IHByb3BlcnR5Lm1hdGNoKGJ1dHRvblJlZ2V4KTtcbiAgICAgICAgY29uc3QgaW5kZXggPSBwYXJzZUludChtYXRjaEFycmF5WzFdLCAxMCk7XG4gICAgICAgIGNvbnN0IHR5cGUgPSBtYXRjaEFycmF5WzJdO1xuICAgICAgICBjb25zdCBjb250ZW50ID0gbWV0YS5jb250ZW50ID8/ICcnO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ2FjdGlvbicpXG4gICAgICAgICAgICBidXR0b25BY3Rpb25NYXAuc2V0KGluZGV4LCBjb250ZW50KTtcbiAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gJ3Bvc3RfdXJsJylcbiAgICAgICAgICAgIGJ1dHRvblBvc3RVcmxNYXAuc2V0KGluZGV4LCBjb250ZW50KTtcbiAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gJ3RhcmdldCcpXG4gICAgICAgICAgICBidXR0b25UYXJnZXRNYXAuc2V0KGluZGV4LCBjb250ZW50KTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudEJ1dHRvbkluZGV4ID49IGluZGV4KVxuICAgICAgICAgICAgICAgIGJ1dHRvbnNBcmVPdXRPZk9yZGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50QnV0dG9uSW5kZXggKyAxID09PSBpbmRleClcbiAgICAgICAgICAgICAgICBjdXJyZW50QnV0dG9uSW5kZXggPSBpbmRleDtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBidXR0b25zQXJlTWlzc2luZyA9IHRydWU7XG4gICAgICAgICAgICBpZiAoYnV0dG9uc0FyZU91dE9mT3JkZXIgfHwgYnV0dG9uc0FyZU1pc3NpbmcpXG4gICAgICAgICAgICAgICAgaW52YWxpZEJ1dHRvbnMucHVzaChpbmRleCk7XG4gICAgICAgICAgICBjb25zdCB0aXRsZSA9IGNvbnRlbnQgPz8gaW5kZXg7XG4gICAgICAgICAgICBidXR0b25NYXAuc2V0KGluZGV4LCB7IGluZGV4LCB0aXRsZSB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBidXR0b25zID0gW107XG4gICAgZm9yIChjb25zdCBbaW5kZXgsIGJ1dHRvbl0gb2YgYnV0dG9uTWFwKSB7XG4gICAgICAgIGNvbnN0IHBvc3RVcmwgPSBidXR0b25Qb3N0VXJsTWFwLmdldChpbmRleCk7XG4gICAgICAgIGNvbnN0IHR5cGUgPSBidXR0b25BY3Rpb25NYXAuZ2V0KGluZGV4KSA/PyAncG9zdCc7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGJ1dHRvblRhcmdldE1hcC5nZXQoaW5kZXgpO1xuICAgICAgICBidXR0b25zLnB1c2goe1xuICAgICAgICAgICAgLi4uYnV0dG9uLFxuICAgICAgICAgICAgcG9zdFVybCxcbiAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgIHR5cGUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBVc2luZyBgc29ydGAgb3ZlciBgdG9Tb3J0ZWRgIGZvciBOb2RlLmpzIDwgMjAgY29tcGF0aWJpbGl0eSAoaWUuIFZlcmNlbCBkZWZhdWx0KS5cbiAgICBidXR0b25zLnNvcnQoKGEsIGIpID0+IGEuaW5kZXggLSBiLmluZGV4KTtcbiAgICByZXR1cm4gYnV0dG9ucztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlQnV0dG9ucy5qcy5tYXAiXSwibmFtZXMiOlsiYnV0dG9uUmVnZXgiLCJwYXJzZUJ1dHRvbnMiLCJtZXRhZGF0YSIsImN1cnJlbnRCdXR0b25JbmRleCIsImJ1dHRvbnNBcmVNaXNzaW5nIiwiYnV0dG9uc0FyZU91dE9mT3JkZXIiLCJidXR0b25NYXAiLCJNYXAiLCJidXR0b25BY3Rpb25NYXAiLCJidXR0b25Qb3N0VXJsTWFwIiwiYnV0dG9uVGFyZ2V0TWFwIiwiaW52YWxpZEJ1dHRvbnMiLCJtZXRhIiwicHJvcGVydHkiLCJ0ZXN0IiwibWF0Y2hBcnJheSIsIm1hdGNoIiwiaW5kZXgiLCJwYXJzZUludCIsInR5cGUiLCJjb250ZW50Iiwic2V0IiwicHVzaCIsInRpdGxlIiwiYnV0dG9ucyIsImJ1dHRvbiIsInBvc3RVcmwiLCJnZXQiLCJ0YXJnZXQiLCJzb3J0IiwiYSIsImIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/dev/utils/parseButtons.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/dev/utils/uid.js":
/*!*************************************************!*\
  !*** ./node_modules/frog/_lib/dev/utils/uid.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   uid: () => (/* binding */ uid)\n/* harmony export */ });\nconst size = 256;\nlet index = size;\nlet buffer;\nfunction uid(length = 11) {\n    if (!buffer || index + length > size * 2) {\n        buffer = \"\";\n        index = 0;\n        for(let i = 0; i < size; i++){\n            buffer += (256 + Math.random() * 256 | 0).toString(16).substring(1);\n        }\n    }\n    return buffer.substring(index, index++ + length);\n} //# sourceMappingURL=uid.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL2Rldi91dGlscy91aWQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLE9BQU87QUFDYixJQUFJQyxRQUFRRDtBQUNaLElBQUlFO0FBQ0csU0FBU0MsSUFBSUMsU0FBUyxFQUFFO0lBQzNCLElBQUksQ0FBQ0YsVUFBVUQsUUFBUUcsU0FBU0osT0FBTyxHQUFHO1FBQ3RDRSxTQUFTO1FBQ1RELFFBQVE7UUFDUixJQUFLLElBQUlJLElBQUksR0FBR0EsSUFBSUwsTUFBTUssSUFBSztZQUMzQkgsVUFBVSxDQUFDLE1BQU9JLEtBQUtDLE1BQU0sS0FBSyxNQUFPLEdBQUdDLFFBQVEsQ0FBQyxJQUFJQyxTQUFTLENBQUM7UUFDdkU7SUFDSjtJQUNBLE9BQU9QLE9BQU9PLFNBQVMsQ0FBQ1IsT0FBT0EsVUFBVUc7QUFDN0MsRUFDQSwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZWdnYXItLy4vbm9kZV9tb2R1bGVzL2Zyb2cvX2xpYi9kZXYvdXRpbHMvdWlkLmpzPzZlYmYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgc2l6ZSA9IDI1NjtcbmxldCBpbmRleCA9IHNpemU7XG5sZXQgYnVmZmVyO1xuZXhwb3J0IGZ1bmN0aW9uIHVpZChsZW5ndGggPSAxMSkge1xuICAgIGlmICghYnVmZmVyIHx8IGluZGV4ICsgbGVuZ3RoID4gc2l6ZSAqIDIpIHtcbiAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgICAgICAgIGJ1ZmZlciArPSAoKDI1NiArIE1hdGgucmFuZG9tKCkgKiAyNTYpIHwgMCkudG9TdHJpbmcoMTYpLnN1YnN0cmluZygxKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYnVmZmVyLnN1YnN0cmluZyhpbmRleCwgaW5kZXgrKyArIGxlbmd0aCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11aWQuanMubWFwIl0sIm5hbWVzIjpbInNpemUiLCJpbmRleCIsImJ1ZmZlciIsInVpZCIsImxlbmd0aCIsImkiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/dev/utils/uid.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/dev/utils/warpcast.js":
/*!******************************************************!*\
  !*** ./node_modules/frog/_lib/dev/utils/warpcast.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getSignedKeyRequest: () => (/* binding */ getSignedKeyRequest),\n/* harmony export */   getSignedKeyRequestForToken: () => (/* binding */ getSignedKeyRequestForToken),\n/* harmony export */   getUserDataByFid: () => (/* binding */ getUserDataByFid),\n/* harmony export */   postSignedKeyRequest: () => (/* binding */ postSignedKeyRequest)\n/* harmony export */ });\n/* harmony import */ var viem_accounts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! viem/accounts */ \"(rsc)/./node_modules/viem/_esm/accounts/mnemonicToAccount.js\");\n\nasync function getSignedKeyRequest(data) {\n    const { appFid, appMnemonic, publicKey } = data;\n    if (appFid && appMnemonic) {\n        const account = (0,viem_accounts__WEBPACK_IMPORTED_MODULE_0__.mnemonicToAccount)(appMnemonic);\n        const deadline = Math.floor(Date.now() / 1000) + 60 * 60; // now + hour\n        const requestFid = appFid;\n        const signature = await account.signTypedData({\n            domain: {\n                name: \"Farcaster SignedKeyRequestValidator\",\n                version: \"1\",\n                chainId: 10,\n                verifyingContract: \"0x00000000FC700472606ED4fA22623Acf62c60553\"\n            },\n            types: {\n                SignedKeyRequest: [\n                    {\n                        name: \"requestFid\",\n                        type: \"uint256\"\n                    },\n                    {\n                        name: \"key\",\n                        type: \"bytes\"\n                    },\n                    {\n                        name: \"deadline\",\n                        type: \"uint256\"\n                    }\n                ]\n            },\n            primaryType: \"SignedKeyRequest\",\n            message: {\n                requestFid: BigInt(appFid),\n                key: publicKey,\n                deadline: BigInt(deadline)\n            }\n        });\n        return {\n            deadline,\n            requestFid,\n            signature\n        };\n    }\n    return await fetch(`https://auth.frog.fm/api/signed-key-requests/${publicKey}`, {\n        method: \"GET\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    }).then((response)=>response.json());\n}\nasync function postSignedKeyRequest(body) {\n    return await fetch(\"https://api.warpcast.com/v2/signed-key-requests\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            ...body,\n            key: body.publicKey\n        })\n    }).then((response)=>response.json());\n}\nasync function getSignedKeyRequestForToken(token) {\n    return await fetch(`https://api.warpcast.com/v2/signed-key-request?token=${token}`, {\n        method: \"GET\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    }).then((response)=>response.json());\n}\nasync function getUserDataByFid(hub, userFid) {\n    const response = await fetch(`${hub.apiUrl}/v1/userDataByFid?fid=${userFid}`, {\n        ...hub.fetchOptions,\n        method: \"GET\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...hub.fetchOptions?.headers\n        }\n    }).then((response)=>response.json());\n    let displayName = undefined;\n    let pfp = undefined;\n    let username = undefined;\n    for (const message of response.messages){\n        if (message.data.type !== \"MESSAGE_TYPE_USER_DATA_ADD\") continue;\n        const type = message.data.userDataBody.type;\n        const value = message.data.userDataBody.value;\n        if (type === \"USER_DATA_TYPE_PFP\") pfp = value;\n        if (type === \"USER_DATA_TYPE_USERNAME\") username = value;\n        if (type === \"USER_DATA_TYPE_DISPLAY\") displayName = value;\n    }\n    return {\n        displayName,\n        pfp,\n        userFid,\n        username\n    };\n} //# sourceMappingURL=warpcast.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL2Rldi91dGlscy93YXJwY2FzdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFrRDtBQUMzQyxlQUFlQyxvQkFBb0JDLElBQUk7SUFDMUMsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLFdBQVcsRUFBRUMsU0FBUyxFQUFFLEdBQUdIO0lBQzNDLElBQUlDLFVBQVVDLGFBQWE7UUFDdkIsTUFBTUUsVUFBVU4sZ0VBQWlCQSxDQUFDSTtRQUNsQyxNQUFNRyxXQUFXQyxLQUFLQyxLQUFLLENBQUNDLEtBQUtDLEdBQUcsS0FBSyxRQUFRLEtBQUssSUFBSSxhQUFhO1FBQ3ZFLE1BQU1DLGFBQWFUO1FBQ25CLE1BQU1VLFlBQVksTUFBTVAsUUFBUVEsYUFBYSxDQUFDO1lBQzFDQyxRQUFRO2dCQUNKQyxNQUFNO2dCQUNOQyxTQUFTO2dCQUNUQyxTQUFTO2dCQUNUQyxtQkFBbUI7WUFDdkI7WUFDQUMsT0FBTztnQkFDSEMsa0JBQWtCO29CQUNkO3dCQUFFTCxNQUFNO3dCQUFjTSxNQUFNO29CQUFVO29CQUN0Qzt3QkFBRU4sTUFBTTt3QkFBT00sTUFBTTtvQkFBUTtvQkFDN0I7d0JBQUVOLE1BQU07d0JBQVlNLE1BQU07b0JBQVU7aUJBQ3ZDO1lBQ0w7WUFDQUMsYUFBYTtZQUNiQyxTQUFTO2dCQUNMWixZQUFZYSxPQUFPdEI7Z0JBQ25CdUIsS0FBS3JCO2dCQUNMRSxVQUFVa0IsT0FBT2xCO1lBQ3JCO1FBQ0o7UUFDQSxPQUFPO1lBQUVBO1lBQVVLO1lBQVlDO1FBQVU7SUFDN0M7SUFDQSxPQUFRLE1BQU1jLE1BQU0sQ0FBQyw2Q0FBNkMsRUFBRXRCLFVBQVUsQ0FBQyxFQUFFO1FBQzdFdUIsUUFBUTtRQUNSQyxTQUFTO1lBQUUsZ0JBQWdCO1FBQW1CO0lBQ2xELEdBQUdDLElBQUksQ0FBQyxDQUFDQyxXQUFhQSxTQUFTQyxJQUFJO0FBQ3ZDO0FBQ08sZUFBZUMscUJBQXFCQyxJQUFJO0lBQzNDLE9BQVEsTUFBTVAsTUFBTSxtREFBbUQ7UUFDbkVDLFFBQVE7UUFDUkMsU0FBUztZQUFFLGdCQUFnQjtRQUFtQjtRQUM5Q0ssTUFBTUMsS0FBS0MsU0FBUyxDQUFDO1lBQ2pCLEdBQUdGLElBQUk7WUFDUFIsS0FBS1EsS0FBSzdCLFNBQVM7UUFDdkI7SUFDSixHQUFHeUIsSUFBSSxDQUFDLENBQUNDLFdBQWFBLFNBQVNDLElBQUk7QUFDdkM7QUFDTyxlQUFlSyw0QkFBNEJDLEtBQUs7SUFDbkQsT0FBUSxNQUFNWCxNQUFNLENBQUMscURBQXFELEVBQUVXLE1BQU0sQ0FBQyxFQUFFO1FBQ2pGVixRQUFRO1FBQ1JDLFNBQVM7WUFBRSxnQkFBZ0I7UUFBbUI7SUFDbEQsR0FBR0MsSUFBSSxDQUFDLENBQUNDLFdBQWFBLFNBQVNDLElBQUk7QUFDdkM7QUFDTyxlQUFlTyxpQkFBaUJDLEdBQUcsRUFBRUMsT0FBTztJQUMvQyxNQUFNVixXQUFZLE1BQU1KLE1BQU0sQ0FBQyxFQUFFYSxJQUFJRSxNQUFNLENBQUMsc0JBQXNCLEVBQUVELFFBQVEsQ0FBQyxFQUFFO1FBQzNFLEdBQUdELElBQUlHLFlBQVk7UUFDbkJmLFFBQVE7UUFDUkMsU0FBUztZQUNMLGdCQUFnQjtZQUNoQixHQUFHVyxJQUFJRyxZQUFZLEVBQUVkLE9BQU87UUFDaEM7SUFDSixHQUFHQyxJQUFJLENBQUMsQ0FBQ0MsV0FBYUEsU0FBU0MsSUFBSTtJQUNuQyxJQUFJWSxjQUFjQztJQUNsQixJQUFJQyxNQUFNRDtJQUNWLElBQUlFLFdBQVdGO0lBQ2YsS0FBSyxNQUFNckIsV0FBV08sU0FBU2lCLFFBQVEsQ0FBRTtRQUNyQyxJQUFJeEIsUUFBUXRCLElBQUksQ0FBQ29CLElBQUksS0FBSyw4QkFDdEI7UUFDSixNQUFNQSxPQUFPRSxRQUFRdEIsSUFBSSxDQUFDK0MsWUFBWSxDQUFDM0IsSUFBSTtRQUMzQyxNQUFNNEIsUUFBUTFCLFFBQVF0QixJQUFJLENBQUMrQyxZQUFZLENBQUNDLEtBQUs7UUFDN0MsSUFBSTVCLFNBQVMsc0JBQ1R3QixNQUFNSTtRQUNWLElBQUk1QixTQUFTLDJCQUNUeUIsV0FBV0c7UUFDZixJQUFJNUIsU0FBUywwQkFDVHNCLGNBQWNNO0lBQ3RCO0lBQ0EsT0FBTztRQUFFTjtRQUFhRTtRQUFLTDtRQUFTTTtJQUFTO0FBQ2pELEVBQ0Esb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmVnZ2FyLS8uL25vZGVfbW9kdWxlcy9mcm9nL19saWIvZGV2L3V0aWxzL3dhcnBjYXN0LmpzPzQ2YzMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbW5lbW9uaWNUb0FjY291bnQgfSBmcm9tICd2aWVtL2FjY291bnRzJztcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTaWduZWRLZXlSZXF1ZXN0KGRhdGEpIHtcbiAgICBjb25zdCB7IGFwcEZpZCwgYXBwTW5lbW9uaWMsIHB1YmxpY0tleSB9ID0gZGF0YTtcbiAgICBpZiAoYXBwRmlkICYmIGFwcE1uZW1vbmljKSB7XG4gICAgICAgIGNvbnN0IGFjY291bnQgPSBtbmVtb25pY1RvQWNjb3VudChhcHBNbmVtb25pYyk7XG4gICAgICAgIGNvbnN0IGRlYWRsaW5lID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCkgKyA2MCAqIDYwOyAvLyBub3cgKyBob3VyXG4gICAgICAgIGNvbnN0IHJlcXVlc3RGaWQgPSBhcHBGaWQ7XG4gICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IGFjY291bnQuc2lnblR5cGVkRGF0YSh7XG4gICAgICAgICAgICBkb21haW46IHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnRmFyY2FzdGVyIFNpZ25lZEtleVJlcXVlc3RWYWxpZGF0b3InLFxuICAgICAgICAgICAgICAgIHZlcnNpb246ICcxJyxcbiAgICAgICAgICAgICAgICBjaGFpbklkOiAxMCxcbiAgICAgICAgICAgICAgICB2ZXJpZnlpbmdDb250cmFjdDogJzB4MDAwMDAwMDBGQzcwMDQ3MjYwNkVENGZBMjI2MjNBY2Y2MmM2MDU1MycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHlwZXM6IHtcbiAgICAgICAgICAgICAgICBTaWduZWRLZXlSZXF1ZXN0OiBbXG4gICAgICAgICAgICAgICAgICAgIHsgbmFtZTogJ3JlcXVlc3RGaWQnLCB0eXBlOiAndWludDI1NicgfSxcbiAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiAna2V5JywgdHlwZTogJ2J5dGVzJyB9LFxuICAgICAgICAgICAgICAgICAgICB7IG5hbWU6ICdkZWFkbGluZScsIHR5cGU6ICd1aW50MjU2JyB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJpbWFyeVR5cGU6ICdTaWduZWRLZXlSZXF1ZXN0JyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0RmlkOiBCaWdJbnQoYXBwRmlkKSxcbiAgICAgICAgICAgICAgICBrZXk6IHB1YmxpY0tleSxcbiAgICAgICAgICAgICAgICBkZWFkbGluZTogQmlnSW50KGRlYWRsaW5lKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4geyBkZWFkbGluZSwgcmVxdWVzdEZpZCwgc2lnbmF0dXJlIH07XG4gICAgfVxuICAgIHJldHVybiAoYXdhaXQgZmV0Y2goYGh0dHBzOi8vYXV0aC5mcm9nLmZtL2FwaS9zaWduZWQta2V5LXJlcXVlc3RzLyR7cHVibGljS2V5fWAsIHtcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgfSkudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmpzb24oKSkpO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHBvc3RTaWduZWRLZXlSZXF1ZXN0KGJvZHkpIHtcbiAgICByZXR1cm4gKGF3YWl0IGZldGNoKCdodHRwczovL2FwaS53YXJwY2FzdC5jb20vdjIvc2lnbmVkLWtleS1yZXF1ZXN0cycsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAuLi5ib2R5LFxuICAgICAgICAgICAga2V5OiBib2R5LnB1YmxpY0tleSxcbiAgICAgICAgfSksXG4gICAgfSkudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmpzb24oKSkpO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFNpZ25lZEtleVJlcXVlc3RGb3JUb2tlbih0b2tlbikge1xuICAgIHJldHVybiAoYXdhaXQgZmV0Y2goYGh0dHBzOi8vYXBpLndhcnBjYXN0LmNvbS92Mi9zaWduZWQta2V5LXJlcXVlc3Q/dG9rZW49JHt0b2tlbn1gLCB7XG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgIH0pLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS5qc29uKCkpKTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRVc2VyRGF0YUJ5RmlkKGh1YiwgdXNlckZpZCkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gKGF3YWl0IGZldGNoKGAke2h1Yi5hcGlVcmx9L3YxL3VzZXJEYXRhQnlGaWQ/ZmlkPSR7dXNlckZpZH1gLCB7XG4gICAgICAgIC4uLmh1Yi5mZXRjaE9wdGlvbnMsXG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAuLi5odWIuZmV0Y2hPcHRpb25zPy5oZWFkZXJzLFxuICAgICAgICB9LFxuICAgIH0pLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS5qc29uKCkpKTtcbiAgICBsZXQgZGlzcGxheU5hbWUgPSB1bmRlZmluZWQ7XG4gICAgbGV0IHBmcCA9IHVuZGVmaW5lZDtcbiAgICBsZXQgdXNlcm5hbWUgPSB1bmRlZmluZWQ7XG4gICAgZm9yIChjb25zdCBtZXNzYWdlIG9mIHJlc3BvbnNlLm1lc3NhZ2VzKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmRhdGEudHlwZSAhPT0gJ01FU1NBR0VfVFlQRV9VU0VSX0RBVEFfQUREJylcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCB0eXBlID0gbWVzc2FnZS5kYXRhLnVzZXJEYXRhQm9keS50eXBlO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IG1lc3NhZ2UuZGF0YS51c2VyRGF0YUJvZHkudmFsdWU7XG4gICAgICAgIGlmICh0eXBlID09PSAnVVNFUl9EQVRBX1RZUEVfUEZQJylcbiAgICAgICAgICAgIHBmcCA9IHZhbHVlO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ1VTRVJfREFUQV9UWVBFX1VTRVJOQU1FJylcbiAgICAgICAgICAgIHVzZXJuYW1lID0gdmFsdWU7XG4gICAgICAgIGlmICh0eXBlID09PSAnVVNFUl9EQVRBX1RZUEVfRElTUExBWScpXG4gICAgICAgICAgICBkaXNwbGF5TmFtZSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4geyBkaXNwbGF5TmFtZSwgcGZwLCB1c2VyRmlkLCB1c2VybmFtZSB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2FycGNhc3QuanMubWFwIl0sIm5hbWVzIjpbIm1uZW1vbmljVG9BY2NvdW50IiwiZ2V0U2lnbmVkS2V5UmVxdWVzdCIsImRhdGEiLCJhcHBGaWQiLCJhcHBNbmVtb25pYyIsInB1YmxpY0tleSIsImFjY291bnQiLCJkZWFkbGluZSIsIk1hdGgiLCJmbG9vciIsIkRhdGUiLCJub3ciLCJyZXF1ZXN0RmlkIiwic2lnbmF0dXJlIiwic2lnblR5cGVkRGF0YSIsImRvbWFpbiIsIm5hbWUiLCJ2ZXJzaW9uIiwiY2hhaW5JZCIsInZlcmlmeWluZ0NvbnRyYWN0IiwidHlwZXMiLCJTaWduZWRLZXlSZXF1ZXN0IiwidHlwZSIsInByaW1hcnlUeXBlIiwibWVzc2FnZSIsIkJpZ0ludCIsImtleSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsInRoZW4iLCJyZXNwb25zZSIsImpzb24iLCJwb3N0U2lnbmVkS2V5UmVxdWVzdCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiZ2V0U2lnbmVkS2V5UmVxdWVzdEZvclRva2VuIiwidG9rZW4iLCJnZXRVc2VyRGF0YUJ5RmlkIiwiaHViIiwidXNlckZpZCIsImFwaVVybCIsImZldGNoT3B0aW9ucyIsImRpc3BsYXlOYW1lIiwidW5kZWZpbmVkIiwicGZwIiwidXNlcm5hbWUiLCJtZXNzYWdlcyIsInVzZXJEYXRhQm9keSIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/dev/utils/warpcast.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/frog-base.js":
/*!*********************************************!*\
  !*** ./node_modules/frog/_lib/frog-base.js ***!
  \*********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FrogBase: () => (/* binding */ FrogBase)\n/* harmony export */ });\n/* harmony import */ var frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! frog/jsx/jsx-runtime */ \"(rsc)/./node_modules/frog/_lib/jsx/jsx-dev-runtime/index.js\");\n/* harmony import */ var frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! frog/jsx/jsx-runtime */ \"(rsc)/./node_modules/hono/dist/jsx/index.js\");\n/* harmony import */ var detect_browser__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! detect-browser */ \"(rsc)/./node_modules/detect-browser/es/index.js\");\n/* harmony import */ var hono__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hono */ \"(rsc)/./node_modules/hono/dist/index.js\");\n/* harmony import */ var hono_og__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! hono-og */ \"(rsc)/./node_modules/hono-og/lib/response.js\");\n/* harmony import */ var hono_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! hono/html */ \"(rsc)/./node_modules/hono/dist/helper/html/index.js\");\n/* harmony import */ var lz_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lz-string */ \"(rsc)/./node_modules/lz-string/libs/lz-string.js\");\n/* harmony import */ var path_browserify__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! path-browserify */ \"(rsc)/./node_modules/path-browserify/index.js\");\n/* harmony import */ var _utils_fromQuery_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/fromQuery.js */ \"(rsc)/./node_modules/frog/_lib/utils/fromQuery.js\");\n/* harmony import */ var _utils_getButtonValues_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./utils/getButtonValues.js */ \"(rsc)/./node_modules/frog/_lib/utils/getButtonValues.js\");\n/* harmony import */ var _utils_getCastActionContext_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/getCastActionContext.js */ \"(rsc)/./node_modules/frog/_lib/utils/getCastActionContext.js\");\n/* harmony import */ var _utils_getFrameContext_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils/getFrameContext.js */ \"(rsc)/./node_modules/frog/_lib/utils/getFrameContext.js\");\n/* harmony import */ var _utils_getImagePaths_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/getImagePaths.js */ \"(rsc)/./node_modules/frog/_lib/utils/getImagePaths.js\");\n/* harmony import */ var _utils_getRequestUrl_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./utils/getRequestUrl.js */ \"(rsc)/./node_modules/frog/_lib/utils/getRequestUrl.js\");\n/* harmony import */ var _utils_getRouteParameters_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/getRouteParameters.js */ \"(rsc)/./node_modules/frog/_lib/utils/getRouteParameters.js\");\n/* harmony import */ var _utils_getTransactionContext_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./utils/getTransactionContext.js */ \"(rsc)/./node_modules/frog/_lib/utils/getTransactionContext.js\");\n/* harmony import */ var _utils_jws_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./utils/jws.js */ \"(rsc)/./node_modules/frog/_lib/utils/jws.js\");\n/* harmony import */ var _utils_parseBrowserLocation_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./utils/parseBrowserLocation.js */ \"(rsc)/./node_modules/frog/_lib/utils/parseBrowserLocation.js\");\n/* harmony import */ var _utils_parseFonts_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./utils/parseFonts.js */ \"(rsc)/./node_modules/frog/_lib/utils/parseFonts.js\");\n/* harmony import */ var _utils_parseHonoPath_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/parseHonoPath.js */ \"(rsc)/./node_modules/frog/_lib/utils/parseHonoPath.js\");\n/* harmony import */ var _utils_parseImage_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./utils/parseImage.js */ \"(rsc)/./node_modules/frog/_lib/utils/parseImage.js\");\n/* harmony import */ var _utils_parseIntents_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./utils/parseIntents.js */ \"(rsc)/./node_modules/frog/_lib/utils/parseIntents.js\");\n/* harmony import */ var _utils_parsePath_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./utils/parsePath.js */ \"(rsc)/./node_modules/frog/_lib/utils/parsePath.js\");\n/* harmony import */ var _utils_requestBodyToContext_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/requestBodyToContext.js */ \"(rsc)/./node_modules/frog/_lib/utils/requestBodyToContext.js\");\n/* harmony import */ var _utils_serializeJson_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./utils/serializeJson.js */ \"(rsc)/./node_modules/frog/_lib/utils/serializeJson.js\");\n/* harmony import */ var _utils_toSearchParams_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./utils/toSearchParams.js */ \"(rsc)/./node_modules/frog/_lib/utils/toSearchParams.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./version.js */ \"(rsc)/./node_modules/frog/_lib/version.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([hono_og__WEBPACK_IMPORTED_MODULE_11__, _utils_parseFonts_js__WEBPACK_IMPORTED_MODULE_12__]);\n([hono_og__WEBPACK_IMPORTED_MODULE_11__, _utils_parseFonts_js__WEBPACK_IMPORTED_MODULE_12__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n// TODO: maybe write our own \"modern\" universal path (or resolve) module.\n// We are not using `node:path` to remain compatible with Edge runtimes.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * A Frog instance.\n *\n * @param parameters - {@link FrogConstructorParameters}\n * @returns instance. {@link Frog}\n *\n * @example\n * ```\n * import { Frog } from 'frog'\n *\n * const app = new Frog()\n *\n * app.frame('/', (c) => {\n *   const { buttonValue, inputText, status } = c\n *   const fruit = inputText || buttonValue\n *   return c.res({\n *     image: (\n *       <div style={{ fontSize: 60 }}>\n *         {fruit ? `You selected: ${fruit}` : 'Welcome!'}\n *       </div>\n *     ),\n *     intents: [\n *       <Button value=\"apples\">Apples</Button>,\n *       <Button value=\"oranges\">Oranges</Button>,\n *       <Button value=\"bananas\">Bananas</Button>,\n *     ]\n *   })\n * })\n * ```\n */ class FrogBase {\n    constructor({ assetsPath, basePath, browserLocation, dev, headers, honoOptions, hubApiUrl, hub, imageAspectRatio, imageOptions, initialState, origin, secret, ui, verify } = {}){\n        // Note: not using native `private` fields to avoid tslib being injected\n        // into bundled code.\n        Object.defineProperty(this, \"_initialState\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: undefined\n        });\n        /** Path for assets. */ Object.defineProperty(this, \"assetsPath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Base path of the server instance. */ Object.defineProperty(this, \"basePath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** URL to redirect to when the user is coming to the page via a browser. */ Object.defineProperty(this, \"browserLocation\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"dev\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"headers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Hono instance. */ Object.defineProperty(this, \"hono\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Farcaster Hub API URL. */ Object.defineProperty(this, \"hubApiUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Farcaster Hub API config. */ Object.defineProperty(this, \"hub\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Image aspect ratio. */ Object.defineProperty(this, \"imageAspectRatio\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"1.91:1\"\n        });\n        /** Image options. */ Object.defineProperty(this, \"imageOptions\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Origin URL of the server instance. */ Object.defineProperty(this, \"origin\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"fetch\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"get\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"post\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Key used to sign secret data. */ Object.defineProperty(this, \"secret\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** FrogUI configuration. */ Object.defineProperty(this, \"ui\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Whether or not frames should be verified. */ Object.defineProperty(this, \"verify\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"_dev\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _version_js__WEBPACK_IMPORTED_MODULE_4__.version\n        });\n        Object.defineProperty(this, \"castAction\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: (...parameters)=>{\n                const [path, middlewares, handler, options = {}] = (0,_utils_getRouteParameters_js__WEBPACK_IMPORTED_MODULE_5__.getRouteParameters)(...parameters);\n                const { verify = this.verify } = options;\n                // Cast Action Route (implements POST).\n                this.hono.post((0,_utils_parseHonoPath_js__WEBPACK_IMPORTED_MODULE_6__.parseHonoPath)(path), ...middlewares, async (c)=>{\n                    const { context } = (0,_utils_getCastActionContext_js__WEBPACK_IMPORTED_MODULE_7__.getCastActionContext)({\n                        context: await (0,_utils_requestBodyToContext_js__WEBPACK_IMPORTED_MODULE_8__.requestBodyToContext)(c, {\n                            hub: this.hub || (this.hubApiUrl ? {\n                                apiUrl: this.hubApiUrl\n                            } : undefined),\n                            secret: this.secret,\n                            verify\n                        })\n                    });\n                    const response = await handler(context);\n                    if (response instanceof Response) return response;\n                    if (response.status === \"error\") {\n                        c.status(response.error.statusCode ?? 400);\n                        return c.json({\n                            message: response.error.message\n                        });\n                    }\n                    const { headers = this.headers, message } = response.data;\n                    // Set response headers provided by consumer.\n                    for (const [key, value] of Object.entries(headers ?? {}))c.header(key, value);\n                    return c.json({\n                        message\n                    });\n                });\n                return this;\n            }\n        });\n        Object.defineProperty(this, \"frame\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: (...parameters)=>{\n                const [path, middlewares, handler, options = {}] = (0,_utils_getRouteParameters_js__WEBPACK_IMPORTED_MODULE_5__.getRouteParameters)(...parameters);\n                const { verify = this.verify } = options;\n                // OG Image Route\n                const imagePaths = (0,_utils_getImagePaths_js__WEBPACK_IMPORTED_MODULE_9__.getImagePaths)((0,_utils_parseHonoPath_js__WEBPACK_IMPORTED_MODULE_6__.parseHonoPath)(path));\n                for (const imagePath of imagePaths){\n                    this.hono.get(imagePath, async (c)=>{\n                        const defaultImageOptions = await (async ()=>{\n                            if (typeof this.imageOptions === \"function\") return await this.imageOptions();\n                            return this.imageOptions;\n                        })();\n                        const fonts = await (async ()=>{\n                            if (this.ui?.vars?.fonts) return Object.values(this.ui?.vars.fonts).flat();\n                            if (typeof options?.fonts === \"function\") return await options.fonts();\n                            if (options?.fonts) return options.fonts;\n                            return defaultImageOptions?.fonts;\n                        })();\n                        const { headers = this.headers, image, imageOptions = defaultImageOptions } = (0,_utils_fromQuery_js__WEBPACK_IMPORTED_MODULE_10__.fromQuery)(c.req.query());\n                        const image_ = JSON.parse(lz_string__WEBPACK_IMPORTED_MODULE_2__.decompressFromEncodedURIComponent(image));\n                        return new hono_og__WEBPACK_IMPORTED_MODULE_11__.ImageResponse(image_, {\n                            width: 1200,\n                            height: 630,\n                            ...imageOptions,\n                            format: imageOptions?.format ?? \"png\",\n                            fonts: await (0,_utils_parseFonts_js__WEBPACK_IMPORTED_MODULE_12__.parseFonts)(fonts),\n                            headers: imageOptions?.headers ?? headers\n                        });\n                    });\n                }\n                // Frame Route (implements GET & POST).\n                this.hono.use((0,_utils_parseHonoPath_js__WEBPACK_IMPORTED_MODULE_6__.parseHonoPath)(path), ...middlewares, async (c)=>{\n                    const url = (0,_utils_getRequestUrl_js__WEBPACK_IMPORTED_MODULE_13__.getRequestUrl)(c.req);\n                    const origin = this.origin ?? url.origin;\n                    const assetsUrl = origin + (0,_utils_parsePath_js__WEBPACK_IMPORTED_MODULE_14__.parsePath)(this.assetsPath);\n                    const baseUrl = origin + (0,_utils_parsePath_js__WEBPACK_IMPORTED_MODULE_14__.parsePath)(this.basePath);\n                    const { context, getState } = (0,_utils_getFrameContext_js__WEBPACK_IMPORTED_MODULE_15__.getFrameContext)({\n                        context: await (0,_utils_requestBodyToContext_js__WEBPACK_IMPORTED_MODULE_8__.requestBodyToContext)(c, {\n                            hub: this.hub || (this.hubApiUrl ? {\n                                apiUrl: this.hubApiUrl\n                            } : undefined),\n                            secret: this.secret,\n                            verify\n                        }),\n                        initialState: this._initialState,\n                        origin\n                    });\n                    if (context.url !== (0,_utils_parsePath_js__WEBPACK_IMPORTED_MODULE_14__.parsePath)(url.href)) return c.redirect(context.url);\n                    const response = await handler(context);\n                    if (response instanceof Response) return response;\n                    if (response.status === \"error\") {\n                        c.status(response.error.statusCode ?? 400);\n                        return c.json({\n                            message: response.error.message\n                        });\n                    }\n                    const { action, browserLocation = this.browserLocation, headers = this.headers, imageAspectRatio = this.imageAspectRatio, image, imageOptions: imageOptions_ = this.imageOptions, intents, ogImage, title = \"Frog Frame\" } = response.data;\n                    const buttonValues = (0,_utils_getButtonValues_js__WEBPACK_IMPORTED_MODULE_16__.getButtonValues)((0,_utils_parseIntents_js__WEBPACK_IMPORTED_MODULE_17__.parseIntents)(intents));\n                    if (context.status === \"redirect\" && context.buttonIndex) {\n                        const buttonValue = buttonValues[context.buttonIndex - 1];\n                        const location = buttonValue?.replace(/^_r:/, \"\");\n                        if (!location) throw new Error(\"location required to redirect\");\n                        return c.redirect(location, 302);\n                    }\n                    const renderAsHTML = c.req.header(\"Accept\") === \"text/html\" || c.req.query(\"accept\") === \"text/html\";\n                    // If the user is coming from a browser, and a `browserLocation` is set,\n                    // then we will redirect the user to that location.\n                    const browser = (0,detect_browser__WEBPACK_IMPORTED_MODULE_18__.detect)(c.req.header(\"user-agent\"));\n                    const browserLocation_ = (0,_utils_parseBrowserLocation_js__WEBPACK_IMPORTED_MODULE_19__.parseBrowserLocation)(c, browserLocation, {\n                        basePath: this.basePath,\n                        path\n                    });\n                    if (!renderAsHTML && browser?.name && browserLocation_) return c.redirect(browserLocation_.startsWith(\"http\") ? browserLocation_ : `${origin + path_browserify__WEBPACK_IMPORTED_MODULE_3__.resolve(this.basePath, browserLocation_)}`, 302);\n                    // Derive the previous state, and sign it if a secret is provided.\n                    const previousState = await (async ()=>{\n                        const state = await context.deriveState();\n                        if (!this.secret) return state;\n                        if (!state) return state;\n                        return _utils_jws_js__WEBPACK_IMPORTED_MODULE_20__.sign(JSON.stringify(state), this.secret);\n                    })();\n                    // We need to pass some context to the next frame to derive button values, state, etc.\n                    // Here, we are deriving two sets of \"next frame state\".\n                    // 1. For the INITIAL FRAME, we need to pass through the state as a search parameter\n                    //    due to Farcaster's constraints with the `fc:frame:state` tag. It must be empty\n                    //    for the initial frame.\n                    // 2. For SUBSEQUENT FRAMES, we can pass through the state as a serialized JSON object\n                    //    to the next frame via the `fc:frame:state` tag.\n                    const nextFrameStateSearch = (0,_utils_toSearchParams_js__WEBPACK_IMPORTED_MODULE_21__.toSearchParams)({\n                        initialPath: context.initialPath,\n                        previousButtonValues: buttonValues\n                    });\n                    const nextFrameStateMeta = (0,_utils_serializeJson_js__WEBPACK_IMPORTED_MODULE_22__.serializeJson)({\n                        initialPath: context.initialPath,\n                        previousButtonValues: buttonValues,\n                        previousState\n                    });\n                    const imageOptions = await (async ()=>{\n                        if (typeof imageOptions_ === \"function\") return await imageOptions_();\n                        return imageOptions_;\n                    })();\n                    const imageUrl = await (async ()=>{\n                        if (typeof image !== \"string\") {\n                            const compressedImage = lz_string__WEBPACK_IMPORTED_MODULE_2__.compressToEncodedURIComponent(JSON.stringify(await (0,_utils_parseImage_js__WEBPACK_IMPORTED_MODULE_23__.parseImage)((0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_24__.jsxDEV)(\"div\", {\n                                style: {\n                                    display: \"flex\",\n                                    flexDirection: \"column\",\n                                    height: \"100%\",\n                                    width: \"100%\"\n                                },\n                                children: await image\n                            }), {\n                                assetsUrl,\n                                ui: {\n                                    ...this.ui,\n                                    vars: {\n                                        ...this.ui?.vars,\n                                        frame: {\n                                            height: imageOptions?.height,\n                                            width: imageOptions?.width\n                                        }\n                                    }\n                                }\n                            })));\n                            const imageParams = (0,_utils_toSearchParams_js__WEBPACK_IMPORTED_MODULE_21__.toSearchParams)({\n                                image: compressedImage,\n                                imageOptions: imageOptions ? {\n                                    ...imageOptions,\n                                    // TODO: Remove once `fonts` is removed from `imageOptions`.\n                                    fonts: undefined\n                                } : undefined,\n                                headers\n                            });\n                            return `${(0,_utils_parsePath_js__WEBPACK_IMPORTED_MODULE_14__.parsePath)(context.url)}/image?${imageParams}`;\n                        }\n                        if (image.startsWith(\"http\") || image.startsWith(\"data\")) return image;\n                        return `${assetsUrl + (0,_utils_parsePath_js__WEBPACK_IMPORTED_MODULE_14__.parsePath)(image)}`;\n                    })();\n                    const ogImageUrl = (()=>{\n                        if (!ogImage) return undefined;\n                        if (ogImage.startsWith(\"http\")) return ogImage;\n                        return baseUrl + (0,_utils_parsePath_js__WEBPACK_IMPORTED_MODULE_14__.parsePath)(ogImage);\n                    })();\n                    const postUrl = (()=>{\n                        if (!action) return context.url;\n                        if (action.startsWith(\"http\")) return action;\n                        return baseUrl + (0,_utils_parsePath_js__WEBPACK_IMPORTED_MODULE_14__.parsePath)(action);\n                    })();\n                    const parsedIntents = (0,_utils_parseIntents_js__WEBPACK_IMPORTED_MODULE_17__.parseIntents)(intents, {\n                        baseUrl,\n                        search: context.status === \"initial\" ? nextFrameStateSearch.toString() : undefined\n                    });\n                    // Set response headers provided by consumer.\n                    for (const [key, value] of Object.entries(headers ?? {}))c.header(key, value);\n                    if (renderAsHTML) {\n                        const height = imageOptions?.height ?? 630;\n                        const width = imageOptions?.width ?? 1200;\n                        // Convert `tw` to `class`\n                        const __html = image.toString().replace(/tw=/g, \"class=\");\n                        const fonts = await (async ()=>{\n                            if (this.ui?.vars?.fonts) return Object.values(this.ui.vars.fonts).flat();\n                            if (typeof options?.fonts === \"function\") return await options.fonts();\n                            if (options?.fonts) return options.fonts;\n                            return imageOptions?.fonts;\n                        })();\n                        const groupedFonts = new Map();\n                        if (fonts) for (const font of fonts){\n                            const key = `${font.source ? `${font.source}:` : \"\"}${font.name}`;\n                            if (groupedFonts.has(key)) groupedFonts.get(key)?.push(font);\n                            else groupedFonts.set(key, [\n                                font\n                            ]);\n                        }\n                        const googleFonts = [];\n                        for (const item of groupedFonts){\n                            const [, fonts] = item;\n                            const font = fonts[0];\n                            if (font?.source === \"google\") {\n                                const name = font.name.replace(\" \", \"+\");\n                                const hasItalic = fonts.some((x)=>x.style === \"italic\");\n                                const attributeKeys = hasItalic ? \"ital,wght\" : \"wght\";\n                                const attributeValues = fonts.map((x)=>{\n                                    if (hasItalic) {\n                                        if (x.style === \"italic\") return `1,${x.weight}`;\n                                        return `0,${x.weight}`;\n                                    }\n                                    return x.weight;\n                                }).join(\";\");\n                                const url = `https://fonts.googleapis.com/css2?family=${name}${attributeValues ? `:${attributeKeys}@${attributeValues}` : \"\"}&display=swap`;\n                                googleFonts.push(url);\n                            }\n                        }\n                        return c.html((0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_24__.jsxDEV)(frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_25__.Fragment, {\n                            children: [\n                                (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_24__.jsxDEV)(\"script\", {\n                                    src: \"https://cdn.tailwindcss.com\"\n                                }),\n                                (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_24__.jsxDEV)(\"script\", {\n                                    children: hono_html__WEBPACK_IMPORTED_MODULE_1__.html`\n                tailwind.config = {\n                  plugins: [{\n                    handler({ addBase }) {\n                      addBase({ 'html': { 'line-height': 1.2 } })\n                    },\n                  }],\n                }\n              `\n                                }),\n                                (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_24__.jsxDEV)(\"style\", {\n                                    // biome-ignore lint/security/noDangerouslySetInnerHtml: <explanation>\n                                    dangerouslySetInnerHTML: {\n                                        __html: `@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;700&family=Material+Icons');body{display:flex;height:100%;margin:0;tab-size:8;font-family:Inter,sans-serif;overflow:hidden}body>div,body>div *{box-sizing:border-box;display:flex}body{background:#1A1A19;}link,script,style{position: absolute;width: 1px;height: 1px;padding: 0;margin: -1px;overflow: hidden;clip: rect(0, 0, 0, 0);white-space: nowrap;border-width: 0;}`\n                                    }\n                                }),\n                                Boolean(googleFonts.length) && (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_24__.jsxDEV)(frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_25__.Fragment, {\n                                    children: [\n                                        (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_24__.jsxDEV)(\"link\", {\n                                            rel: \"preconnect\",\n                                            href: \"https://fonts.googleapis.com\"\n                                        }),\n                                        (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_24__.jsxDEV)(\"link\", {\n                                            rel: \"preconnect\",\n                                            href: \"https://fonts.gstatic.com\",\n                                            crossOrigin: true\n                                        }),\n                                        googleFonts.map((url)=>(0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_24__.jsxDEV)(\"link\", {\n                                                href: url,\n                                                rel: \"stylesheet\"\n                                            }))\n                                    ]\n                                }),\n                                (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_24__.jsxDEV)(\"div\", {\n                                    className: \"bg-black\",\n                                    // biome-ignore lint/security/noDangerouslySetInnerHtml: <explanation>\n                                    dangerouslySetInnerHTML: {\n                                        __html\n                                    },\n                                    style: {\n                                        height,\n                                        width\n                                    }\n                                })\n                            ]\n                        }));\n                    }\n                    return c.render((0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_24__.jsxDEV)(frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_25__.Fragment, {\n                        children: [\n                            hono_html__WEBPACK_IMPORTED_MODULE_1__.html`<!DOCTYPE html>`,\n                            (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_24__.jsxDEV)(\"html\", {\n                                lang: \"en\",\n                                children: [\n                                    (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_24__.jsxDEV)(\"head\", {\n                                        children: [\n                                            (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_24__.jsxDEV)(\"meta\", {\n                                                property: \"fc:frame\",\n                                                content: \"vNext\"\n                                            }),\n                                            (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_24__.jsxDEV)(\"meta\", {\n                                                property: \"fc:frame:image:aspect_ratio\",\n                                                content: imageAspectRatio\n                                            }),\n                                            (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_24__.jsxDEV)(\"meta\", {\n                                                property: \"fc:frame:image\",\n                                                content: imageUrl\n                                            }),\n                                            (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_24__.jsxDEV)(\"meta\", {\n                                                property: \"og:image\",\n                                                content: ogImageUrl ?? imageUrl\n                                            }),\n                                            (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_24__.jsxDEV)(\"meta\", {\n                                                property: \"og:title\",\n                                                content: title\n                                            }),\n                                            (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_24__.jsxDEV)(\"meta\", {\n                                                property: \"fc:frame:post_url\",\n                                                content: context.status === \"initial\" ? `${postUrl}?${nextFrameStateSearch.toString()}` : postUrl\n                                            }),\n                                            context.status !== \"initial\" && (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_24__.jsxDEV)(\"meta\", {\n                                                property: \"fc:frame:state\",\n                                                content: nextFrameStateMeta\n                                            }),\n                                            parsedIntents,\n                                            (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_24__.jsxDEV)(\"meta\", {\n                                                property: \"frog:version\",\n                                                content: _version_js__WEBPACK_IMPORTED_MODULE_4__.version\n                                            }),\n                                            c.req.header(\"x-frog-dev\") !== undefined && (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_24__.jsxDEV)(\"meta\", {\n                                                property: \"frog:context\",\n                                                content: (0,_utils_serializeJson_js__WEBPACK_IMPORTED_MODULE_22__.serializeJson)({\n                                                    ...context,\n                                                    // note: unserializable entities are undefined.\n                                                    env: context.env ? Object.assign(context.env, {\n                                                        incoming: undefined,\n                                                        outgoing: undefined\n                                                    }) : undefined,\n                                                    req: undefined,\n                                                    state: getState()\n                                                })\n                                            })\n                                        ]\n                                    }),\n                                    (0,frog_jsx_jsx_runtime__WEBPACK_IMPORTED_MODULE_24__.jsxDEV)(\"body\", {})\n                                ]\n                            })\n                        ]\n                    }));\n                });\n                return this;\n            }\n        });\n        Object.defineProperty(this, \"transaction\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: (...parameters)=>{\n                const [path, middlewares, handler, options = {}] = (0,_utils_getRouteParameters_js__WEBPACK_IMPORTED_MODULE_5__.getRouteParameters)(...parameters);\n                const { verify = this.verify } = options;\n                this.hono.post((0,_utils_parseHonoPath_js__WEBPACK_IMPORTED_MODULE_6__.parseHonoPath)(path), ...middlewares, async (c)=>{\n                    const { context } = (0,_utils_getTransactionContext_js__WEBPACK_IMPORTED_MODULE_26__.getTransactionContext)({\n                        context: await (0,_utils_requestBodyToContext_js__WEBPACK_IMPORTED_MODULE_8__.requestBodyToContext)(c, {\n                            hub: this.hub || (this.hubApiUrl ? {\n                                apiUrl: this.hubApiUrl\n                            } : undefined),\n                            secret: this.secret,\n                            verify\n                        }),\n                        req: c.req\n                    });\n                    const response = await handler(context);\n                    if (response instanceof Response) return response;\n                    if (response.status === \"error\") {\n                        c.status(response.error.statusCode ?? 400);\n                        return c.json({\n                            message: response.error.message\n                        });\n                    }\n                    return c.json(response.data);\n                });\n                return this;\n            }\n        });\n        Object.defineProperty(this, \"use\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: (...args)=>{\n                this.hono.use(...args);\n                return this;\n            }\n        });\n        this.hono = new hono__WEBPACK_IMPORTED_MODULE_0__.Hono(honoOptions);\n        if (basePath) this.hono = this.hono.basePath(basePath);\n        if (browserLocation) this.browserLocation = browserLocation;\n        if (headers) this.headers = headers;\n        if (hubApiUrl) this.hubApiUrl = hubApiUrl;\n        if (hub) this.hub = hub;\n        if (imageAspectRatio) this.imageAspectRatio = imageAspectRatio;\n        if (imageOptions) this.imageOptions = imageOptions;\n        if (origin) this.origin = origin;\n        if (secret) this.secret = secret;\n        if (ui) this.ui = ui;\n        if (typeof verify !== \"undefined\") this.verify = verify;\n        this.basePath = basePath ?? \"/\";\n        this.assetsPath = assetsPath ?? this.basePath;\n        this.fetch = this.hono.fetch.bind(this.hono);\n        this.get = this.hono.get.bind(this.hono);\n        this.post = this.hono.post.bind(this.hono);\n        if (initialState) this._initialState = initialState;\n        if (dev) this.dev = {\n            enabled: true,\n            ...dev ?? {}\n        };\n        this._dev = undefined; // this is set `true` by `devtools` helper\n        // allow devtools to work with dynamic params off base path\n        this.hono.all(\"*\", async (c, next)=>{\n            if (this._dev) {\n                for (const { handler, path } of c.req.matchedRoutes)if (path === this._dev) return handler(c, next);\n            }\n            await next();\n        });\n    }\n    route(path, frog) {\n        if (frog.assetsPath === \"/\") frog.assetsPath = this.assetsPath;\n        if (frog.basePath === \"/\") frog.basePath = (0,_utils_parsePath_js__WEBPACK_IMPORTED_MODULE_14__.parsePath)(this.basePath) + (0,_utils_parsePath_js__WEBPACK_IMPORTED_MODULE_14__.parsePath)(path);\n        if (!frog.browserLocation) frog.browserLocation = this.browserLocation;\n        if (!frog.dev) frog.dev = this.dev;\n        if (!frog.headers) frog.headers = this.headers;\n        if (!frog.hubApiUrl) frog.hubApiUrl = this.hubApiUrl;\n        if (!frog.hub) frog.hub = this.hub;\n        if (!frog.imageOptions) frog.imageOptions = this.imageOptions;\n        if (!frog.origin) frog.origin = this.origin;\n        if (!frog.secret) frog.secret = this.secret;\n        if (!frog.ui) frog.ui = this.ui;\n        if (!frog.verify) frog.verify = this.verify;\n        this.hono.route(path, frog.hono);\n        return this;\n    }\n} //# sourceMappingURL=frog-base.js.map\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/frog-base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/frog.js":
/*!****************************************!*\
  !*** ./node_modules/frog/_lib/frog.js ***!
  \****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Frog: () => (/* binding */ Frog)\n/* harmony export */ });\n/* harmony import */ var hono__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hono */ \"(rsc)/./node_modules/hono/dist/index.js\");\n/* harmony import */ var _frog_base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./frog-base.js */ \"(rsc)/./node_modules/frog/_lib/frog-base.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_frog_base_js__WEBPACK_IMPORTED_MODULE_1__]);\n_frog_base_js__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n/**\n * A Frog instance.\n *\n * @param parameters - {@link FrogConstructorParameters}\n * @returns instance. {@link FrogBase}\n *\n * @example\n * ```\n * import { Frog } from 'frog'\n *\n * const app = new Frog()\n *\n * app.frame('/', (c) => {\n *   const { buttonValue, inputText, status } = c\n *   const fruit = inputText || buttonValue\n *   return c.res({\n *     image: (\n *       <div style={{ fontSize: 60 }}>\n *         {fruit ? `You selected: ${fruit}` : 'Welcome!'}\n *       </div>\n *     ),\n *     intents: [\n *       <Button value=\"apples\">Apples</Button>,\n *       <Button value=\"oranges\">Oranges</Button>,\n *       <Button value=\"bananas\">Bananas</Button>,\n *     ]\n *   })\n * })\n * ```\n */ class Frog extends _frog_base_js__WEBPACK_IMPORTED_MODULE_1__.FrogBase {\n    constructor(params = {}){\n        super(params);\n        const frame = this.frame;\n        this.frame = (path, ...args)=>{\n            ;\n            frame(path, ...args);\n            return this;\n        };\n    }\n} //# sourceMappingURL=frog.js.map\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL2Zyb2cuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXNCO0FBQ29CO0FBQzFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQTZCQyxHQUNNLE1BQU1DLGFBQWFELG1EQUFRQTtJQUM5QkUsWUFBWUMsU0FBUyxDQUFDLENBQUMsQ0FBRTtRQUNyQixLQUFLLENBQUNBO1FBQ04sTUFBTUMsUUFBUSxJQUFJLENBQUNBLEtBQUs7UUFDeEIsSUFBSSxDQUFDQSxLQUFLLEdBQUcsQ0FBQ0MsTUFBTSxHQUFHQzs7WUFFbkJGLE1BQU1DLFNBQVNDO1lBQ2YsT0FBTyxJQUFJO1FBQ2Y7SUFDSjtBQUNKLEVBQ0EsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmVnZ2FyLS8uL25vZGVfbW9kdWxlcy9mcm9nL19saWIvZnJvZy5qcz8zZWRkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7fSBmcm9tICdob25vJztcbmltcG9ydCB7IEZyb2dCYXNlIH0gZnJvbSAnLi9mcm9nLWJhc2UuanMnO1xuLyoqXG4gKiBBIEZyb2cgaW5zdGFuY2UuXG4gKlxuICogQHBhcmFtIHBhcmFtZXRlcnMgLSB7QGxpbmsgRnJvZ0NvbnN0cnVjdG9yUGFyYW1ldGVyc31cbiAqIEByZXR1cm5zIGluc3RhbmNlLiB7QGxpbmsgRnJvZ0Jhc2V9XG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogaW1wb3J0IHsgRnJvZyB9IGZyb20gJ2Zyb2cnXG4gKlxuICogY29uc3QgYXBwID0gbmV3IEZyb2coKVxuICpcbiAqIGFwcC5mcmFtZSgnLycsIChjKSA9PiB7XG4gKiAgIGNvbnN0IHsgYnV0dG9uVmFsdWUsIGlucHV0VGV4dCwgc3RhdHVzIH0gPSBjXG4gKiAgIGNvbnN0IGZydWl0ID0gaW5wdXRUZXh0IHx8IGJ1dHRvblZhbHVlXG4gKiAgIHJldHVybiBjLnJlcyh7XG4gKiAgICAgaW1hZ2U6IChcbiAqICAgICAgIDxkaXYgc3R5bGU9e3sgZm9udFNpemU6IDYwIH19PlxuICogICAgICAgICB7ZnJ1aXQgPyBgWW91IHNlbGVjdGVkOiAke2ZydWl0fWAgOiAnV2VsY29tZSEnfVxuICogICAgICAgPC9kaXY+XG4gKiAgICAgKSxcbiAqICAgICBpbnRlbnRzOiBbXG4gKiAgICAgICA8QnV0dG9uIHZhbHVlPVwiYXBwbGVzXCI+QXBwbGVzPC9CdXR0b24+LFxuICogICAgICAgPEJ1dHRvbiB2YWx1ZT1cIm9yYW5nZXNcIj5PcmFuZ2VzPC9CdXR0b24+LFxuICogICAgICAgPEJ1dHRvbiB2YWx1ZT1cImJhbmFuYXNcIj5CYW5hbmFzPC9CdXR0b24+LFxuICogICAgIF1cbiAqICAgfSlcbiAqIH0pXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIEZyb2cgZXh0ZW5kcyBGcm9nQmFzZSB7XG4gICAgY29uc3RydWN0b3IocGFyYW1zID0ge30pIHtcbiAgICAgICAgc3VwZXIocGFyYW1zKTtcbiAgICAgICAgY29uc3QgZnJhbWUgPSB0aGlzLmZyYW1lO1xuICAgICAgICB0aGlzLmZyYW1lID0gKHBhdGgsIC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgIDtcbiAgICAgICAgICAgIGZyYW1lKHBhdGgsIC4uLmFyZ3MpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH07XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvZy5qcy5tYXAiXSwibmFtZXMiOlsiRnJvZ0Jhc2UiLCJGcm9nIiwiY29uc3RydWN0b3IiLCJwYXJhbXMiLCJmcmFtZSIsInBhdGgiLCJhcmdzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/frog.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/jsx/jsx-dev-runtime/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/frog/_lib/jsx/jsx-dev-runtime/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Fragment: () => (/* reexport safe */ hono_jsx__WEBPACK_IMPORTED_MODULE_0__.Fragment),\n/* harmony export */   jsxDEV: () => (/* binding */ jsxDEV)\n/* harmony export */ });\n/* harmony import */ var hono_jsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hono/jsx */ \"(rsc)/./node_modules/hono/dist/jsx/index.js\");\n\n\nfunction jsxDEV(tag, props, key) {\n    let node;\n    if (!props || !(\"children\" in props)) {\n        node = (0,hono_jsx__WEBPACK_IMPORTED_MODULE_0__.jsx)(tag, props, ...[]);\n    } else {\n        const children = props.children;\n        // biome-ignore lint/performance/noDelete:\n        // biome-ignore lint/complexity/useLiteralKeys:\n        delete props[\"children\"];\n        node = Array.isArray(children) ? (0,hono_jsx__WEBPACK_IMPORTED_MODULE_0__.jsx)(tag, props, ...children) : (0,hono_jsx__WEBPACK_IMPORTED_MODULE_0__.jsx)(tag, props, ...[\n            children\n        ]);\n    }\n    node.key = key;\n    return node;\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL2pzeC9qc3gtZGV2LXJ1bnRpbWUvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQStCO0FBQ0s7QUFDN0IsU0FBU0UsT0FBT0MsR0FBRyxFQUFFQyxLQUFLLEVBQUVDLEdBQUc7SUFDbEMsSUFBSUM7SUFDSixJQUFJLENBQUNGLFNBQVMsQ0FBRSxlQUFjQSxLQUFJLEdBQUk7UUFDbENFLE9BQU9OLDZDQUFHQSxDQUFDRyxLQUFLQyxVQUFVLEVBQUU7SUFDaEMsT0FDSztRQUNELE1BQU1HLFdBQVdILE1BQU1HLFFBQVE7UUFDL0IsMENBQTBDO1FBQzFDLCtDQUErQztRQUMvQyxPQUFPSCxLQUFLLENBQUMsV0FBVztRQUN4QkUsT0FBT0UsTUFBTUMsT0FBTyxDQUFDRixZQUNmUCw2Q0FBR0EsQ0FBQ0csS0FBS0MsVUFBVUcsWUFDbkJQLDZDQUFHQSxDQUFDRyxLQUFLQyxVQUFVO1lBQUNHO1NBQVM7SUFDdkM7SUFDQUQsS0FBS0QsR0FBRyxHQUFHQTtJQUNYLE9BQU9DO0FBQ1gsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZWdnYXItLy4vbm9kZV9tb2R1bGVzL2Zyb2cvX2xpYi9qc3gvanN4LWRldi1ydW50aW1lL2luZGV4LmpzP2UxMTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsganN4IH0gZnJvbSAnaG9uby9qc3gnO1xuZXhwb3J0IHsgRnJhZ21lbnQgfSBmcm9tICdob25vL2pzeCc7XG5leHBvcnQgZnVuY3Rpb24ganN4REVWKHRhZywgcHJvcHMsIGtleSkge1xuICAgIGxldCBub2RlO1xuICAgIGlmICghcHJvcHMgfHwgISgnY2hpbGRyZW4nIGluIHByb3BzKSkge1xuICAgICAgICBub2RlID0ganN4KHRhZywgcHJvcHMsIC4uLltdKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW47XG4gICAgICAgIC8vIGJpb21lLWlnbm9yZSBsaW50L3BlcmZvcm1hbmNlL25vRGVsZXRlOlxuICAgICAgICAvLyBiaW9tZS1pZ25vcmUgbGludC9jb21wbGV4aXR5L3VzZUxpdGVyYWxLZXlzOlxuICAgICAgICBkZWxldGUgcHJvcHNbJ2NoaWxkcmVuJ107XG4gICAgICAgIG5vZGUgPSBBcnJheS5pc0FycmF5KGNoaWxkcmVuKVxuICAgICAgICAgICAgPyBqc3godGFnLCBwcm9wcywgLi4uY2hpbGRyZW4pXG4gICAgICAgICAgICA6IGpzeCh0YWcsIHByb3BzLCAuLi5bY2hpbGRyZW5dKTtcbiAgICB9XG4gICAgbm9kZS5rZXkgPSBrZXk7XG4gICAgcmV0dXJuIG5vZGU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsianN4IiwiRnJhZ21lbnQiLCJqc3hERVYiLCJ0YWciLCJwcm9wcyIsImtleSIsIm5vZGUiLCJjaGlsZHJlbiIsIkFycmF5IiwiaXNBcnJheSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/jsx/jsx-dev-runtime/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/protobufs/generated/message_pb.js":
/*!******************************************************************!*\
  !*** ./node_modules/frog/_lib/protobufs/generated/message_pb.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CastAddBody: () => (/* binding */ CastAddBody),\n/* harmony export */   CastId: () => (/* binding */ CastId),\n/* harmony export */   CastRemoveBody: () => (/* binding */ CastRemoveBody),\n/* harmony export */   Embed: () => (/* binding */ Embed),\n/* harmony export */   FarcasterNetwork: () => (/* binding */ FarcasterNetwork),\n/* harmony export */   FrameActionBody: () => (/* binding */ FrameActionBody),\n/* harmony export */   HashScheme: () => (/* binding */ HashScheme),\n/* harmony export */   LinkBody: () => (/* binding */ LinkBody),\n/* harmony export */   Message: () => (/* binding */ Message),\n/* harmony export */   MessageData: () => (/* binding */ MessageData),\n/* harmony export */   MessageType: () => (/* binding */ MessageType),\n/* harmony export */   Protocol: () => (/* binding */ Protocol),\n/* harmony export */   ReactionBody: () => (/* binding */ ReactionBody),\n/* harmony export */   ReactionType: () => (/* binding */ ReactionType),\n/* harmony export */   SignatureScheme: () => (/* binding */ SignatureScheme),\n/* harmony export */   UserDataBody: () => (/* binding */ UserDataBody),\n/* harmony export */   UserDataType: () => (/* binding */ UserDataType),\n/* harmony export */   VerificationAddAddressBody: () => (/* binding */ VerificationAddAddressBody),\n/* harmony export */   VerificationRemoveBody: () => (/* binding */ VerificationRemoveBody)\n/* harmony export */ });\n/* harmony import */ var _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bufbuild/protobuf */ \"(rsc)/./node_modules/@bufbuild/protobuf/dist/esm/proto3.js\");\n/* harmony import */ var _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bufbuild/protobuf */ \"(rsc)/./node_modules/@bufbuild/protobuf/dist/esm/message.js\");\n/* harmony import */ var _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @bufbuild/protobuf */ \"(rsc)/./node_modules/@bufbuild/protobuf/dist/esm/proto-int64.js\");\n/* harmony import */ var _username_proof_pb_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./username_proof_pb.js */ \"(rsc)/./node_modules/frog/_lib/protobufs/generated/username_proof_pb.js\");\n// @generated by protoc-gen-es v1.7.2 with parameter \"target=ts\"\n// @generated from file message.proto (syntax proto3)\n/* eslint-disable */ // @ts-nocheck\n\n\n/**\n * * Type of hashing scheme used to produce a digest of MessageData\n *\n * @generated from enum HashScheme\n */ var HashScheme;\n(function(HashScheme) {\n    /**\n     * @generated from enum value: HASH_SCHEME_NONE = 0;\n     */ HashScheme[HashScheme[\"NONE\"] = 0] = \"NONE\";\n    /**\n     * Default scheme for hashing MessageData\n     *\n     * @generated from enum value: HASH_SCHEME_BLAKE3 = 1;\n     */ HashScheme[HashScheme[\"BLAKE3\"] = 1] = \"BLAKE3\";\n})(HashScheme || (HashScheme = {}));\n// Retrieve enum metadata with: proto3.getEnumType(HashScheme)\n_bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.setEnumType(HashScheme, \"HashScheme\", [\n    {\n        no: 0,\n        name: \"HASH_SCHEME_NONE\"\n    },\n    {\n        no: 1,\n        name: \"HASH_SCHEME_BLAKE3\"\n    }\n]);\n/**\n * * Type of signature scheme used to sign the Message hash\n *\n * @generated from enum SignatureScheme\n */ var SignatureScheme;\n(function(SignatureScheme) {\n    /**\n     * @generated from enum value: SIGNATURE_SCHEME_NONE = 0;\n     */ SignatureScheme[SignatureScheme[\"NONE\"] = 0] = \"NONE\";\n    /**\n     * Ed25519 signature (default)\n     *\n     * @generated from enum value: SIGNATURE_SCHEME_ED25519 = 1;\n     */ SignatureScheme[SignatureScheme[\"ED25519\"] = 1] = \"ED25519\";\n    /**\n     * ECDSA signature using EIP-712 scheme\n     *\n     * @generated from enum value: SIGNATURE_SCHEME_EIP712 = 2;\n     */ SignatureScheme[SignatureScheme[\"EIP712\"] = 2] = \"EIP712\";\n})(SignatureScheme || (SignatureScheme = {}));\n// Retrieve enum metadata with: proto3.getEnumType(SignatureScheme)\n_bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.setEnumType(SignatureScheme, \"SignatureScheme\", [\n    {\n        no: 0,\n        name: \"SIGNATURE_SCHEME_NONE\"\n    },\n    {\n        no: 1,\n        name: \"SIGNATURE_SCHEME_ED25519\"\n    },\n    {\n        no: 2,\n        name: \"SIGNATURE_SCHEME_EIP712\"\n    }\n]);\n/**\n * * Type of the MessageBody\n *\n * @generated from enum MessageType\n */ var MessageType;\n(function(MessageType) {\n    /**\n     * @generated from enum value: MESSAGE_TYPE_NONE = 0;\n     */ MessageType[MessageType[\"NONE\"] = 0] = \"NONE\";\n    /**\n     * Add a new Cast\n     *\n     * @generated from enum value: MESSAGE_TYPE_CAST_ADD = 1;\n     */ MessageType[MessageType[\"CAST_ADD\"] = 1] = \"CAST_ADD\";\n    /**\n     * Remove an existing Cast\n     *\n     * @generated from enum value: MESSAGE_TYPE_CAST_REMOVE = 2;\n     */ MessageType[MessageType[\"CAST_REMOVE\"] = 2] = \"CAST_REMOVE\";\n    /**\n     * Add a Reaction to a Cast\n     *\n     * @generated from enum value: MESSAGE_TYPE_REACTION_ADD = 3;\n     */ MessageType[MessageType[\"REACTION_ADD\"] = 3] = \"REACTION_ADD\";\n    /**\n     * Remove a Reaction from a Cast\n     *\n     * @generated from enum value: MESSAGE_TYPE_REACTION_REMOVE = 4;\n     */ MessageType[MessageType[\"REACTION_REMOVE\"] = 4] = \"REACTION_REMOVE\";\n    /**\n     * Add a new Link\n     *\n     * @generated from enum value: MESSAGE_TYPE_LINK_ADD = 5;\n     */ MessageType[MessageType[\"LINK_ADD\"] = 5] = \"LINK_ADD\";\n    /**\n     * Remove an existing Link\n     *\n     * @generated from enum value: MESSAGE_TYPE_LINK_REMOVE = 6;\n     */ MessageType[MessageType[\"LINK_REMOVE\"] = 6] = \"LINK_REMOVE\";\n    /**\n     * Add a Verification of an Ethereum Address\n     *\n     * @generated from enum value: MESSAGE_TYPE_VERIFICATION_ADD_ETH_ADDRESS = 7;\n     */ MessageType[MessageType[\"VERIFICATION_ADD_ETH_ADDRESS\"] = 7] = \"VERIFICATION_ADD_ETH_ADDRESS\";\n    /**\n     * Remove a Verification\n     *\n     * @generated from enum value: MESSAGE_TYPE_VERIFICATION_REMOVE = 8;\n     */ MessageType[MessageType[\"VERIFICATION_REMOVE\"] = 8] = \"VERIFICATION_REMOVE\";\n    /**\n     *  Deprecated\n     *  MESSAGE_TYPE_SIGNER_ADD = 9; // Add a new Ed25519 key pair that signs messages for a user\n     *  MESSAGE_TYPE_SIGNER_REMOVE = 10; // Remove an Ed25519 key pair that signs messages for a user\n     *\n     * Add metadata about a user\n     *\n     * @generated from enum value: MESSAGE_TYPE_USER_DATA_ADD = 11;\n     */ MessageType[MessageType[\"USER_DATA_ADD\"] = 11] = \"USER_DATA_ADD\";\n    /**\n     * Add or replace a username proof\n     *\n     * @generated from enum value: MESSAGE_TYPE_USERNAME_PROOF = 12;\n     */ MessageType[MessageType[\"USERNAME_PROOF\"] = 12] = \"USERNAME_PROOF\";\n    /**\n     * A Farcaster Frame action\n     *\n     * @generated from enum value: MESSAGE_TYPE_FRAME_ACTION = 13;\n     */ MessageType[MessageType[\"FRAME_ACTION\"] = 13] = \"FRAME_ACTION\";\n})(MessageType || (MessageType = {}));\n// Retrieve enum metadata with: proto3.getEnumType(MessageType)\n_bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.setEnumType(MessageType, \"MessageType\", [\n    {\n        no: 0,\n        name: \"MESSAGE_TYPE_NONE\"\n    },\n    {\n        no: 1,\n        name: \"MESSAGE_TYPE_CAST_ADD\"\n    },\n    {\n        no: 2,\n        name: \"MESSAGE_TYPE_CAST_REMOVE\"\n    },\n    {\n        no: 3,\n        name: \"MESSAGE_TYPE_REACTION_ADD\"\n    },\n    {\n        no: 4,\n        name: \"MESSAGE_TYPE_REACTION_REMOVE\"\n    },\n    {\n        no: 5,\n        name: \"MESSAGE_TYPE_LINK_ADD\"\n    },\n    {\n        no: 6,\n        name: \"MESSAGE_TYPE_LINK_REMOVE\"\n    },\n    {\n        no: 7,\n        name: \"MESSAGE_TYPE_VERIFICATION_ADD_ETH_ADDRESS\"\n    },\n    {\n        no: 8,\n        name: \"MESSAGE_TYPE_VERIFICATION_REMOVE\"\n    },\n    {\n        no: 11,\n        name: \"MESSAGE_TYPE_USER_DATA_ADD\"\n    },\n    {\n        no: 12,\n        name: \"MESSAGE_TYPE_USERNAME_PROOF\"\n    },\n    {\n        no: 13,\n        name: \"MESSAGE_TYPE_FRAME_ACTION\"\n    }\n]);\n/**\n * * Farcaster network the message is intended for\n *\n * @generated from enum FarcasterNetwork\n */ var FarcasterNetwork;\n(function(FarcasterNetwork) {\n    /**\n     * @generated from enum value: FARCASTER_NETWORK_NONE = 0;\n     */ FarcasterNetwork[FarcasterNetwork[\"NONE\"] = 0] = \"NONE\";\n    /**\n     * Public primary network\n     *\n     * @generated from enum value: FARCASTER_NETWORK_MAINNET = 1;\n     */ FarcasterNetwork[FarcasterNetwork[\"MAINNET\"] = 1] = \"MAINNET\";\n    /**\n     * Public test network\n     *\n     * @generated from enum value: FARCASTER_NETWORK_TESTNET = 2;\n     */ FarcasterNetwork[FarcasterNetwork[\"TESTNET\"] = 2] = \"TESTNET\";\n    /**\n     * Private test network\n     *\n     * @generated from enum value: FARCASTER_NETWORK_DEVNET = 3;\n     */ FarcasterNetwork[FarcasterNetwork[\"DEVNET\"] = 3] = \"DEVNET\";\n})(FarcasterNetwork || (FarcasterNetwork = {}));\n// Retrieve enum metadata with: proto3.getEnumType(FarcasterNetwork)\n_bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.setEnumType(FarcasterNetwork, \"FarcasterNetwork\", [\n    {\n        no: 0,\n        name: \"FARCASTER_NETWORK_NONE\"\n    },\n    {\n        no: 1,\n        name: \"FARCASTER_NETWORK_MAINNET\"\n    },\n    {\n        no: 2,\n        name: \"FARCASTER_NETWORK_TESTNET\"\n    },\n    {\n        no: 3,\n        name: \"FARCASTER_NETWORK_DEVNET\"\n    }\n]);\n/**\n * * Type of UserData\n *\n * @generated from enum UserDataType\n */ var UserDataType;\n(function(UserDataType) {\n    /**\n     * @generated from enum value: USER_DATA_TYPE_NONE = 0;\n     */ UserDataType[UserDataType[\"NONE\"] = 0] = \"NONE\";\n    /**\n     * Profile Picture for the user\n     *\n     * @generated from enum value: USER_DATA_TYPE_PFP = 1;\n     */ UserDataType[UserDataType[\"PFP\"] = 1] = \"PFP\";\n    /**\n     * Display Name for the user\n     *\n     * @generated from enum value: USER_DATA_TYPE_DISPLAY = 2;\n     */ UserDataType[UserDataType[\"DISPLAY\"] = 2] = \"DISPLAY\";\n    /**\n     * Bio for the user\n     *\n     * @generated from enum value: USER_DATA_TYPE_BIO = 3;\n     */ UserDataType[UserDataType[\"BIO\"] = 3] = \"BIO\";\n    /**\n     * URL of the user\n     *\n     * @generated from enum value: USER_DATA_TYPE_URL = 5;\n     */ UserDataType[UserDataType[\"URL\"] = 5] = \"URL\";\n    /**\n     * Preferred Name for the user\n     *\n     * @generated from enum value: USER_DATA_TYPE_USERNAME = 6;\n     */ UserDataType[UserDataType[\"USERNAME\"] = 6] = \"USERNAME\";\n})(UserDataType || (UserDataType = {}));\n// Retrieve enum metadata with: proto3.getEnumType(UserDataType)\n_bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.setEnumType(UserDataType, \"UserDataType\", [\n    {\n        no: 0,\n        name: \"USER_DATA_TYPE_NONE\"\n    },\n    {\n        no: 1,\n        name: \"USER_DATA_TYPE_PFP\"\n    },\n    {\n        no: 2,\n        name: \"USER_DATA_TYPE_DISPLAY\"\n    },\n    {\n        no: 3,\n        name: \"USER_DATA_TYPE_BIO\"\n    },\n    {\n        no: 5,\n        name: \"USER_DATA_TYPE_URL\"\n    },\n    {\n        no: 6,\n        name: \"USER_DATA_TYPE_USERNAME\"\n    }\n]);\n/**\n * * Type of Reaction\n *\n * @generated from enum ReactionType\n */ var ReactionType;\n(function(ReactionType) {\n    /**\n     * @generated from enum value: REACTION_TYPE_NONE = 0;\n     */ ReactionType[ReactionType[\"NONE\"] = 0] = \"NONE\";\n    /**\n     * Like the target cast\n     *\n     * @generated from enum value: REACTION_TYPE_LIKE = 1;\n     */ ReactionType[ReactionType[\"LIKE\"] = 1] = \"LIKE\";\n    /**\n     * Share target cast to the user's audience\n     *\n     * @generated from enum value: REACTION_TYPE_RECAST = 2;\n     */ ReactionType[ReactionType[\"RECAST\"] = 2] = \"RECAST\";\n})(ReactionType || (ReactionType = {}));\n// Retrieve enum metadata with: proto3.getEnumType(ReactionType)\n_bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.setEnumType(ReactionType, \"ReactionType\", [\n    {\n        no: 0,\n        name: \"REACTION_TYPE_NONE\"\n    },\n    {\n        no: 1,\n        name: \"REACTION_TYPE_LIKE\"\n    },\n    {\n        no: 2,\n        name: \"REACTION_TYPE_RECAST\"\n    }\n]);\n/**\n * * Type of Protocol to disambiguate verification addresses\n *\n * @generated from enum Protocol\n */ var Protocol;\n(function(Protocol) {\n    /**\n     * @generated from enum value: PROTOCOL_ETHEREUM = 0;\n     */ Protocol[Protocol[\"ETHEREUM\"] = 0] = \"ETHEREUM\";\n    /**\n     * @generated from enum value: PROTOCOL_SOLANA = 1;\n     */ Protocol[Protocol[\"SOLANA\"] = 1] = \"SOLANA\";\n})(Protocol || (Protocol = {}));\n// Retrieve enum metadata with: proto3.getEnumType(Protocol)\n_bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.setEnumType(Protocol, \"Protocol\", [\n    {\n        no: 0,\n        name: \"PROTOCOL_ETHEREUM\"\n    },\n    {\n        no: 1,\n        name: \"PROTOCOL_SOLANA\"\n    }\n]);\n/**\n * *\n * A Message is a delta operation on the Farcaster network. The message protobuf is an envelope\n * that wraps a MessageData object and contains a hash and signature which can verify its authenticity.\n *\n * @generated from message Message\n */ class Message extends _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_1__.Message {\n    constructor(data){\n        super();\n        /**\n         * Contents of the message\n         *\n         * @generated from field: MessageData data = 1;\n         */ Object.defineProperty(this, \"data\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * Hash digest of data\n         *\n         * @generated from field: bytes hash = 2;\n         */ Object.defineProperty(this, \"hash\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        /**\n         * Hash scheme that produced the hash digest\n         *\n         * @generated from field: HashScheme hash_scheme = 3;\n         */ Object.defineProperty(this, \"hashScheme\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: HashScheme.NONE\n        });\n        /**\n         * Signature of the hash digest\n         *\n         * @generated from field: bytes signature = 4;\n         */ Object.defineProperty(this, \"signature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        /**\n         * Signature scheme that produced the signature\n         *\n         * @generated from field: SignatureScheme signature_scheme = 5;\n         */ Object.defineProperty(this, \"signatureScheme\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: SignatureScheme.NONE\n        });\n        /**\n         * Public key or address of the key pair that produced the signature\n         *\n         * @generated from field: bytes signer = 6;\n         */ Object.defineProperty(this, \"signer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        /**\n         * MessageData serialized to bytes if using protobuf serialization other than ts-proto\n         *\n         * @generated from field: optional bytes data_bytes = 7;\n         */ Object.defineProperty(this, \"dataBytes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Message().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Message().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Message().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.equals(Message, a, b);\n    }\n}\nObject.defineProperty(Message, \"runtime\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3\n});\nObject.defineProperty(Message, \"typeName\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Message\"\n});\nObject.defineProperty(Message, \"fields\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.newFieldList(()=>[\n            {\n                no: 1,\n                name: \"data\",\n                kind: \"message\",\n                T: MessageData\n            },\n            {\n                no: 2,\n                name: \"hash\",\n                kind: \"scalar\",\n                T: 12 /* ScalarType.BYTES */ \n            },\n            {\n                no: 3,\n                name: \"hash_scheme\",\n                kind: \"enum\",\n                T: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.getEnumType(HashScheme)\n            },\n            {\n                no: 4,\n                name: \"signature\",\n                kind: \"scalar\",\n                T: 12 /* ScalarType.BYTES */ \n            },\n            {\n                no: 5,\n                name: \"signature_scheme\",\n                kind: \"enum\",\n                T: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.getEnumType(SignatureScheme)\n            },\n            {\n                no: 6,\n                name: \"signer\",\n                kind: \"scalar\",\n                T: 12 /* ScalarType.BYTES */ \n            },\n            {\n                no: 7,\n                name: \"data_bytes\",\n                kind: \"scalar\",\n                T: 12 /* ScalarType.BYTES */ ,\n                opt: true\n            }\n        ])\n});\n/**\n * *\n * A MessageData object contains properties common to all messages and wraps a body object which\n * contains properties specific to the MessageType.\n *\n * @generated from message MessageData\n */ class MessageData extends _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_1__.Message {\n    constructor(data){\n        super();\n        /**\n         * Type of message contained in the body\n         *\n         * @generated from field: MessageType type = 1;\n         */ Object.defineProperty(this, \"type\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: MessageType.NONE\n        });\n        /**\n         * Farcaster ID of the user producing the message\n         *\n         * @generated from field: uint64 fid = 2;\n         */ Object.defineProperty(this, \"fid\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_2__.protoInt64.zero\n        });\n        /**\n         * Farcaster epoch timestamp in seconds\n         *\n         * @generated from field: uint32 timestamp = 3;\n         */ Object.defineProperty(this, \"timestamp\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        /**\n         * Farcaster network the message is intended for\n         *\n         * @generated from field: FarcasterNetwork network = 4;\n         */ Object.defineProperty(this, \"network\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: FarcasterNetwork.NONE\n        });\n        /**\n         * @generated from oneof MessageData.body\n         */ Object.defineProperty(this, \"body\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {\n                case: undefined\n            }\n        });\n        _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new MessageData().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new MessageData().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new MessageData().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.equals(MessageData, a, b);\n    }\n}\nObject.defineProperty(MessageData, \"runtime\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3\n});\nObject.defineProperty(MessageData, \"typeName\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"MessageData\"\n});\nObject.defineProperty(MessageData, \"fields\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.newFieldList(()=>[\n            {\n                no: 1,\n                name: \"type\",\n                kind: \"enum\",\n                T: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.getEnumType(MessageType)\n            },\n            {\n                no: 2,\n                name: \"fid\",\n                kind: \"scalar\",\n                T: 4 /* ScalarType.UINT64 */ \n            },\n            {\n                no: 3,\n                name: \"timestamp\",\n                kind: \"scalar\",\n                T: 13 /* ScalarType.UINT32 */ \n            },\n            {\n                no: 4,\n                name: \"network\",\n                kind: \"enum\",\n                T: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.getEnumType(FarcasterNetwork)\n            },\n            {\n                no: 5,\n                name: \"cast_add_body\",\n                kind: \"message\",\n                T: CastAddBody,\n                oneof: \"body\"\n            },\n            {\n                no: 6,\n                name: \"cast_remove_body\",\n                kind: \"message\",\n                T: CastRemoveBody,\n                oneof: \"body\"\n            },\n            {\n                no: 7,\n                name: \"reaction_body\",\n                kind: \"message\",\n                T: ReactionBody,\n                oneof: \"body\"\n            },\n            {\n                no: 9,\n                name: \"verification_add_address_body\",\n                kind: \"message\",\n                T: VerificationAddAddressBody,\n                oneof: \"body\"\n            },\n            {\n                no: 10,\n                name: \"verification_remove_body\",\n                kind: \"message\",\n                T: VerificationRemoveBody,\n                oneof: \"body\"\n            },\n            {\n                no: 12,\n                name: \"user_data_body\",\n                kind: \"message\",\n                T: UserDataBody,\n                oneof: \"body\"\n            },\n            {\n                no: 14,\n                name: \"link_body\",\n                kind: \"message\",\n                T: LinkBody,\n                oneof: \"body\"\n            },\n            {\n                no: 15,\n                name: \"username_proof_body\",\n                kind: \"message\",\n                T: _username_proof_pb_js__WEBPACK_IMPORTED_MODULE_3__.UserNameProof,\n                oneof: \"body\"\n            },\n            {\n                no: 16,\n                name: \"frame_action_body\",\n                kind: \"message\",\n                T: FrameActionBody,\n                oneof: \"body\"\n            }\n        ])\n});\n/**\n * * Adds metadata about a user\n *\n * @generated from message UserDataBody\n */ class UserDataBody extends _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_1__.Message {\n    constructor(data){\n        super();\n        /**\n         * Type of metadata\n         *\n         * @generated from field: UserDataType type = 1;\n         */ Object.defineProperty(this, \"type\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: UserDataType.NONE\n        });\n        /**\n         * Value of the metadata\n         *\n         * @generated from field: string value = 2;\n         */ Object.defineProperty(this, \"value\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new UserDataBody().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new UserDataBody().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new UserDataBody().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.equals(UserDataBody, a, b);\n    }\n}\nObject.defineProperty(UserDataBody, \"runtime\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3\n});\nObject.defineProperty(UserDataBody, \"typeName\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"UserDataBody\"\n});\nObject.defineProperty(UserDataBody, \"fields\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.newFieldList(()=>[\n            {\n                no: 1,\n                name: \"type\",\n                kind: \"enum\",\n                T: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.getEnumType(UserDataType)\n            },\n            {\n                no: 2,\n                name: \"value\",\n                kind: \"scalar\",\n                T: 9 /* ScalarType.STRING */ \n            }\n        ])\n});\n/**\n * @generated from message Embed\n */ class Embed extends _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_1__.Message {\n    constructor(data){\n        super();\n        /**\n         * @generated from oneof Embed.embed\n         */ Object.defineProperty(this, \"embed\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {\n                case: undefined\n            }\n        });\n        _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Embed().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Embed().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Embed().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.equals(Embed, a, b);\n    }\n}\nObject.defineProperty(Embed, \"runtime\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3\n});\nObject.defineProperty(Embed, \"typeName\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Embed\"\n});\nObject.defineProperty(Embed, \"fields\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.newFieldList(()=>[\n            {\n                no: 1,\n                name: \"url\",\n                kind: \"scalar\",\n                T: 9 /* ScalarType.STRING */ ,\n                oneof: \"embed\"\n            },\n            {\n                no: 2,\n                name: \"cast_id\",\n                kind: \"message\",\n                T: CastId,\n                oneof: \"embed\"\n            }\n        ])\n});\n/**\n * * Adds a new Cast\n *\n * @generated from message CastAddBody\n */ class CastAddBody extends _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_1__.Message {\n    constructor(data){\n        super();\n        /**\n         * URLs to be embedded in the cast\n         *\n         * @generated from field: repeated string embeds_deprecated = 1;\n         */ Object.defineProperty(this, \"embedsDeprecated\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        /**\n         * Fids mentioned in the cast\n         *\n         * @generated from field: repeated uint64 mentions = 2;\n         */ Object.defineProperty(this, \"mentions\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        /**\n         * @generated from oneof CastAddBody.parent\n         */ Object.defineProperty(this, \"parent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {\n                case: undefined\n            }\n        });\n        /**\n         * Text of the cast\n         *\n         * @generated from field: string text = 4;\n         */ Object.defineProperty(this, \"text\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        /**\n         * Positions of the mentions in the text\n         *\n         * @generated from field: repeated uint32 mentions_positions = 5;\n         */ Object.defineProperty(this, \"mentionsPositions\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        /**\n         * URLs or cast ids to be embedded in the cast\n         *\n         * @generated from field: repeated Embed embeds = 6;\n         */ Object.defineProperty(this, \"embeds\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new CastAddBody().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new CastAddBody().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new CastAddBody().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.equals(CastAddBody, a, b);\n    }\n}\nObject.defineProperty(CastAddBody, \"runtime\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3\n});\nObject.defineProperty(CastAddBody, \"typeName\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"CastAddBody\"\n});\nObject.defineProperty(CastAddBody, \"fields\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.newFieldList(()=>[\n            {\n                no: 1,\n                name: \"embeds_deprecated\",\n                kind: \"scalar\",\n                T: 9 /* ScalarType.STRING */ ,\n                repeated: true\n            },\n            {\n                no: 2,\n                name: \"mentions\",\n                kind: \"scalar\",\n                T: 4 /* ScalarType.UINT64 */ ,\n                repeated: true\n            },\n            {\n                no: 3,\n                name: \"parent_cast_id\",\n                kind: \"message\",\n                T: CastId,\n                oneof: \"parent\"\n            },\n            {\n                no: 7,\n                name: \"parent_url\",\n                kind: \"scalar\",\n                T: 9 /* ScalarType.STRING */ ,\n                oneof: \"parent\"\n            },\n            {\n                no: 4,\n                name: \"text\",\n                kind: \"scalar\",\n                T: 9 /* ScalarType.STRING */ \n            },\n            {\n                no: 5,\n                name: \"mentions_positions\",\n                kind: \"scalar\",\n                T: 13 /* ScalarType.UINT32 */ ,\n                repeated: true\n            },\n            {\n                no: 6,\n                name: \"embeds\",\n                kind: \"message\",\n                T: Embed,\n                repeated: true\n            }\n        ])\n});\n/**\n * * Removes an existing Cast\n *\n * @generated from message CastRemoveBody\n */ class CastRemoveBody extends _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_1__.Message {\n    constructor(data){\n        super();\n        /**\n         * Hash of the cast to remove\n         *\n         * @generated from field: bytes target_hash = 1;\n         */ Object.defineProperty(this, \"targetHash\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new CastRemoveBody().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new CastRemoveBody().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new CastRemoveBody().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.equals(CastRemoveBody, a, b);\n    }\n}\nObject.defineProperty(CastRemoveBody, \"runtime\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3\n});\nObject.defineProperty(CastRemoveBody, \"typeName\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"CastRemoveBody\"\n});\nObject.defineProperty(CastRemoveBody, \"fields\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.newFieldList(()=>[\n            {\n                no: 1,\n                name: \"target_hash\",\n                kind: \"scalar\",\n                T: 12 /* ScalarType.BYTES */ \n            }\n        ])\n});\n/**\n * * Identifier used to look up a Cast\n *\n * @generated from message CastId\n */ class CastId extends _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_1__.Message {\n    constructor(data){\n        super();\n        /**\n         * Fid of the user who created the cast\n         *\n         * @generated from field: uint64 fid = 1;\n         */ Object.defineProperty(this, \"fid\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_2__.protoInt64.zero\n        });\n        /**\n         * Hash of the cast\n         *\n         * @generated from field: bytes hash = 2;\n         */ Object.defineProperty(this, \"hash\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new CastId().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new CastId().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new CastId().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.equals(CastId, a, b);\n    }\n}\nObject.defineProperty(CastId, \"runtime\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3\n});\nObject.defineProperty(CastId, \"typeName\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"CastId\"\n});\nObject.defineProperty(CastId, \"fields\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.newFieldList(()=>[\n            {\n                no: 1,\n                name: \"fid\",\n                kind: \"scalar\",\n                T: 4 /* ScalarType.UINT64 */ \n            },\n            {\n                no: 2,\n                name: \"hash\",\n                kind: \"scalar\",\n                T: 12 /* ScalarType.BYTES */ \n            }\n        ])\n});\n/**\n * * Adds or removes a Reaction from a Cast\n *\n * @generated from message ReactionBody\n */ class ReactionBody extends _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_1__.Message {\n    constructor(data){\n        super();\n        /**\n         * Type of reaction\n         *\n         * @generated from field: ReactionType type = 1;\n         */ Object.defineProperty(this, \"type\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: ReactionType.NONE\n        });\n        /**\n         * @generated from oneof ReactionBody.target\n         */ Object.defineProperty(this, \"target\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {\n                case: undefined\n            }\n        });\n        _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new ReactionBody().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new ReactionBody().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new ReactionBody().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.equals(ReactionBody, a, b);\n    }\n}\nObject.defineProperty(ReactionBody, \"runtime\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3\n});\nObject.defineProperty(ReactionBody, \"typeName\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"ReactionBody\"\n});\nObject.defineProperty(ReactionBody, \"fields\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.newFieldList(()=>[\n            {\n                no: 1,\n                name: \"type\",\n                kind: \"enum\",\n                T: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.getEnumType(ReactionType)\n            },\n            {\n                no: 2,\n                name: \"target_cast_id\",\n                kind: \"message\",\n                T: CastId,\n                oneof: \"target\"\n            },\n            {\n                no: 3,\n                name: \"target_url\",\n                kind: \"scalar\",\n                T: 9 /* ScalarType.STRING */ ,\n                oneof: \"target\"\n            }\n        ])\n});\n/**\n * * Adds a Verification of ownership of an Address based on Protocol\n *\n * @generated from message VerificationAddAddressBody\n */ class VerificationAddAddressBody extends _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_1__.Message {\n    constructor(data){\n        super();\n        /**\n         * Address being verified for a given Protocol\n         *\n         * @generated from field: bytes address = 1;\n         */ Object.defineProperty(this, \"address\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        /**\n         * Signature produced by the user's address for a given Protocol\n         *\n         * @generated from field: bytes claim_signature = 2;\n         */ Object.defineProperty(this, \"claimSignature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        /**\n         * Hash of the latest Ethereum block when the signature was produced\n         *\n         * @generated from field: bytes block_hash = 3;\n         */ Object.defineProperty(this, \"blockHash\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        /**\n         * Type of verification. 0 = EOA, 1 = contract\n         *\n         * @generated from field: uint32 verification_type = 4;\n         */ Object.defineProperty(this, \"verificationType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        /**\n         * 0 for EOA verifications, 1 or 10 for contract verifications\n         *\n         * @generated from field: uint32 chain_id = 5;\n         */ Object.defineProperty(this, \"chainId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        /**\n         * Protocol of the Verification\n         *\n         * @generated from field: Protocol protocol = 7;\n         */ Object.defineProperty(this, \"protocol\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: Protocol.ETHEREUM\n        });\n        _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new VerificationAddAddressBody().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new VerificationAddAddressBody().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new VerificationAddAddressBody().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.equals(VerificationAddAddressBody, a, b);\n    }\n}\nObject.defineProperty(VerificationAddAddressBody, \"runtime\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3\n});\nObject.defineProperty(VerificationAddAddressBody, \"typeName\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"VerificationAddAddressBody\"\n});\nObject.defineProperty(VerificationAddAddressBody, \"fields\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.newFieldList(()=>[\n            {\n                no: 1,\n                name: \"address\",\n                kind: \"scalar\",\n                T: 12 /* ScalarType.BYTES */ \n            },\n            {\n                no: 2,\n                name: \"claim_signature\",\n                kind: \"scalar\",\n                T: 12 /* ScalarType.BYTES */ \n            },\n            {\n                no: 3,\n                name: \"block_hash\",\n                kind: \"scalar\",\n                T: 12 /* ScalarType.BYTES */ \n            },\n            {\n                no: 4,\n                name: \"verification_type\",\n                kind: \"scalar\",\n                T: 13 /* ScalarType.UINT32 */ \n            },\n            {\n                no: 5,\n                name: \"chain_id\",\n                kind: \"scalar\",\n                T: 13 /* ScalarType.UINT32 */ \n            },\n            {\n                no: 7,\n                name: \"protocol\",\n                kind: \"enum\",\n                T: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.getEnumType(Protocol)\n            }\n        ])\n});\n/**\n * * Removes a Verification of a given protocol\n *\n * @generated from message VerificationRemoveBody\n */ class VerificationRemoveBody extends _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_1__.Message {\n    constructor(data){\n        super();\n        /**\n         * Address of the Verification to remove\n         *\n         * @generated from field: bytes address = 1;\n         */ Object.defineProperty(this, \"address\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        /**\n         * Protocol of the Verification to remove\n         *\n         * @generated from field: Protocol protocol = 2;\n         */ Object.defineProperty(this, \"protocol\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: Protocol.ETHEREUM\n        });\n        _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new VerificationRemoveBody().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new VerificationRemoveBody().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new VerificationRemoveBody().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.equals(VerificationRemoveBody, a, b);\n    }\n}\nObject.defineProperty(VerificationRemoveBody, \"runtime\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3\n});\nObject.defineProperty(VerificationRemoveBody, \"typeName\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"VerificationRemoveBody\"\n});\nObject.defineProperty(VerificationRemoveBody, \"fields\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.newFieldList(()=>[\n            {\n                no: 1,\n                name: \"address\",\n                kind: \"scalar\",\n                T: 12 /* ScalarType.BYTES */ \n            },\n            {\n                no: 2,\n                name: \"protocol\",\n                kind: \"enum\",\n                T: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.getEnumType(Protocol)\n            }\n        ])\n});\n/**\n * * Adds or removes a Link\n *\n * @generated from message LinkBody\n */ class LinkBody extends _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_1__.Message {\n    constructor(data){\n        super();\n        /**\n         * Type of link, <= 8 characters\n         *\n         * @generated from field: string type = 1;\n         */ Object.defineProperty(this, \"type\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        /**\n         * User-defined timestamp that preserves original timestamp when message.data.timestamp needs to be updated for compaction\n         *\n         * @generated from field: optional uint32 displayTimestamp = 2;\n         */ Object.defineProperty(this, \"displayTimestamp\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * @generated from oneof LinkBody.target\n         */ Object.defineProperty(this, \"target\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {\n                case: undefined\n            }\n        });\n        _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new LinkBody().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new LinkBody().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new LinkBody().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.equals(LinkBody, a, b);\n    }\n}\nObject.defineProperty(LinkBody, \"runtime\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3\n});\nObject.defineProperty(LinkBody, \"typeName\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"LinkBody\"\n});\nObject.defineProperty(LinkBody, \"fields\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.newFieldList(()=>[\n            {\n                no: 1,\n                name: \"type\",\n                kind: \"scalar\",\n                T: 9 /* ScalarType.STRING */ \n            },\n            {\n                no: 2,\n                name: \"displayTimestamp\",\n                kind: \"scalar\",\n                T: 13 /* ScalarType.UINT32 */ ,\n                opt: true\n            },\n            {\n                no: 3,\n                name: \"target_fid\",\n                kind: \"scalar\",\n                T: 4 /* ScalarType.UINT64 */ ,\n                oneof: \"target\"\n            }\n        ])\n});\n/**\n * * A Farcaster Frame action\n *\n * @generated from message FrameActionBody\n */ class FrameActionBody extends _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_1__.Message {\n    constructor(data){\n        super();\n        /**\n         * URL of the Frame triggering the action\n         *\n         * @generated from field: bytes url = 1;\n         */ Object.defineProperty(this, \"url\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        /**\n         * The index of the button pressed (1-4)\n         *\n         * @generated from field: uint32 button_index = 2;\n         */ Object.defineProperty(this, \"buttonIndex\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        /**\n         * The cast which contained the frame url\n         *\n         * @generated from field: CastId cast_id = 3;\n         */ Object.defineProperty(this, \"castId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * Text input from the user, if present\n         *\n         * @generated from field: bytes input_text = 4;\n         */ Object.defineProperty(this, \"inputText\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        /**\n         * Serialized frame state value\n         *\n         * @generated from field: bytes state = 5;\n         */ Object.defineProperty(this, \"state\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        /**\n         * Chain-specific transaction ID for tx actions\n         *\n         * @generated from field: bytes transaction_id = 6;\n         */ Object.defineProperty(this, \"transactionId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        /**\n         * Chain-specific address for tx actions\n         *\n         * @generated from field: bytes address = 7;\n         */ Object.defineProperty(this, \"address\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new FrameActionBody().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new FrameActionBody().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new FrameActionBody().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.equals(FrameActionBody, a, b);\n    }\n}\nObject.defineProperty(FrameActionBody, \"runtime\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3\n});\nObject.defineProperty(FrameActionBody, \"typeName\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"FrameActionBody\"\n});\nObject.defineProperty(FrameActionBody, \"fields\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.newFieldList(()=>[\n            {\n                no: 1,\n                name: \"url\",\n                kind: \"scalar\",\n                T: 12 /* ScalarType.BYTES */ \n            },\n            {\n                no: 2,\n                name: \"button_index\",\n                kind: \"scalar\",\n                T: 13 /* ScalarType.UINT32 */ \n            },\n            {\n                no: 3,\n                name: \"cast_id\",\n                kind: \"message\",\n                T: CastId\n            },\n            {\n                no: 4,\n                name: \"input_text\",\n                kind: \"scalar\",\n                T: 12 /* ScalarType.BYTES */ \n            },\n            {\n                no: 5,\n                name: \"state\",\n                kind: \"scalar\",\n                T: 12 /* ScalarType.BYTES */ \n            },\n            {\n                no: 6,\n                name: \"transaction_id\",\n                kind: \"scalar\",\n                T: 12 /* ScalarType.BYTES */ \n            },\n            {\n                no: 7,\n                name: \"address\",\n                kind: \"scalar\",\n                T: 12 /* ScalarType.BYTES */ \n            }\n        ])\n}); //# sourceMappingURL=message_pb.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/protobufs/generated/message_pb.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/protobufs/generated/username_proof_pb.js":
/*!*************************************************************************!*\
  !*** ./node_modules/frog/_lib/protobufs/generated/username_proof_pb.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UserNameProof: () => (/* binding */ UserNameProof),\n/* harmony export */   UserNameType: () => (/* binding */ UserNameType)\n/* harmony export */ });\n/* harmony import */ var _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bufbuild/protobuf */ \"(rsc)/./node_modules/@bufbuild/protobuf/dist/esm/proto3.js\");\n/* harmony import */ var _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bufbuild/protobuf */ \"(rsc)/./node_modules/@bufbuild/protobuf/dist/esm/message.js\");\n/* harmony import */ var _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @bufbuild/protobuf */ \"(rsc)/./node_modules/@bufbuild/protobuf/dist/esm/proto-int64.js\");\n// @generated by protoc-gen-es v1.7.2 with parameter \"target=ts\"\n// @generated from file username_proof.proto (syntax proto3)\n/* eslint-disable */ // @ts-nocheck\n\n/**\n * @generated from enum UserNameType\n */ var UserNameType;\n(function(UserNameType) {\n    /**\n     * @generated from enum value: USERNAME_TYPE_NONE = 0;\n     */ UserNameType[UserNameType[\"USERNAME_TYPE_NONE\"] = 0] = \"USERNAME_TYPE_NONE\";\n    /**\n     * @generated from enum value: USERNAME_TYPE_FNAME = 1;\n     */ UserNameType[UserNameType[\"USERNAME_TYPE_FNAME\"] = 1] = \"USERNAME_TYPE_FNAME\";\n    /**\n     * @generated from enum value: USERNAME_TYPE_ENS_L1 = 2;\n     */ UserNameType[UserNameType[\"USERNAME_TYPE_ENS_L1\"] = 2] = \"USERNAME_TYPE_ENS_L1\";\n})(UserNameType || (UserNameType = {}));\n// Retrieve enum metadata with: proto3.getEnumType(UserNameType)\n_bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.setEnumType(UserNameType, \"UserNameType\", [\n    {\n        no: 0,\n        name: \"USERNAME_TYPE_NONE\"\n    },\n    {\n        no: 1,\n        name: \"USERNAME_TYPE_FNAME\"\n    },\n    {\n        no: 2,\n        name: \"USERNAME_TYPE_ENS_L1\"\n    }\n]);\n/**\n * @generated from message UserNameProof\n */ class UserNameProof extends _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_1__.Message {\n    constructor(data){\n        super();\n        /**\n         * @generated from field: uint64 timestamp = 1;\n         */ Object.defineProperty(this, \"timestamp\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_2__.protoInt64.zero\n        });\n        /**\n         * @generated from field: bytes name = 2;\n         */ Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        /**\n         * @generated from field: bytes owner = 3;\n         */ Object.defineProperty(this, \"owner\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        /**\n         * @generated from field: bytes signature = 4;\n         */ Object.defineProperty(this, \"signature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        /**\n         * @generated from field: uint64 fid = 5;\n         */ Object.defineProperty(this, \"fid\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_2__.protoInt64.zero\n        });\n        /**\n         * @generated from field: UserNameType type = 6;\n         */ Object.defineProperty(this, \"type\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: UserNameType.USERNAME_TYPE_NONE\n        });\n        _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new UserNameProof().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new UserNameProof().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new UserNameProof().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.equals(UserNameProof, a, b);\n    }\n}\nObject.defineProperty(UserNameProof, \"runtime\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3\n});\nObject.defineProperty(UserNameProof, \"typeName\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"UserNameProof\"\n});\nObject.defineProperty(UserNameProof, \"fields\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.util.newFieldList(()=>[\n            {\n                no: 1,\n                name: \"timestamp\",\n                kind: \"scalar\",\n                T: 4 /* ScalarType.UINT64 */ \n            },\n            {\n                no: 2,\n                name: \"name\",\n                kind: \"scalar\",\n                T: 12 /* ScalarType.BYTES */ \n            },\n            {\n                no: 3,\n                name: \"owner\",\n                kind: \"scalar\",\n                T: 12 /* ScalarType.BYTES */ \n            },\n            {\n                no: 4,\n                name: \"signature\",\n                kind: \"scalar\",\n                T: 12 /* ScalarType.BYTES */ \n            },\n            {\n                no: 5,\n                name: \"fid\",\n                kind: \"scalar\",\n                T: 4 /* ScalarType.UINT64 */ \n            },\n            {\n                no: 6,\n                name: \"type\",\n                kind: \"enum\",\n                T: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.proto3.getEnumType(UserNameType)\n            }\n        ])\n}); //# sourceMappingURL=username_proof_pb.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/protobufs/generated/username_proof_pb.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/utils/deserializeJson.js":
/*!*********************************************************!*\
  !*** ./node_modules/frog/_lib/utils/deserializeJson.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deserializeJson: () => (/* binding */ deserializeJson)\n/* harmony export */ });\nfunction deserializeJson(data = \"{}\") {\n    if (data === \"undefined\") return {};\n    return JSON.parse(decodeURIComponent(data));\n} //# sourceMappingURL=deserializeJson.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL2Rlc2VyaWFsaXplSnNvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EsZ0JBQWdCQyxPQUFPLElBQUk7SUFDdkMsSUFBSUEsU0FBUyxhQUNULE9BQU8sQ0FBQztJQUNaLE9BQU9DLEtBQUtDLEtBQUssQ0FBQ0MsbUJBQW1CSDtBQUN6QyxFQUNBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2JlZ2dhci0vLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL2Rlc2VyaWFsaXplSnNvbi5qcz82Yjg2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBkZXNlcmlhbGl6ZUpzb24oZGF0YSA9ICd7fScpIHtcbiAgICBpZiAoZGF0YSA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgIHJldHVybiB7fTtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShkZWNvZGVVUklDb21wb25lbnQoZGF0YSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVzZXJpYWxpemVKc29uLmpzLm1hcCJdLCJuYW1lcyI6WyJkZXNlcmlhbGl6ZUpzb24iLCJkYXRhIiwiSlNPTiIsInBhcnNlIiwiZGVjb2RlVVJJQ29tcG9uZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/utils/deserializeJson.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/utils/fromQuery.js":
/*!***************************************************!*\
  !*** ./node_modules/frog/_lib/utils/fromQuery.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromQuery: () => (/* binding */ fromQuery)\n/* harmony export */ });\nfunction fromQuery(query) {\n    const obj = {};\n    for (const [key, value] of Object.entries(query)){\n        let decoded = decodeURIComponent(value);\n        if (decoded.startsWith(\"#A_\")) decoded = decoded.replace(\"#A_\", \"\").split(\",\");\n        else if (decoded.startsWith(\"#O_\")) decoded = JSON.parse(decoded.replace(\"#O_\", \"\"));\n        // Omit any encoded ampersands.\n        obj[key.replace(/^amp;/, \"\")] = decoded;\n    }\n    return obj;\n} //# sourceMappingURL=fromQuery.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL2Zyb21RdWVyeS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EsVUFBVUMsS0FBSztJQUMzQixNQUFNQyxNQUFNLENBQUM7SUFDYixLQUFLLE1BQU0sQ0FBQ0MsS0FBS0MsTUFBTSxJQUFJQyxPQUFPQyxPQUFPLENBQUNMLE9BQVE7UUFDOUMsSUFBSU0sVUFBVUMsbUJBQW1CSjtRQUNqQyxJQUFJRyxRQUFRRSxVQUFVLENBQUMsUUFDbkJGLFVBQVVBLFFBQVFHLE9BQU8sQ0FBQyxPQUFPLElBQUlDLEtBQUssQ0FBQzthQUMxQyxJQUFJSixRQUFRRSxVQUFVLENBQUMsUUFDeEJGLFVBQVVLLEtBQUtDLEtBQUssQ0FBQ04sUUFBUUcsT0FBTyxDQUFDLE9BQU87UUFDaEQsK0JBQStCO1FBQy9CUixHQUFHLENBQUNDLElBQUlPLE9BQU8sQ0FBQyxTQUFTLElBQUksR0FBR0g7SUFDcEM7SUFDQSxPQUFPTDtBQUNYLEVBQ0EscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmVnZ2FyLS8uL25vZGVfbW9kdWxlcy9mcm9nL19saWIvdXRpbHMvZnJvbVF1ZXJ5LmpzPzZkN2MiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGZyb21RdWVyeShxdWVyeSkge1xuICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHF1ZXJ5KSkge1xuICAgICAgICBsZXQgZGVjb2RlZCA9IGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gICAgICAgIGlmIChkZWNvZGVkLnN0YXJ0c1dpdGgoJyNBXycpKVxuICAgICAgICAgICAgZGVjb2RlZCA9IGRlY29kZWQucmVwbGFjZSgnI0FfJywgJycpLnNwbGl0KCcsJyk7XG4gICAgICAgIGVsc2UgaWYgKGRlY29kZWQuc3RhcnRzV2l0aCgnI09fJykpXG4gICAgICAgICAgICBkZWNvZGVkID0gSlNPTi5wYXJzZShkZWNvZGVkLnJlcGxhY2UoJyNPXycsICcnKSk7XG4gICAgICAgIC8vIE9taXQgYW55IGVuY29kZWQgYW1wZXJzYW5kcy5cbiAgICAgICAgb2JqW2tleS5yZXBsYWNlKC9eYW1wOy8sICcnKV0gPSBkZWNvZGVkO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbVF1ZXJ5LmpzLm1hcCJdLCJuYW1lcyI6WyJmcm9tUXVlcnkiLCJxdWVyeSIsIm9iaiIsImtleSIsInZhbHVlIiwiT2JqZWN0IiwiZW50cmllcyIsImRlY29kZWQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJzdGFydHNXaXRoIiwicmVwbGFjZSIsInNwbGl0IiwiSlNPTiIsInBhcnNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/utils/fromQuery.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/utils/getButtonValues.js":
/*!*********************************************************!*\
  !*** ./node_modules/frog/_lib/utils/getButtonValues.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getButtonValues: () => (/* binding */ getButtonValues)\n/* harmony export */ });\n/* harmony import */ var hono_jsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hono/jsx */ \"(rsc)/./node_modules/hono/dist/jsx/index.js\");\n\n\nfunction getButtonValues(intents) {\n    if (!intents) return [];\n    const buttonValues = [];\n    for (const intent of intents){\n        if (!intent) continue;\n        const { property } = intent.props;\n        if (!property.match(/^fc:frame:button:(1|2|3|4)$/)) continue;\n        buttonValues.push(intent.props[\"data-value\"]);\n    }\n    return buttonValues;\n} //# sourceMappingURL=getButtonValues.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL2dldEJ1dHRvblZhbHVlcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEwQjtBQUNTO0FBQzVCLFNBQVNBLGdCQUFnQkMsT0FBTztJQUNuQyxJQUFJLENBQUNBLFNBQ0QsT0FBTyxFQUFFO0lBQ2IsTUFBTUMsZUFBZSxFQUFFO0lBQ3ZCLEtBQUssTUFBTUMsVUFBVUYsUUFBUztRQUMxQixJQUFJLENBQUNFLFFBQ0Q7UUFDSixNQUFNLEVBQUVDLFFBQVEsRUFBRSxHQUFHRCxPQUFPRSxLQUFLO1FBQ2pDLElBQUksQ0FBQ0QsU0FBU0UsS0FBSyxDQUFDLGdDQUNoQjtRQUNKSixhQUFhSyxJQUFJLENBQUNKLE9BQU9FLEtBQUssQ0FBQyxhQUFhO0lBQ2hEO0lBQ0EsT0FBT0g7QUFDWCxFQUNBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2JlZ2dhci0vLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL2dldEJ1dHRvblZhbHVlcy5qcz9hNzU5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7fSBmcm9tICdob25vL2pzeCc7XG5pbXBvcnQge30gZnJvbSAnLi4vdHlwZXMvZnJhbWUuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEJ1dHRvblZhbHVlcyhpbnRlbnRzKSB7XG4gICAgaWYgKCFpbnRlbnRzKVxuICAgICAgICByZXR1cm4gW107XG4gICAgY29uc3QgYnV0dG9uVmFsdWVzID0gW107XG4gICAgZm9yIChjb25zdCBpbnRlbnQgb2YgaW50ZW50cykge1xuICAgICAgICBpZiAoIWludGVudClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCB7IHByb3BlcnR5IH0gPSBpbnRlbnQucHJvcHM7XG4gICAgICAgIGlmICghcHJvcGVydHkubWF0Y2goL15mYzpmcmFtZTpidXR0b246KDF8MnwzfDQpJC8pKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGJ1dHRvblZhbHVlcy5wdXNoKGludGVudC5wcm9wc1snZGF0YS12YWx1ZSddKTtcbiAgICB9XG4gICAgcmV0dXJuIGJ1dHRvblZhbHVlcztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldEJ1dHRvblZhbHVlcy5qcy5tYXAiXSwibmFtZXMiOlsiZ2V0QnV0dG9uVmFsdWVzIiwiaW50ZW50cyIsImJ1dHRvblZhbHVlcyIsImludGVudCIsInByb3BlcnR5IiwicHJvcHMiLCJtYXRjaCIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/utils/getButtonValues.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/utils/getCastActionContext.js":
/*!**************************************************************!*\
  !*** ./node_modules/frog/_lib/utils/getCastActionContext.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCastActionContext: () => (/* binding */ getCastActionContext)\n/* harmony export */ });\nfunction getCastActionContext(parameters) {\n    const { context } = parameters;\n    const { env, frameData, req, verified } = context || {};\n    if (!frameData) throw new Error(\"Frame data must be present for action handlers.\");\n    return {\n        context: {\n            env,\n            error: (data)=>({\n                    error: data,\n                    format: \"cast-action\",\n                    status: \"error\"\n                }),\n            actionData: {\n                buttonIndex: 1,\n                castId: frameData.castId,\n                fid: frameData.fid,\n                network: frameData.network,\n                messageHash: frameData.messageHash,\n                timestamp: frameData.timestamp,\n                url: frameData.url\n            },\n            req,\n            res: (data)=>({\n                    data,\n                    format: \"cast-action\",\n                    status: \"success\"\n                }),\n            var: context.var,\n            verified\n        }\n    };\n} //# sourceMappingURL=getCastActionContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL2dldENhc3RBY3Rpb25Db250ZXh0LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxTQUFTQSxxQkFBcUJDLFVBQVU7SUFDM0MsTUFBTSxFQUFFQyxPQUFPLEVBQUUsR0FBR0Q7SUFDcEIsTUFBTSxFQUFFRSxHQUFHLEVBQUVDLFNBQVMsRUFBRUMsR0FBRyxFQUFFQyxRQUFRLEVBQUUsR0FBR0osV0FBVyxDQUFDO0lBQ3RELElBQUksQ0FBQ0UsV0FDRCxNQUFNLElBQUlHLE1BQU07SUFDcEIsT0FBTztRQUNITCxTQUFTO1lBQ0xDO1lBQ0FLLE9BQU8sQ0FBQ0MsT0FBVTtvQkFDZEQsT0FBT0M7b0JBQ1BDLFFBQVE7b0JBQ1JDLFFBQVE7Z0JBQ1o7WUFDQUMsWUFBWTtnQkFDUkMsYUFBYTtnQkFDYkMsUUFBUVYsVUFBVVUsTUFBTTtnQkFDeEJDLEtBQUtYLFVBQVVXLEdBQUc7Z0JBQ2xCQyxTQUFTWixVQUFVWSxPQUFPO2dCQUMxQkMsYUFBYWIsVUFBVWEsV0FBVztnQkFDbENDLFdBQVdkLFVBQVVjLFNBQVM7Z0JBQzlCQyxLQUFLZixVQUFVZSxHQUFHO1lBQ3RCO1lBQ0FkO1lBQ0FlLEtBQUssQ0FBQ1gsT0FBVTtvQkFDWkE7b0JBQ0FDLFFBQVE7b0JBQ1JDLFFBQVE7Z0JBQ1o7WUFDQVUsS0FBS25CLFFBQVFtQixHQUFHO1lBQ2hCZjtRQUNKO0lBQ0o7QUFDSixFQUNBLGdEQUFnRCIsInNvdXJjZXMiOlsid2VicGFjazovL2JlZ2dhci0vLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL2dldENhc3RBY3Rpb25Db250ZXh0LmpzPzdlODciXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGdldENhc3RBY3Rpb25Db250ZXh0KHBhcmFtZXRlcnMpIHtcbiAgICBjb25zdCB7IGNvbnRleHQgfSA9IHBhcmFtZXRlcnM7XG4gICAgY29uc3QgeyBlbnYsIGZyYW1lRGF0YSwgcmVxLCB2ZXJpZmllZCB9ID0gY29udGV4dCB8fCB7fTtcbiAgICBpZiAoIWZyYW1lRGF0YSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGcmFtZSBkYXRhIG11c3QgYmUgcHJlc2VudCBmb3IgYWN0aW9uIGhhbmRsZXJzLicpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgIGVudixcbiAgICAgICAgICAgIGVycm9yOiAoZGF0YSkgPT4gKHtcbiAgICAgICAgICAgICAgICBlcnJvcjogZGF0YSxcbiAgICAgICAgICAgICAgICBmb3JtYXQ6ICdjYXN0LWFjdGlvbicsXG4gICAgICAgICAgICAgICAgc3RhdHVzOiAnZXJyb3InLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBhY3Rpb25EYXRhOiB7XG4gICAgICAgICAgICAgICAgYnV0dG9uSW5kZXg6IDEsXG4gICAgICAgICAgICAgICAgY2FzdElkOiBmcmFtZURhdGEuY2FzdElkLFxuICAgICAgICAgICAgICAgIGZpZDogZnJhbWVEYXRhLmZpZCxcbiAgICAgICAgICAgICAgICBuZXR3b3JrOiBmcmFtZURhdGEubmV0d29yayxcbiAgICAgICAgICAgICAgICBtZXNzYWdlSGFzaDogZnJhbWVEYXRhLm1lc3NhZ2VIYXNoLFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogZnJhbWVEYXRhLnRpbWVzdGFtcCxcbiAgICAgICAgICAgICAgICB1cmw6IGZyYW1lRGF0YS51cmwsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVxLFxuICAgICAgICAgICAgcmVzOiAoZGF0YSkgPT4gKHtcbiAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgICAgIGZvcm1hdDogJ2Nhc3QtYWN0aW9uJyxcbiAgICAgICAgICAgICAgICBzdGF0dXM6ICdzdWNjZXNzJyxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgdmFyOiBjb250ZXh0LnZhcixcbiAgICAgICAgICAgIHZlcmlmaWVkLFxuICAgICAgICB9LFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRDYXN0QWN0aW9uQ29udGV4dC5qcy5tYXAiXSwibmFtZXMiOlsiZ2V0Q2FzdEFjdGlvbkNvbnRleHQiLCJwYXJhbWV0ZXJzIiwiY29udGV4dCIsImVudiIsImZyYW1lRGF0YSIsInJlcSIsInZlcmlmaWVkIiwiRXJyb3IiLCJlcnJvciIsImRhdGEiLCJmb3JtYXQiLCJzdGF0dXMiLCJhY3Rpb25EYXRhIiwiYnV0dG9uSW5kZXgiLCJjYXN0SWQiLCJmaWQiLCJuZXR3b3JrIiwibWVzc2FnZUhhc2giLCJ0aW1lc3RhbXAiLCJ1cmwiLCJyZXMiLCJ2YXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/utils/getCastActionContext.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/utils/getFrameContext.js":
/*!*********************************************************!*\
  !*** ./node_modules/frog/_lib/utils/getFrameContext.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getFrameContext: () => (/* binding */ getFrameContext)\n/* harmony export */ });\n/* harmony import */ var _getIntentState_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getIntentState.js */ \"(rsc)/./node_modules/frog/_lib/utils/getIntentState.js\");\n/* harmony import */ var _parsePath_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parsePath.js */ \"(rsc)/./node_modules/frog/_lib/utils/parsePath.js\");\n\n\nfunction getFrameContext(parameters) {\n    const { context, origin } = parameters;\n    const { env, frameData, initialPath, previousButtonValues, req, verified } = context || {};\n    const { buttonValue, inputText, redirect, reset } = (0,_getIntentState_js__WEBPACK_IMPORTED_MODULE_0__.getIntentState)({\n        buttonValues: previousButtonValues || [],\n        frameData\n    });\n    const status = (()=>{\n        if (redirect) return \"redirect\";\n        if (reset) return \"initial\";\n        return context.status || \"initial\";\n    })();\n    // If the user has clicked a reset button, we want to set the URL back to the\n    // initial URL.\n    const url = (0,_parsePath_js__WEBPACK_IMPORTED_MODULE_1__.parsePath)(reset ? `${origin}${initialPath}` : context.url);\n    let previousState = (()=>{\n        if (context.status === \"initial\") return parameters.initialState;\n        return context?.previousState || parameters.initialState;\n    })();\n    function deriveState(derive) {\n        if (status !== \"response\") return previousState;\n        if (!derive) return previousState;\n        const clone = structuredClone(previousState);\n        if (derive[Symbol.toStringTag] === \"AsyncFunction\") return derive(clone).then(()=>{\n            previousState = clone;\n            return previousState;\n        });\n        derive(clone);\n        previousState = clone;\n        return previousState;\n    }\n    return {\n        context: {\n            buttonIndex: frameData?.buttonIndex,\n            buttonValue,\n            cycle: \"main\",\n            deriveState: deriveState,\n            env,\n            error: (data)=>({\n                    error: data,\n                    format: \"frame\",\n                    status: \"error\"\n                }),\n            frameData,\n            initialPath,\n            inputText,\n            previousButtonValues,\n            previousState: previousState,\n            req,\n            res: (data)=>({\n                    data,\n                    format: \"frame\",\n                    status: \"success\"\n                }),\n            status,\n            transactionId: frameData?.transactionId,\n            url,\n            var: context.var,\n            verified\n        },\n        getState: ()=>previousState\n    };\n} //# sourceMappingURL=getFrameContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL2dldEZyYW1lQ29udGV4dC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUQ7QUFDVjtBQUNwQyxTQUFTRSxnQkFBZ0JDLFVBQVU7SUFDdEMsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLE1BQU0sRUFBRSxHQUFHRjtJQUM1QixNQUFNLEVBQUVHLEdBQUcsRUFBRUMsU0FBUyxFQUFFQyxXQUFXLEVBQUVDLG9CQUFvQixFQUFFQyxHQUFHLEVBQUVDLFFBQVEsRUFBRSxHQUFHUCxXQUFXLENBQUM7SUFDekYsTUFBTSxFQUFFUSxXQUFXLEVBQUVDLFNBQVMsRUFBRUMsUUFBUSxFQUFFQyxLQUFLLEVBQUUsR0FBR2Ysa0VBQWNBLENBQUM7UUFDL0RnQixjQUFjUCx3QkFBd0IsRUFBRTtRQUN4Q0Y7SUFDSjtJQUNBLE1BQU1VLFNBQVMsQ0FBQztRQUNaLElBQUlILFVBQ0EsT0FBTztRQUNYLElBQUlDLE9BQ0EsT0FBTztRQUNYLE9BQU9YLFFBQVFhLE1BQU0sSUFBSTtJQUM3QjtJQUNBLDZFQUE2RTtJQUM3RSxlQUFlO0lBQ2YsTUFBTUMsTUFBTWpCLHdEQUFTQSxDQUFDYyxRQUFRLENBQUMsRUFBRVYsT0FBTyxFQUFFRyxZQUFZLENBQUMsR0FBR0osUUFBUWMsR0FBRztJQUNyRSxJQUFJQyxnQkFBZ0IsQ0FBQztRQUNqQixJQUFJZixRQUFRYSxNQUFNLEtBQUssV0FDbkIsT0FBT2QsV0FBV2lCLFlBQVk7UUFDbEMsT0FBT2hCLFNBQVNlLGlCQUFpQmhCLFdBQVdpQixZQUFZO0lBQzVEO0lBQ0EsU0FBU0MsWUFBWUMsTUFBTTtRQUN2QixJQUFJTCxXQUFXLFlBQ1gsT0FBT0U7UUFDWCxJQUFJLENBQUNHLFFBQ0QsT0FBT0g7UUFDWCxNQUFNSSxRQUFRQyxnQkFBZ0JMO1FBQzlCLElBQUlHLE1BQU0sQ0FBQ0csT0FBT0MsV0FBVyxDQUFDLEtBQUssaUJBQy9CLE9BQU9KLE9BQU9DLE9BQU9JLElBQUksQ0FBQztZQUN0QlIsZ0JBQWdCSTtZQUNoQixPQUFPSjtRQUNYO1FBQ0pHLE9BQU9DO1FBQ1BKLGdCQUFnQkk7UUFDaEIsT0FBT0o7SUFDWDtJQUNBLE9BQU87UUFDSGYsU0FBUztZQUNMd0IsYUFBYXJCLFdBQVdxQjtZQUN4QmhCO1lBQ0FpQixPQUFPO1lBQ1BSLGFBQWFBO1lBQ2JmO1lBQ0F3QixPQUFPLENBQUNDLE9BQVU7b0JBQ2RELE9BQU9DO29CQUNQQyxRQUFRO29CQUNSZixRQUFRO2dCQUNaO1lBQ0FWO1lBQ0FDO1lBQ0FLO1lBQ0FKO1lBQ0FVLGVBQWVBO1lBQ2ZUO1lBQ0F1QixLQUFLLENBQUNGLE9BQVU7b0JBQUVBO29CQUFNQyxRQUFRO29CQUFTZixRQUFRO2dCQUFVO1lBQzNEQTtZQUNBaUIsZUFBZTNCLFdBQVcyQjtZQUMxQmhCO1lBQ0FpQixLQUFLL0IsUUFBUStCLEdBQUc7WUFDaEJ4QjtRQUNKO1FBQ0F5QixVQUFVLElBQU1qQjtJQUNwQjtBQUNKLEVBQ0EsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmVnZ2FyLS8uL25vZGVfbW9kdWxlcy9mcm9nL19saWIvdXRpbHMvZ2V0RnJhbWVDb250ZXh0LmpzPzc0YzYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0SW50ZW50U3RhdGUgfSBmcm9tICcuL2dldEludGVudFN0YXRlLmpzJztcbmltcG9ydCB7IHBhcnNlUGF0aCB9IGZyb20gJy4vcGFyc2VQYXRoLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRGcmFtZUNvbnRleHQocGFyYW1ldGVycykge1xuICAgIGNvbnN0IHsgY29udGV4dCwgb3JpZ2luIH0gPSBwYXJhbWV0ZXJzO1xuICAgIGNvbnN0IHsgZW52LCBmcmFtZURhdGEsIGluaXRpYWxQYXRoLCBwcmV2aW91c0J1dHRvblZhbHVlcywgcmVxLCB2ZXJpZmllZCB9ID0gY29udGV4dCB8fCB7fTtcbiAgICBjb25zdCB7IGJ1dHRvblZhbHVlLCBpbnB1dFRleHQsIHJlZGlyZWN0LCByZXNldCB9ID0gZ2V0SW50ZW50U3RhdGUoe1xuICAgICAgICBidXR0b25WYWx1ZXM6IHByZXZpb3VzQnV0dG9uVmFsdWVzIHx8IFtdLFxuICAgICAgICBmcmFtZURhdGEsXG4gICAgfSk7XG4gICAgY29uc3Qgc3RhdHVzID0gKCgpID0+IHtcbiAgICAgICAgaWYgKHJlZGlyZWN0KVxuICAgICAgICAgICAgcmV0dXJuICdyZWRpcmVjdCc7XG4gICAgICAgIGlmIChyZXNldClcbiAgICAgICAgICAgIHJldHVybiAnaW5pdGlhbCc7XG4gICAgICAgIHJldHVybiBjb250ZXh0LnN0YXR1cyB8fCAnaW5pdGlhbCc7XG4gICAgfSkoKTtcbiAgICAvLyBJZiB0aGUgdXNlciBoYXMgY2xpY2tlZCBhIHJlc2V0IGJ1dHRvbiwgd2Ugd2FudCB0byBzZXQgdGhlIFVSTCBiYWNrIHRvIHRoZVxuICAgIC8vIGluaXRpYWwgVVJMLlxuICAgIGNvbnN0IHVybCA9IHBhcnNlUGF0aChyZXNldCA/IGAke29yaWdpbn0ke2luaXRpYWxQYXRofWAgOiBjb250ZXh0LnVybCk7XG4gICAgbGV0IHByZXZpb3VzU3RhdGUgPSAoKCkgPT4ge1xuICAgICAgICBpZiAoY29udGV4dC5zdGF0dXMgPT09ICdpbml0aWFsJylcbiAgICAgICAgICAgIHJldHVybiBwYXJhbWV0ZXJzLmluaXRpYWxTdGF0ZTtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQ/LnByZXZpb3VzU3RhdGUgfHwgcGFyYW1ldGVycy5pbml0aWFsU3RhdGU7XG4gICAgfSkoKTtcbiAgICBmdW5jdGlvbiBkZXJpdmVTdGF0ZShkZXJpdmUpIHtcbiAgICAgICAgaWYgKHN0YXR1cyAhPT0gJ3Jlc3BvbnNlJylcbiAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1N0YXRlO1xuICAgICAgICBpZiAoIWRlcml2ZSlcbiAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1N0YXRlO1xuICAgICAgICBjb25zdCBjbG9uZSA9IHN0cnVjdHVyZWRDbG9uZShwcmV2aW91c1N0YXRlKTtcbiAgICAgICAgaWYgKGRlcml2ZVtTeW1ib2wudG9TdHJpbmdUYWddID09PSAnQXN5bmNGdW5jdGlvbicpXG4gICAgICAgICAgICByZXR1cm4gZGVyaXZlKGNsb25lKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBwcmV2aW91c1N0YXRlID0gY2xvbmU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzU3RhdGU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgZGVyaXZlKGNsb25lKTtcbiAgICAgICAgcHJldmlvdXNTdGF0ZSA9IGNsb25lO1xuICAgICAgICByZXR1cm4gcHJldmlvdXNTdGF0ZTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgYnV0dG9uSW5kZXg6IGZyYW1lRGF0YT8uYnV0dG9uSW5kZXgsXG4gICAgICAgICAgICBidXR0b25WYWx1ZSxcbiAgICAgICAgICAgIGN5Y2xlOiAnbWFpbicsXG4gICAgICAgICAgICBkZXJpdmVTdGF0ZTogZGVyaXZlU3RhdGUsXG4gICAgICAgICAgICBlbnYsXG4gICAgICAgICAgICBlcnJvcjogKGRhdGEpID0+ICh7XG4gICAgICAgICAgICAgICAgZXJyb3I6IGRhdGEsXG4gICAgICAgICAgICAgICAgZm9ybWF0OiAnZnJhbWUnLFxuICAgICAgICAgICAgICAgIHN0YXR1czogJ2Vycm9yJyxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZnJhbWVEYXRhLFxuICAgICAgICAgICAgaW5pdGlhbFBhdGgsXG4gICAgICAgICAgICBpbnB1dFRleHQsXG4gICAgICAgICAgICBwcmV2aW91c0J1dHRvblZhbHVlcyxcbiAgICAgICAgICAgIHByZXZpb3VzU3RhdGU6IHByZXZpb3VzU3RhdGUsXG4gICAgICAgICAgICByZXEsXG4gICAgICAgICAgICByZXM6IChkYXRhKSA9PiAoeyBkYXRhLCBmb3JtYXQ6ICdmcmFtZScsIHN0YXR1czogJ3N1Y2Nlc3MnIH0pLFxuICAgICAgICAgICAgc3RhdHVzLFxuICAgICAgICAgICAgdHJhbnNhY3Rpb25JZDogZnJhbWVEYXRhPy50cmFuc2FjdGlvbklkLFxuICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgdmFyOiBjb250ZXh0LnZhcixcbiAgICAgICAgICAgIHZlcmlmaWVkLFxuICAgICAgICB9LFxuICAgICAgICBnZXRTdGF0ZTogKCkgPT4gcHJldmlvdXNTdGF0ZSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0RnJhbWVDb250ZXh0LmpzLm1hcCJdLCJuYW1lcyI6WyJnZXRJbnRlbnRTdGF0ZSIsInBhcnNlUGF0aCIsImdldEZyYW1lQ29udGV4dCIsInBhcmFtZXRlcnMiLCJjb250ZXh0Iiwib3JpZ2luIiwiZW52IiwiZnJhbWVEYXRhIiwiaW5pdGlhbFBhdGgiLCJwcmV2aW91c0J1dHRvblZhbHVlcyIsInJlcSIsInZlcmlmaWVkIiwiYnV0dG9uVmFsdWUiLCJpbnB1dFRleHQiLCJyZWRpcmVjdCIsInJlc2V0IiwiYnV0dG9uVmFsdWVzIiwic3RhdHVzIiwidXJsIiwicHJldmlvdXNTdGF0ZSIsImluaXRpYWxTdGF0ZSIsImRlcml2ZVN0YXRlIiwiZGVyaXZlIiwiY2xvbmUiLCJzdHJ1Y3R1cmVkQ2xvbmUiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInRoZW4iLCJidXR0b25JbmRleCIsImN5Y2xlIiwiZXJyb3IiLCJkYXRhIiwiZm9ybWF0IiwicmVzIiwidHJhbnNhY3Rpb25JZCIsInZhciIsImdldFN0YXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/utils/getFrameContext.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/utils/getFrameMetadata.js":
/*!**********************************************************!*\
  !*** ./node_modules/frog/_lib/utils/getFrameMetadata.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getFrameMetadata: () => (/* binding */ getFrameMetadata),\n/* harmony export */   metaTagPropertyRegex: () => (/* binding */ metaTagPropertyRegex)\n/* harmony export */ });\n/* harmony import */ var dom_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dom-parser */ \"(rsc)/./node_modules/dom-parser/dist/index.js\");\n\nconst metaTagPropertyRegex = /^(fc|frog|og:image|og:title)/;\n/**\n * Extracts frame metadata from a given URL.\n *\n * @example\n * import { getFrameMetadata } from 'frog'\n * const frameMetadata = await getFrameMetadata(`https://myframe.com/api`)\n */ async function getFrameMetadata(url) {\n    try {\n        const text = await fetch(url).then((r)=>r.text());\n        const dom = (0,dom_parser__WEBPACK_IMPORTED_MODULE_0__.parseFromString)(text.replace(/<!doctype html>/i, \"\"));\n        const nodes = dom.getElementsByTagName(\"meta\");\n        const metaTags = [];\n        for (const node of nodes){\n            const property = node.getAttribute(\"property\");\n            const content = node.getAttribute(\"content\");\n            if (!property.match(metaTagPropertyRegex)) continue;\n            metaTags.push({\n                property: property,\n                content\n            });\n        }\n        return metaTags;\n    } catch (error) {\n        throw new Error([\n            `Failed to extract frame meta tags from \"${url}\".`,\n            \"\",\n            `Error: ${error}`\n        ].join(\"\\n\"));\n    }\n} //# sourceMappingURL=getFrameMetadata.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL2dldEZyYW1lTWV0YWRhdGEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTZDO0FBQ3RDLE1BQU1DLHVCQUF1QiwrQkFBK0I7QUFDbkU7Ozs7OztDQU1DLEdBQ00sZUFBZUMsaUJBQWlCQyxHQUFHO0lBQ3RDLElBQUk7UUFDQSxNQUFNQyxPQUFPLE1BQU1DLE1BQU1GLEtBQUtHLElBQUksQ0FBQyxDQUFDQyxJQUFNQSxFQUFFSCxJQUFJO1FBQ2hELE1BQU1JLE1BQU1SLDJEQUFlQSxDQUFDSSxLQUFLSyxPQUFPLENBQUMsb0JBQW9CO1FBQzdELE1BQU1DLFFBQVFGLElBQUlHLG9CQUFvQixDQUFDO1FBQ3ZDLE1BQU1DLFdBQVcsRUFBRTtRQUNuQixLQUFLLE1BQU1DLFFBQVFILE1BQU87WUFDdEIsTUFBTUksV0FBV0QsS0FBS0UsWUFBWSxDQUFDO1lBQ25DLE1BQU1DLFVBQVVILEtBQUtFLFlBQVksQ0FBQztZQUNsQyxJQUFJLENBQUNELFNBQVNHLEtBQUssQ0FBQ2hCLHVCQUNoQjtZQUNKVyxTQUFTTSxJQUFJLENBQUM7Z0JBQ1ZKLFVBQVVBO2dCQUNWRTtZQUNKO1FBQ0o7UUFDQSxPQUFPSjtJQUNYLEVBQ0EsT0FBT08sT0FBTztRQUNWLE1BQU0sSUFBSUMsTUFBTTtZQUNaLENBQUMsd0NBQXdDLEVBQUVqQixJQUFJLEVBQUUsQ0FBQztZQUNsRDtZQUNBLENBQUMsT0FBTyxFQUFFZ0IsTUFBTSxDQUFDO1NBQ3BCLENBQUNFLElBQUksQ0FBQztJQUNYO0FBQ0osRUFDQSw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZWdnYXItLy4vbm9kZV9tb2R1bGVzL2Zyb2cvX2xpYi91dGlscy9nZXRGcmFtZU1ldGFkYXRhLmpzPzg5ZWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2VGcm9tU3RyaW5nIH0gZnJvbSAnZG9tLXBhcnNlcic7XG5leHBvcnQgY29uc3QgbWV0YVRhZ1Byb3BlcnR5UmVnZXggPSAvXihmY3xmcm9nfG9nOmltYWdlfG9nOnRpdGxlKS87XG4vKipcbiAqIEV4dHJhY3RzIGZyYW1lIG1ldGFkYXRhIGZyb20gYSBnaXZlbiBVUkwuXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IGdldEZyYW1lTWV0YWRhdGEgfSBmcm9tICdmcm9nJ1xuICogY29uc3QgZnJhbWVNZXRhZGF0YSA9IGF3YWl0IGdldEZyYW1lTWV0YWRhdGEoYGh0dHBzOi8vbXlmcmFtZS5jb20vYXBpYClcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEZyYW1lTWV0YWRhdGEodXJsKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IGZldGNoKHVybCkudGhlbigocikgPT4gci50ZXh0KCkpO1xuICAgICAgICBjb25zdCBkb20gPSBwYXJzZUZyb21TdHJpbmcodGV4dC5yZXBsYWNlKC88IWRvY3R5cGUgaHRtbD4vaSwgJycpKTtcbiAgICAgICAgY29uc3Qgbm9kZXMgPSBkb20uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ21ldGEnKTtcbiAgICAgICAgY29uc3QgbWV0YVRhZ3MgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBub2RlIG9mIG5vZGVzKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0eSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdwcm9wZXJ0eScpO1xuICAgICAgICAgICAgY29uc3QgY29udGVudCA9IG5vZGUuZ2V0QXR0cmlidXRlKCdjb250ZW50Jyk7XG4gICAgICAgICAgICBpZiAoIXByb3BlcnR5Lm1hdGNoKG1ldGFUYWdQcm9wZXJ0eVJlZ2V4KSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIG1ldGFUYWdzLnB1c2goe1xuICAgICAgICAgICAgICAgIHByb3BlcnR5OiBwcm9wZXJ0eSxcbiAgICAgICAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1ldGFUYWdzO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFtcbiAgICAgICAgICAgIGBGYWlsZWQgdG8gZXh0cmFjdCBmcmFtZSBtZXRhIHRhZ3MgZnJvbSBcIiR7dXJsfVwiLmAsXG4gICAgICAgICAgICAnJyxcbiAgICAgICAgICAgIGBFcnJvcjogJHtlcnJvcn1gLFxuICAgICAgICBdLmpvaW4oJ1xcbicpKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRGcmFtZU1ldGFkYXRhLmpzLm1hcCJdLCJuYW1lcyI6WyJwYXJzZUZyb21TdHJpbmciLCJtZXRhVGFnUHJvcGVydHlSZWdleCIsImdldEZyYW1lTWV0YWRhdGEiLCJ1cmwiLCJ0ZXh0IiwiZmV0Y2giLCJ0aGVuIiwiciIsImRvbSIsInJlcGxhY2UiLCJub2RlcyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwibWV0YVRhZ3MiLCJub2RlIiwicHJvcGVydHkiLCJnZXRBdHRyaWJ1dGUiLCJjb250ZW50IiwibWF0Y2giLCJwdXNoIiwiZXJyb3IiLCJFcnJvciIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/utils/getFrameMetadata.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/utils/getImagePaths.js":
/*!*******************************************************!*\
  !*** ./node_modules/frog/_lib/utils/getImagePaths.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getImagePaths: () => (/* binding */ getImagePaths)\n/* harmony export */ });\nfunction getImagePaths(path) {\n    const imagePaths = [];\n    const pathParts = path.split(\"/\");\n    // skip the first split result as it's empty\n    for(let i = 1; i < pathParts.length; i++){\n        if (!pathParts[i]?.startsWith(\":\") || !pathParts[i]?.endsWith(\"?\")) continue;\n        imagePaths.push(`${pathParts.slice(0, i).join(\"/\")}/image`);\n    }\n    imagePaths.push(`${path}/image`);\n    return imagePaths;\n} //# sourceMappingURL=getImagePaths.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL2dldEltYWdlUGF0aHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLGNBQWNDLElBQUk7SUFDOUIsTUFBTUMsYUFBYSxFQUFFO0lBQ3JCLE1BQU1DLFlBQVlGLEtBQUtHLEtBQUssQ0FBQztJQUM3Qiw0Q0FBNEM7SUFDNUMsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlGLFVBQVVHLE1BQU0sRUFBRUQsSUFBSztRQUN2QyxJQUFJLENBQUNGLFNBQVMsQ0FBQ0UsRUFBRSxFQUFFRSxXQUFXLFFBQVEsQ0FBQ0osU0FBUyxDQUFDRSxFQUFFLEVBQUVHLFNBQVMsTUFDMUQ7UUFDSk4sV0FBV08sSUFBSSxDQUFDLENBQUMsRUFBRU4sVUFBVU8sS0FBSyxDQUFDLEdBQUdMLEdBQUdNLElBQUksQ0FBQyxLQUFLLE1BQU0sQ0FBQztJQUM5RDtJQUNBVCxXQUFXTyxJQUFJLENBQUMsQ0FBQyxFQUFFUixLQUFLLE1BQU0sQ0FBQztJQUMvQixPQUFPQztBQUNYLEVBQ0EseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmVnZ2FyLS8uL25vZGVfbW9kdWxlcy9mcm9nL19saWIvdXRpbHMvZ2V0SW1hZ2VQYXRocy5qcz8xNTlkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBnZXRJbWFnZVBhdGhzKHBhdGgpIHtcbiAgICBjb25zdCBpbWFnZVBhdGhzID0gW107XG4gICAgY29uc3QgcGF0aFBhcnRzID0gcGF0aC5zcGxpdCgnLycpO1xuICAgIC8vIHNraXAgdGhlIGZpcnN0IHNwbGl0IHJlc3VsdCBhcyBpdCdzIGVtcHR5XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBwYXRoUGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFwYXRoUGFydHNbaV0/LnN0YXJ0c1dpdGgoJzonKSB8fCAhcGF0aFBhcnRzW2ldPy5lbmRzV2l0aCgnPycpKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGltYWdlUGF0aHMucHVzaChgJHtwYXRoUGFydHMuc2xpY2UoMCwgaSkuam9pbignLycpfS9pbWFnZWApO1xuICAgIH1cbiAgICBpbWFnZVBhdGhzLnB1c2goYCR7cGF0aH0vaW1hZ2VgKTtcbiAgICByZXR1cm4gaW1hZ2VQYXRocztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldEltYWdlUGF0aHMuanMubWFwIl0sIm5hbWVzIjpbImdldEltYWdlUGF0aHMiLCJwYXRoIiwiaW1hZ2VQYXRocyIsInBhdGhQYXJ0cyIsInNwbGl0IiwiaSIsImxlbmd0aCIsInN0YXJ0c1dpdGgiLCJlbmRzV2l0aCIsInB1c2giLCJzbGljZSIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/utils/getImagePaths.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/utils/getIntentState.js":
/*!********************************************************!*\
  !*** ./node_modules/frog/_lib/utils/getIntentState.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getIntentState: () => (/* binding */ getIntentState)\n/* harmony export */ });\n/* harmony import */ var _components_Button_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/Button.js */ \"(rsc)/./node_modules/frog/_lib/components/Button.js\");\n\n\nfunction getIntentState({ buttonValues, frameData }) {\n    const { buttonIndex, inputText } = frameData || {};\n    const state = {\n        buttonValue: undefined,\n        inputText,\n        redirect: false,\n        reset: false\n    };\n    if (!buttonValues) return state;\n    if (buttonIndex) {\n        const buttonIntents = buttonValues;\n        const intent = buttonIntents[buttonIndex - 1];\n        if (!intent) return state;\n        if (intent.startsWith(_components_Button_js__WEBPACK_IMPORTED_MODULE_0__.buttonPrefix.reset)) state.reset = true;\n        else if (intent.startsWith(_components_Button_js__WEBPACK_IMPORTED_MODULE_0__.buttonPrefix.redirect)) {\n            state.redirect = true;\n            state.buttonValue = intent.slice(3);\n        } else state.buttonValue = intent;\n    }\n    return state;\n} //# sourceMappingURL=getIntentState.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL2dldEludGVudFN0YXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXVEO0FBQ3BCO0FBQzVCLFNBQVNDLGVBQWUsRUFBRUMsWUFBWSxFQUFFQyxTQUFTLEVBQUc7SUFDdkQsTUFBTSxFQUFFQyxXQUFXLEVBQUVDLFNBQVMsRUFBRSxHQUFHRixhQUFhLENBQUM7SUFDakQsTUFBTUcsUUFBUTtRQUNWQyxhQUFhQztRQUNiSDtRQUNBSSxVQUFVO1FBQ1ZDLE9BQU87SUFDWDtJQUNBLElBQUksQ0FBQ1IsY0FDRCxPQUFPSTtJQUNYLElBQUlGLGFBQWE7UUFDYixNQUFNTyxnQkFBZ0JUO1FBQ3RCLE1BQU1VLFNBQVNELGFBQWEsQ0FBQ1AsY0FBYyxFQUFFO1FBQzdDLElBQUksQ0FBQ1EsUUFDRCxPQUFPTjtRQUNYLElBQUlNLE9BQU9DLFVBQVUsQ0FBQ2IsK0RBQVlBLENBQUNVLEtBQUssR0FDcENKLE1BQU1JLEtBQUssR0FBRzthQUNiLElBQUlFLE9BQU9DLFVBQVUsQ0FBQ2IsK0RBQVlBLENBQUNTLFFBQVEsR0FBRztZQUMvQ0gsTUFBTUcsUUFBUSxHQUFHO1lBQ2pCSCxNQUFNQyxXQUFXLEdBQUdLLE9BQU9FLEtBQUssQ0FBQztRQUNyQyxPQUVJUixNQUFNQyxXQUFXLEdBQUdLO0lBQzVCO0lBQ0EsT0FBT047QUFDWCxFQUNBLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2JlZ2dhci0vLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL2dldEludGVudFN0YXRlLmpzPzExYzMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnV0dG9uUHJlZml4IH0gZnJvbSAnLi4vY29tcG9uZW50cy9CdXR0b24uanMnO1xuaW1wb3J0IHt9IGZyb20gJy4uL3R5cGVzL2ZyYW1lLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRJbnRlbnRTdGF0ZSh7IGJ1dHRvblZhbHVlcywgZnJhbWVEYXRhLCB9KSB7XG4gICAgY29uc3QgeyBidXR0b25JbmRleCwgaW5wdXRUZXh0IH0gPSBmcmFtZURhdGEgfHwge307XG4gICAgY29uc3Qgc3RhdGUgPSB7XG4gICAgICAgIGJ1dHRvblZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgIGlucHV0VGV4dCxcbiAgICAgICAgcmVkaXJlY3Q6IGZhbHNlLFxuICAgICAgICByZXNldDogZmFsc2UsXG4gICAgfTtcbiAgICBpZiAoIWJ1dHRvblZhbHVlcylcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIGlmIChidXR0b25JbmRleCkge1xuICAgICAgICBjb25zdCBidXR0b25JbnRlbnRzID0gYnV0dG9uVmFsdWVzO1xuICAgICAgICBjb25zdCBpbnRlbnQgPSBidXR0b25JbnRlbnRzW2J1dHRvbkluZGV4IC0gMV07XG4gICAgICAgIGlmICghaW50ZW50KVxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgICBpZiAoaW50ZW50LnN0YXJ0c1dpdGgoYnV0dG9uUHJlZml4LnJlc2V0KSlcbiAgICAgICAgICAgIHN0YXRlLnJlc2V0ID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoaW50ZW50LnN0YXJ0c1dpdGgoYnV0dG9uUHJlZml4LnJlZGlyZWN0KSkge1xuICAgICAgICAgICAgc3RhdGUucmVkaXJlY3QgPSB0cnVlO1xuICAgICAgICAgICAgc3RhdGUuYnV0dG9uVmFsdWUgPSBpbnRlbnQuc2xpY2UoMyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgc3RhdGUuYnV0dG9uVmFsdWUgPSBpbnRlbnQ7XG4gICAgfVxuICAgIHJldHVybiBzdGF0ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldEludGVudFN0YXRlLmpzLm1hcCJdLCJuYW1lcyI6WyJidXR0b25QcmVmaXgiLCJnZXRJbnRlbnRTdGF0ZSIsImJ1dHRvblZhbHVlcyIsImZyYW1lRGF0YSIsImJ1dHRvbkluZGV4IiwiaW5wdXRUZXh0Iiwic3RhdGUiLCJidXR0b25WYWx1ZSIsInVuZGVmaW5lZCIsInJlZGlyZWN0IiwicmVzZXQiLCJidXR0b25JbnRlbnRzIiwiaW50ZW50Iiwic3RhcnRzV2l0aCIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/utils/getIntentState.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/utils/getRequestUrl.js":
/*!*******************************************************!*\
  !*** ./node_modules/frog/_lib/utils/getRequestUrl.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getRequestUrl: () => (/* binding */ getRequestUrl)\n/* harmony export */ });\nfunction getRequestUrl(req) {\n    const url = new URL(req.url);\n    const forwardedHost = req.header(\"x-forwarded-host\");\n    url.host = forwardedHost ?? url.host;\n    url.protocol = req.header(\"x-forwarded-proto\") ?? url.protocol;\n    if (forwardedHost !== undefined && !forwardedHost.startsWith(\"localhost\")) url.port = \"\";\n    return url;\n} //# sourceMappingURL=getRequestUrl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL2dldFJlcXVlc3RVcmwuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLGNBQWNDLEdBQUc7SUFDN0IsTUFBTUMsTUFBTSxJQUFJQyxJQUFJRixJQUFJQyxHQUFHO0lBQzNCLE1BQU1FLGdCQUFnQkgsSUFBSUksTUFBTSxDQUFDO0lBQ2pDSCxJQUFJSSxJQUFJLEdBQUdGLGlCQUFpQkYsSUFBSUksSUFBSTtJQUNwQ0osSUFBSUssUUFBUSxHQUFHTixJQUFJSSxNQUFNLENBQUMsd0JBQXdCSCxJQUFJSyxRQUFRO0lBQzlELElBQUlILGtCQUFrQkksYUFBYSxDQUFDSixjQUFjSyxVQUFVLENBQUMsY0FDekRQLElBQUlRLElBQUksR0FBRztJQUNmLE9BQU9SO0FBQ1gsRUFDQSx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZWdnYXItLy4vbm9kZV9tb2R1bGVzL2Zyb2cvX2xpYi91dGlscy9nZXRSZXF1ZXN0VXJsLmpzP2QyM2IiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGdldFJlcXVlc3RVcmwocmVxKSB7XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChyZXEudXJsKTtcbiAgICBjb25zdCBmb3J3YXJkZWRIb3N0ID0gcmVxLmhlYWRlcigneC1mb3J3YXJkZWQtaG9zdCcpO1xuICAgIHVybC5ob3N0ID0gZm9yd2FyZGVkSG9zdCA/PyB1cmwuaG9zdDtcbiAgICB1cmwucHJvdG9jb2wgPSByZXEuaGVhZGVyKCd4LWZvcndhcmRlZC1wcm90bycpID8/IHVybC5wcm90b2NvbDtcbiAgICBpZiAoZm9yd2FyZGVkSG9zdCAhPT0gdW5kZWZpbmVkICYmICFmb3J3YXJkZWRIb3N0LnN0YXJ0c1dpdGgoJ2xvY2FsaG9zdCcpKVxuICAgICAgICB1cmwucG9ydCA9ICcnO1xuICAgIHJldHVybiB1cmw7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRSZXF1ZXN0VXJsLmpzLm1hcCJdLCJuYW1lcyI6WyJnZXRSZXF1ZXN0VXJsIiwicmVxIiwidXJsIiwiVVJMIiwiZm9yd2FyZGVkSG9zdCIsImhlYWRlciIsImhvc3QiLCJwcm90b2NvbCIsInVuZGVmaW5lZCIsInN0YXJ0c1dpdGgiLCJwb3J0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/utils/getRequestUrl.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/utils/getRouteParameters.js":
/*!************************************************************!*\
  !*** ./node_modules/frog/_lib/utils/getRouteParameters.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getRouteParameters: () => (/* binding */ getRouteParameters)\n/* harmony export */ });\nfunction getRouteParameters(...parameters) {\n    const options = typeof parameters[parameters.length - 1] === \"object\" ? parameters[parameters.length - 1] : undefined;\n    const middlewares = [];\n    let handler;\n    for(let i = parameters.length - (options ? 2 : 1); i > 0; i--){\n        if (!handler) handler = parameters[i];\n        else middlewares.push(parameters[i]);\n    }\n    return [\n        parameters[0],\n        middlewares,\n        handler,\n        options ?? {}\n    ];\n} //# sourceMappingURL=getRouteParameters.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL2dldFJvdXRlUGFyYW1ldGVycy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EsbUJBQW1CLEdBQUdDLFVBQVU7SUFDNUMsTUFBTUMsVUFBVSxPQUFPRCxVQUFVLENBQUNBLFdBQVdFLE1BQU0sR0FBRyxFQUFFLEtBQUssV0FDdkRGLFVBQVUsQ0FBQ0EsV0FBV0UsTUFBTSxHQUFHLEVBQUUsR0FDakNDO0lBQ04sTUFBTUMsY0FBYyxFQUFFO0lBQ3RCLElBQUlDO0lBQ0osSUFBSyxJQUFJQyxJQUFJTixXQUFXRSxNQUFNLEdBQUlELENBQUFBLFVBQVUsSUFBSSxJQUFJSyxJQUFJLEdBQUdBLElBQUs7UUFDNUQsSUFBSSxDQUFDRCxTQUNEQSxVQUFVTCxVQUFVLENBQUNNLEVBQUU7YUFFdkJGLFlBQVlHLElBQUksQ0FBQ1AsVUFBVSxDQUFDTSxFQUFFO0lBQ3RDO0lBQ0EsT0FBTztRQUFDTixVQUFVLENBQUMsRUFBRTtRQUFFSTtRQUFhQztRQUFTSixXQUFXLENBQUM7S0FBRTtBQUMvRCxFQUNBLDhDQUE4QyIsInNvdXJjZXMiOlsid2VicGFjazovL2JlZ2dhci0vLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL2dldFJvdXRlUGFyYW1ldGVycy5qcz8xMGI3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBnZXRSb3V0ZVBhcmFtZXRlcnMoLi4ucGFyYW1ldGVycykge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0eXBlb2YgcGFyYW1ldGVyc1twYXJhbWV0ZXJzLmxlbmd0aCAtIDFdID09PSAnb2JqZWN0J1xuICAgICAgICA/IHBhcmFtZXRlcnNbcGFyYW1ldGVycy5sZW5ndGggLSAxXVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCBtaWRkbGV3YXJlcyA9IFtdO1xuICAgIGxldCBoYW5kbGVyO1xuICAgIGZvciAobGV0IGkgPSBwYXJhbWV0ZXJzLmxlbmd0aCAtIChvcHRpb25zID8gMiA6IDEpOyBpID4gMDsgaS0tKSB7XG4gICAgICAgIGlmICghaGFuZGxlcilcbiAgICAgICAgICAgIGhhbmRsZXIgPSBwYXJhbWV0ZXJzW2ldO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBtaWRkbGV3YXJlcy5wdXNoKHBhcmFtZXRlcnNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gW3BhcmFtZXRlcnNbMF0sIG1pZGRsZXdhcmVzLCBoYW5kbGVyLCBvcHRpb25zID8/IHt9XTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldFJvdXRlUGFyYW1ldGVycy5qcy5tYXAiXSwibmFtZXMiOlsiZ2V0Um91dGVQYXJhbWV0ZXJzIiwicGFyYW1ldGVycyIsIm9wdGlvbnMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJtaWRkbGV3YXJlcyIsImhhbmRsZXIiLCJpIiwicHVzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/utils/getRouteParameters.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/utils/getTransactionContext.js":
/*!***************************************************************!*\
  !*** ./node_modules/frog/_lib/utils/getTransactionContext.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getTransactionContext: () => (/* binding */ getTransactionContext)\n/* harmony export */ });\n/* harmony import */ var hono__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hono */ \"(rsc)/./node_modules/hono/dist/index.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/utils/abi/getAbiItem.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/errors/abi.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/utils/abi/encodeFunctionData.js\");\n/* harmony import */ var _getIntentState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getIntentState.js */ \"(rsc)/./node_modules/frog/_lib/utils/getIntentState.js\");\n\n\n\nfunction getTransactionContext(parameters) {\n    const { context } = parameters;\n    const { env, frameData, initialPath, previousButtonValues, previousState, req, status, verified, url } = context || {};\n    const { buttonValue, inputText } = (0,_getIntentState_js__WEBPACK_IMPORTED_MODULE_1__.getIntentState)({\n        buttonValues: previousButtonValues || [],\n        frameData\n    });\n    return {\n        context: {\n            address: frameData?.address,\n            buttonIndex: frameData?.buttonIndex,\n            buttonValue,\n            contract (parameters) {\n                const { abi, chainId, functionName, to, args, attribution, value } = parameters;\n                const abiItem = (0,viem__WEBPACK_IMPORTED_MODULE_2__.getAbiItem)({\n                    abi: abi,\n                    name: functionName,\n                    args\n                });\n                if (!abiItem) throw new viem__WEBPACK_IMPORTED_MODULE_3__.AbiFunctionNotFoundError(functionName);\n                const abiErrorItems = abi.filter((item)=>item.type === \"error\");\n                return this.send({\n                    abi: [\n                        abiItem,\n                        ...abiErrorItems\n                    ],\n                    attribution,\n                    chainId,\n                    data: (0,viem__WEBPACK_IMPORTED_MODULE_4__.encodeFunctionData)({\n                        abi,\n                        args,\n                        functionName\n                    }),\n                    to,\n                    value\n                });\n            },\n            env,\n            error: (data)=>({\n                    error: data,\n                    format: \"transaction\",\n                    status: \"error\"\n                }),\n            frameData,\n            initialPath,\n            inputText,\n            previousButtonValues,\n            previousState,\n            req,\n            res (parameters) {\n                const { attribution, chainId, method, params } = parameters;\n                const { abi, data, to, value } = params;\n                const response = {\n                    attribution,\n                    chainId,\n                    method,\n                    params: {\n                        abi,\n                        data,\n                        to\n                    }\n                };\n                if (value) response.params.value = value.toString();\n                return {\n                    data: response,\n                    format: \"transaction\",\n                    status: \"success\"\n                };\n            },\n            send (parameters) {\n                return this.res({\n                    attribution: parameters.attribution ?? false,\n                    chainId: parameters.chainId,\n                    method: \"eth_sendTransaction\",\n                    params: parameters\n                });\n            },\n            status,\n            var: context.var,\n            verified,\n            url\n        }\n    };\n} //# sourceMappingURL=getTransactionContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL2dldFRyYW5zYWN0aW9uQ29udGV4dC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBc0I7QUFDMkQ7QUFDNUI7QUFDOUMsU0FBU0ksc0JBQXNCQyxVQUFVO0lBQzVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFLEdBQUdEO0lBQ3BCLE1BQU0sRUFBRUUsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFdBQVcsRUFBRUMsb0JBQW9CLEVBQUVDLGFBQWEsRUFBRUMsR0FBRyxFQUFFQyxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsR0FBRyxFQUFHLEdBQUdULFdBQVcsQ0FBQztJQUN0SCxNQUFNLEVBQUVVLFdBQVcsRUFBRUMsU0FBUyxFQUFFLEdBQUdkLGtFQUFjQSxDQUFDO1FBQzlDZSxjQUFjUix3QkFBd0IsRUFBRTtRQUN4Q0Y7SUFDSjtJQUNBLE9BQU87UUFDSEYsU0FBUztZQUNMYSxTQUFTWCxXQUFXVztZQUNwQkMsYUFBYVosV0FBV1k7WUFDeEJKO1lBQ0FLLFVBQVNoQixVQUFVO2dCQUNmLE1BQU0sRUFBRWlCLEdBQUcsRUFBRUMsT0FBTyxFQUFFQyxZQUFZLEVBQUVDLEVBQUUsRUFBRUMsSUFBSSxFQUFFQyxXQUFXLEVBQUVDLEtBQUssRUFBRSxHQUFHdkI7Z0JBQ3JFLE1BQU13QixVQUFVM0IsZ0RBQVVBLENBQUM7b0JBQ3ZCb0IsS0FBS0E7b0JBQ0xRLE1BQU1OO29CQUNORTtnQkFDSjtnQkFDQSxJQUFJLENBQUNHLFNBQ0QsTUFBTSxJQUFJN0IsMERBQXdCQSxDQUFDd0I7Z0JBQ3ZDLE1BQU1PLGdCQUFnQlQsSUFBSVUsTUFBTSxDQUFDLENBQUNDLE9BQVNBLEtBQUtDLElBQUksS0FBSztnQkFDekQsT0FBTyxJQUFJLENBQUNDLElBQUksQ0FBQztvQkFDYmIsS0FBSzt3QkFBQ087MkJBQVlFO3FCQUFjO29CQUNoQ0o7b0JBQ0FKO29CQUNBYSxNQUFNbkMsd0RBQWtCQSxDQUFDO3dCQUNyQnFCO3dCQUNBSTt3QkFDQUY7b0JBQ0o7b0JBQ0FDO29CQUNBRztnQkFDSjtZQUNKO1lBQ0FyQjtZQUNBOEIsT0FBTyxDQUFDRCxPQUFVO29CQUNkQyxPQUFPRDtvQkFDUEUsUUFBUTtvQkFDUnpCLFFBQVE7Z0JBQ1o7WUFDQUw7WUFDQUM7WUFDQVE7WUFDQVA7WUFDQUM7WUFDQUM7WUFDQTJCLEtBQUlsQyxVQUFVO2dCQUNWLE1BQU0sRUFBRXNCLFdBQVcsRUFBRUosT0FBTyxFQUFFaUIsTUFBTSxFQUFFQyxNQUFNLEVBQUUsR0FBR3BDO2dCQUNqRCxNQUFNLEVBQUVpQixHQUFHLEVBQUVjLElBQUksRUFBRVgsRUFBRSxFQUFFRyxLQUFLLEVBQUUsR0FBR2E7Z0JBQ2pDLE1BQU1DLFdBQVc7b0JBQ2JmO29CQUNBSjtvQkFDQWlCO29CQUNBQyxRQUFRO3dCQUNKbkI7d0JBQ0FjO3dCQUNBWDtvQkFDSjtnQkFDSjtnQkFDQSxJQUFJRyxPQUNBYyxTQUFTRCxNQUFNLENBQUNiLEtBQUssR0FBR0EsTUFBTWUsUUFBUTtnQkFDMUMsT0FBTztvQkFBRVAsTUFBTU07b0JBQVVKLFFBQVE7b0JBQWV6QixRQUFRO2dCQUFVO1lBQ3RFO1lBQ0FzQixNQUFLOUIsVUFBVTtnQkFDWCxPQUFPLElBQUksQ0FBQ2tDLEdBQUcsQ0FBQztvQkFDWlosYUFBYXRCLFdBQVdzQixXQUFXLElBQUk7b0JBQ3ZDSixTQUFTbEIsV0FBV2tCLE9BQU87b0JBQzNCaUIsUUFBUTtvQkFDUkMsUUFBUXBDO2dCQUNaO1lBQ0o7WUFDQVE7WUFDQStCLEtBQUt0QyxRQUFRc0MsR0FBRztZQUNoQjlCO1lBQ0FDO1FBQ0o7SUFDSjtBQUNKLEVBQ0EsaURBQWlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmVnZ2FyLS8uL25vZGVfbW9kdWxlcy9mcm9nL19saWIvdXRpbHMvZ2V0VHJhbnNhY3Rpb25Db250ZXh0LmpzP2JiMTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHt9IGZyb20gJ2hvbm8nO1xuaW1wb3J0IHsgQWJpRnVuY3Rpb25Ob3RGb3VuZEVycm9yLCBlbmNvZGVGdW5jdGlvbkRhdGEsIGdldEFiaUl0ZW0sIH0gZnJvbSAndmllbSc7XG5pbXBvcnQgeyBnZXRJbnRlbnRTdGF0ZSB9IGZyb20gJy4vZ2V0SW50ZW50U3RhdGUuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYW5zYWN0aW9uQ29udGV4dChwYXJhbWV0ZXJzKSB7XG4gICAgY29uc3QgeyBjb250ZXh0IH0gPSBwYXJhbWV0ZXJzO1xuICAgIGNvbnN0IHsgZW52LCBmcmFtZURhdGEsIGluaXRpYWxQYXRoLCBwcmV2aW91c0J1dHRvblZhbHVlcywgcHJldmlvdXNTdGF0ZSwgcmVxLCBzdGF0dXMsIHZlcmlmaWVkLCB1cmwsIH0gPSBjb250ZXh0IHx8IHt9O1xuICAgIGNvbnN0IHsgYnV0dG9uVmFsdWUsIGlucHV0VGV4dCB9ID0gZ2V0SW50ZW50U3RhdGUoe1xuICAgICAgICBidXR0b25WYWx1ZXM6IHByZXZpb3VzQnV0dG9uVmFsdWVzIHx8IFtdLFxuICAgICAgICBmcmFtZURhdGEsXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgYWRkcmVzczogZnJhbWVEYXRhPy5hZGRyZXNzLFxuICAgICAgICAgICAgYnV0dG9uSW5kZXg6IGZyYW1lRGF0YT8uYnV0dG9uSW5kZXgsXG4gICAgICAgICAgICBidXR0b25WYWx1ZSxcbiAgICAgICAgICAgIGNvbnRyYWN0KHBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGFiaSwgY2hhaW5JZCwgZnVuY3Rpb25OYW1lLCB0bywgYXJncywgYXR0cmlidXRpb24sIHZhbHVlIH0gPSBwYXJhbWV0ZXJzO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFiaUl0ZW0gPSBnZXRBYmlJdGVtKHtcbiAgICAgICAgICAgICAgICAgICAgYWJpOiBhYmksXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGZ1bmN0aW9uTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgYXJncyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoIWFiaUl0ZW0pXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBBYmlGdW5jdGlvbk5vdEZvdW5kRXJyb3IoZnVuY3Rpb25OYW1lKTtcbiAgICAgICAgICAgICAgICBjb25zdCBhYmlFcnJvckl0ZW1zID0gYWJpLmZpbHRlcigoaXRlbSkgPT4gaXRlbS50eXBlID09PSAnZXJyb3InKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kKHtcbiAgICAgICAgICAgICAgICAgICAgYWJpOiBbYWJpSXRlbSwgLi4uYWJpRXJyb3JJdGVtc10sXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0aW9uLFxuICAgICAgICAgICAgICAgICAgICBjaGFpbklkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBlbmNvZGVGdW5jdGlvbkRhdGEoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYWJpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJncyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIHRvLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnYsXG4gICAgICAgICAgICBlcnJvcjogKGRhdGEpID0+ICh7XG4gICAgICAgICAgICAgICAgZXJyb3I6IGRhdGEsXG4gICAgICAgICAgICAgICAgZm9ybWF0OiAndHJhbnNhY3Rpb24nLFxuICAgICAgICAgICAgICAgIHN0YXR1czogJ2Vycm9yJyxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZnJhbWVEYXRhLFxuICAgICAgICAgICAgaW5pdGlhbFBhdGgsXG4gICAgICAgICAgICBpbnB1dFRleHQsXG4gICAgICAgICAgICBwcmV2aW91c0J1dHRvblZhbHVlcyxcbiAgICAgICAgICAgIHByZXZpb3VzU3RhdGUsXG4gICAgICAgICAgICByZXEsXG4gICAgICAgICAgICByZXMocGFyYW1ldGVycykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgYXR0cmlidXRpb24sIGNoYWluSWQsIG1ldGhvZCwgcGFyYW1zIH0gPSBwYXJhbWV0ZXJzO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgYWJpLCBkYXRhLCB0bywgdmFsdWUgfSA9IHBhcmFtcztcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGNoYWluSWQsXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhYmksXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG8sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLnBhcmFtcy52YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogcmVzcG9uc2UsIGZvcm1hdDogJ3RyYW5zYWN0aW9uJywgc3RhdHVzOiAnc3VjY2VzcycgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZW5kKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXMoe1xuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGlvbjogcGFyYW1ldGVycy5hdHRyaWJ1dGlvbiA/PyBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgY2hhaW5JZDogcGFyYW1ldGVycy5jaGFpbklkLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdldGhfc2VuZFRyYW5zYWN0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBwYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0YXR1cyxcbiAgICAgICAgICAgIHZhcjogY29udGV4dC52YXIsXG4gICAgICAgICAgICB2ZXJpZmllZCxcbiAgICAgICAgICAgIHVybCxcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0VHJhbnNhY3Rpb25Db250ZXh0LmpzLm1hcCJdLCJuYW1lcyI6WyJBYmlGdW5jdGlvbk5vdEZvdW5kRXJyb3IiLCJlbmNvZGVGdW5jdGlvbkRhdGEiLCJnZXRBYmlJdGVtIiwiZ2V0SW50ZW50U3RhdGUiLCJnZXRUcmFuc2FjdGlvbkNvbnRleHQiLCJwYXJhbWV0ZXJzIiwiY29udGV4dCIsImVudiIsImZyYW1lRGF0YSIsImluaXRpYWxQYXRoIiwicHJldmlvdXNCdXR0b25WYWx1ZXMiLCJwcmV2aW91c1N0YXRlIiwicmVxIiwic3RhdHVzIiwidmVyaWZpZWQiLCJ1cmwiLCJidXR0b25WYWx1ZSIsImlucHV0VGV4dCIsImJ1dHRvblZhbHVlcyIsImFkZHJlc3MiLCJidXR0b25JbmRleCIsImNvbnRyYWN0IiwiYWJpIiwiY2hhaW5JZCIsImZ1bmN0aW9uTmFtZSIsInRvIiwiYXJncyIsImF0dHJpYnV0aW9uIiwidmFsdWUiLCJhYmlJdGVtIiwibmFtZSIsImFiaUVycm9ySXRlbXMiLCJmaWx0ZXIiLCJpdGVtIiwidHlwZSIsInNlbmQiLCJkYXRhIiwiZXJyb3IiLCJmb3JtYXQiLCJyZXMiLCJtZXRob2QiLCJwYXJhbXMiLCJyZXNwb25zZSIsInRvU3RyaW5nIiwidmFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/utils/getTransactionContext.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/utils/jws.js":
/*!*********************************************!*\
  !*** ./node_modules/frog/_lib/utils/jws.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sign: () => (/* binding */ sign),\n/* harmony export */   verify: () => (/* binding */ verify)\n/* harmony export */ });\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/node/esm/index.js\");\n\nconst decoder = new TextDecoder();\nconst encoder = new TextEncoder();\nasync function verify(signature, secret) {\n    const { payload } = await (0,jose__WEBPACK_IMPORTED_MODULE_0__.compactVerify)(signature, encoder.encode(secret));\n    return decoder.decode(payload);\n}\nasync function sign(message, secret) {\n    return new jose__WEBPACK_IMPORTED_MODULE_0__.CompactSign(encoder.encode(message)).setProtectedHeader({\n        alg: \"HS256\"\n    }).sign(encoder.encode(secret));\n} //# sourceMappingURL=jws.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL2p3cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBa0Q7QUFDbEQsTUFBTUUsVUFBVSxJQUFJQztBQUNwQixNQUFNQyxVQUFVLElBQUlDO0FBQ2IsZUFBZUMsT0FBT0MsU0FBUyxFQUFFQyxNQUFNO0lBQzFDLE1BQU0sRUFBRUMsT0FBTyxFQUFFLEdBQUcsTUFBTVIsbURBQWFBLENBQUNNLFdBQVdILFFBQVFNLE1BQU0sQ0FBQ0Y7SUFDbEUsT0FBT04sUUFBUVMsTUFBTSxDQUFDRjtBQUMxQjtBQUNPLGVBQWVHLEtBQUtDLE9BQU8sRUFBRUwsTUFBTTtJQUN0QyxPQUFPLElBQUlSLDZDQUFXQSxDQUFDSSxRQUFRTSxNQUFNLENBQUNHLFVBQ2pDQyxrQkFBa0IsQ0FBQztRQUFFQyxLQUFLO0lBQVEsR0FDbENILElBQUksQ0FBQ1IsUUFBUU0sTUFBTSxDQUFDRjtBQUM3QixFQUNBLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL2JlZ2dhci0vLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL2p3cy5qcz81YjRiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBhY3RTaWduLCBjb21wYWN0VmVyaWZ5IH0gZnJvbSAnam9zZSc7XG5jb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCk7XG5jb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdmVyaWZ5KHNpZ25hdHVyZSwgc2VjcmV0KSB7XG4gICAgY29uc3QgeyBwYXlsb2FkIH0gPSBhd2FpdCBjb21wYWN0VmVyaWZ5KHNpZ25hdHVyZSwgZW5jb2Rlci5lbmNvZGUoc2VjcmV0KSk7XG4gICAgcmV0dXJuIGRlY29kZXIuZGVjb2RlKHBheWxvYWQpO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNpZ24obWVzc2FnZSwgc2VjcmV0KSB7XG4gICAgcmV0dXJuIG5ldyBDb21wYWN0U2lnbihlbmNvZGVyLmVuY29kZShtZXNzYWdlKSlcbiAgICAgICAgLnNldFByb3RlY3RlZEhlYWRlcih7IGFsZzogJ0hTMjU2JyB9KVxuICAgICAgICAuc2lnbihlbmNvZGVyLmVuY29kZShzZWNyZXQpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWp3cy5qcy5tYXAiXSwibmFtZXMiOlsiQ29tcGFjdFNpZ24iLCJjb21wYWN0VmVyaWZ5IiwiZGVjb2RlciIsIlRleHREZWNvZGVyIiwiZW5jb2RlciIsIlRleHRFbmNvZGVyIiwidmVyaWZ5Iiwic2lnbmF0dXJlIiwic2VjcmV0IiwicGF5bG9hZCIsImVuY29kZSIsImRlY29kZSIsInNpZ24iLCJtZXNzYWdlIiwic2V0UHJvdGVjdGVkSGVhZGVyIiwiYWxnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/utils/jws.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/utils/parseBrowserLocation.js":
/*!**************************************************************!*\
  !*** ./node_modules/frog/_lib/utils/parseBrowserLocation.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseBrowserLocation: () => (/* binding */ parseBrowserLocation)\n/* harmony export */ });\nfunction parseBrowserLocation(c, location_, { basePath, path }) {\n    let location = location_ || \"\";\n    if (location?.includes(\":path\") && !path.includes(\":path\")) location = location.replace(\":path\", path.replace(/(^\\/)|(\\/$)/, \"\"));\n    else if (location?.includes(\":\")) for (const [key, value] of Object.entries(c.req.param()))location = location.replace(`:${key}`, value);\n    if (location.includes(\":basePath\")) location = location.replace(\":basePath\", basePath.replace(/(^\\/)|(\\/$)/, \"\"));\n    location = location.replace(/^\\/\\//, \"/\");\n    return location;\n} //# sourceMappingURL=parseBrowserLocation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL3BhcnNlQnJvd3NlckxvY2F0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxTQUFTQSxxQkFBcUJDLENBQUMsRUFBRUMsU0FBUyxFQUFFLEVBQUVDLFFBQVEsRUFBRUMsSUFBSSxFQUFFO0lBQ2pFLElBQUlDLFdBQVdILGFBQWE7SUFDNUIsSUFBSUcsVUFBVUMsU0FBUyxZQUFZLENBQUNGLEtBQUtFLFFBQVEsQ0FBQyxVQUM5Q0QsV0FBV0EsU0FBU0UsT0FBTyxDQUFDLFNBQVNILEtBQUtHLE9BQU8sQ0FBQyxlQUFlO1NBQ2hFLElBQUlGLFVBQVVDLFNBQVMsTUFDeEIsS0FBSyxNQUFNLENBQUNFLEtBQUtDLE1BQU0sSUFBSUMsT0FBT0MsT0FBTyxDQUFDVixFQUFFVyxHQUFHLENBQUNDLEtBQUssSUFDakRSLFdBQVdBLFNBQVNFLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRUMsSUFBSSxDQUFDLEVBQUVDO0lBQy9DLElBQUlKLFNBQVNDLFFBQVEsQ0FBQyxjQUNsQkQsV0FBV0EsU0FBU0UsT0FBTyxDQUFDLGFBQWFKLFNBQVNJLE9BQU8sQ0FBQyxlQUFlO0lBQzdFRixXQUFXQSxTQUFTRSxPQUFPLENBQUMsU0FBUztJQUNyQyxPQUFPRjtBQUNYLEVBQ0EsZ0RBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmVnZ2FyLS8uL25vZGVfbW9kdWxlcy9mcm9nL19saWIvdXRpbHMvcGFyc2VCcm93c2VyTG9jYXRpb24uanM/OGUyNiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcGFyc2VCcm93c2VyTG9jYXRpb24oYywgbG9jYXRpb25fLCB7IGJhc2VQYXRoLCBwYXRoIH0pIHtcbiAgICBsZXQgbG9jYXRpb24gPSBsb2NhdGlvbl8gfHwgJyc7XG4gICAgaWYgKGxvY2F0aW9uPy5pbmNsdWRlcygnOnBhdGgnKSAmJiAhcGF0aC5pbmNsdWRlcygnOnBhdGgnKSlcbiAgICAgICAgbG9jYXRpb24gPSBsb2NhdGlvbi5yZXBsYWNlKCc6cGF0aCcsIHBhdGgucmVwbGFjZSgvKF5cXC8pfChcXC8kKS8sICcnKSk7XG4gICAgZWxzZSBpZiAobG9jYXRpb24/LmluY2x1ZGVzKCc6JykpXG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGMucmVxLnBhcmFtKCkpKVxuICAgICAgICAgICAgbG9jYXRpb24gPSBsb2NhdGlvbi5yZXBsYWNlKGA6JHtrZXl9YCwgdmFsdWUpO1xuICAgIGlmIChsb2NhdGlvbi5pbmNsdWRlcygnOmJhc2VQYXRoJykpXG4gICAgICAgIGxvY2F0aW9uID0gbG9jYXRpb24ucmVwbGFjZSgnOmJhc2VQYXRoJywgYmFzZVBhdGgucmVwbGFjZSgvKF5cXC8pfChcXC8kKS8sICcnKSk7XG4gICAgbG9jYXRpb24gPSBsb2NhdGlvbi5yZXBsYWNlKC9eXFwvXFwvLywgJy8nKTtcbiAgICByZXR1cm4gbG9jYXRpb247XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZUJyb3dzZXJMb2NhdGlvbi5qcy5tYXAiXSwibmFtZXMiOlsicGFyc2VCcm93c2VyTG9jYXRpb24iLCJjIiwibG9jYXRpb25fIiwiYmFzZVBhdGgiLCJwYXRoIiwibG9jYXRpb24iLCJpbmNsdWRlcyIsInJlcGxhY2UiLCJrZXkiLCJ2YWx1ZSIsIk9iamVjdCIsImVudHJpZXMiLCJyZXEiLCJwYXJhbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/utils/parseBrowserLocation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/utils/parseFonts.js":
/*!****************************************************!*\
  !*** ./node_modules/frog/_lib/utils/parseFonts.js ***!
  \****************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseFonts: () => (/* binding */ parseFonts)\n/* harmony export */ });\n/* harmony import */ var hono_og__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hono-og */ \"(rsc)/./node_modules/hono-og/lib/utils/loadGoogleFont.js\");\n\nasync function parseFonts(fonts) {\n    if (!fonts) return undefined;\n    return await Promise.all(fonts.map(async (font)=>{\n        if (font.source === \"google\") return {\n            ...font,\n            data: await (0,hono_og__WEBPACK_IMPORTED_MODULE_0__.loadGoogleFont)({\n                family: font.name,\n                weight: font.weight,\n                style: font.style\n            })\n        };\n        return font;\n    }));\n} //# sourceMappingURL=parseFonts.js.map\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL3BhcnNlRm9udHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXlDO0FBQ2xDLGVBQWVDLFdBQVdDLEtBQUs7SUFDbEMsSUFBSSxDQUFDQSxPQUNELE9BQU9DO0lBQ1gsT0FBTyxNQUFNQyxRQUFRQyxHQUFHLENBQUNILE1BQU1JLEdBQUcsQ0FBQyxPQUFPQztRQUN0QyxJQUFJQSxLQUFLQyxNQUFNLEtBQUssVUFDaEIsT0FBTztZQUNILEdBQUdELElBQUk7WUFDUEUsTUFBTSxNQUFNVCx1REFBY0EsQ0FBQztnQkFDdkJVLFFBQVFILEtBQUtJLElBQUk7Z0JBQ2pCQyxRQUFRTCxLQUFLSyxNQUFNO2dCQUNuQkMsT0FBT04sS0FBS00sS0FBSztZQUNyQjtRQUNKO1FBQ0osT0FBT047SUFDWDtBQUNKLEVBQ0Esc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmVnZ2FyLS8uL25vZGVfbW9kdWxlcy9mcm9nL19saWIvdXRpbHMvcGFyc2VGb250cy5qcz8zZjFkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxvYWRHb29nbGVGb250IH0gZnJvbSAnaG9uby1vZyc7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcGFyc2VGb250cyhmb250cykge1xuICAgIGlmICghZm9udHMpXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIGF3YWl0IFByb21pc2UuYWxsKGZvbnRzLm1hcChhc3luYyAoZm9udCkgPT4ge1xuICAgICAgICBpZiAoZm9udC5zb3VyY2UgPT09ICdnb29nbGUnKVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5mb250LFxuICAgICAgICAgICAgICAgIGRhdGE6IGF3YWl0IGxvYWRHb29nbGVGb250KHtcbiAgICAgICAgICAgICAgICAgICAgZmFtaWx5OiBmb250Lm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHdlaWdodDogZm9udC53ZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiBmb250LnN0eWxlLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGZvbnQ7XG4gICAgfSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFyc2VGb250cy5qcy5tYXAiXSwibmFtZXMiOlsibG9hZEdvb2dsZUZvbnQiLCJwYXJzZUZvbnRzIiwiZm9udHMiLCJ1bmRlZmluZWQiLCJQcm9taXNlIiwiYWxsIiwibWFwIiwiZm9udCIsInNvdXJjZSIsImRhdGEiLCJmYW1pbHkiLCJuYW1lIiwid2VpZ2h0Iiwic3R5bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/utils/parseFonts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/utils/parseHonoPath.js":
/*!*******************************************************!*\
  !*** ./node_modules/frog/_lib/utils/parseHonoPath.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseHonoPath: () => (/* binding */ parseHonoPath)\n/* harmony export */ });\nfunction parseHonoPath(path) {\n    if (path.endsWith(\"/\")) return path.slice(0, -1);\n    return path;\n} //# sourceMappingURL=parseHonoPath.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL3BhcnNlSG9ub1BhdGguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLGNBQWNDLElBQUk7SUFDOUIsSUFBSUEsS0FBS0MsUUFBUSxDQUFDLE1BQ2QsT0FBT0QsS0FBS0UsS0FBSyxDQUFDLEdBQUcsQ0FBQztJQUMxQixPQUFPRjtBQUNYLEVBQ0EseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmVnZ2FyLS8uL25vZGVfbW9kdWxlcy9mcm9nL19saWIvdXRpbHMvcGFyc2VIb25vUGF0aC5qcz82Nzk2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBwYXJzZUhvbm9QYXRoKHBhdGgpIHtcbiAgICBpZiAocGF0aC5lbmRzV2l0aCgnLycpKVxuICAgICAgICByZXR1cm4gcGF0aC5zbGljZSgwLCAtMSk7XG4gICAgcmV0dXJuIHBhdGg7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZUhvbm9QYXRoLmpzLm1hcCJdLCJuYW1lcyI6WyJwYXJzZUhvbm9QYXRoIiwicGF0aCIsImVuZHNXaXRoIiwic2xpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/utils/parseHonoPath.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/utils/parseImage.js":
/*!****************************************************!*\
  !*** ./node_modules/frog/_lib/utils/parseImage.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseImage: () => (/* binding */ parseImage)\n/* harmony export */ });\n/* harmony import */ var _parsePath_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parsePath.js */ \"(rsc)/./node_modules/frog/_lib/utils/parsePath.js\");\n\nasync function parseImage(node_, options) {\n    const { assetsUrl, ui } = options;\n    if (typeof node_ !== \"object\") return node_;\n    if (Array.isArray(node_)) return await Promise.all(node_.map(async (e)=>await parseImage(e, {\n            assetsUrl,\n            ui\n        })));\n    if (node_ instanceof Promise) return await node_;\n    let node = node_;\n    const direction = node.tag?.direction ?? options.ui.direction ?? (node.props.flexDirection ? node.props.flexDirection === \"column\" ? \"horizontal\" : \"vertical\" : undefined);\n    if (typeof node.tag === \"function\") {\n        node = await node.tag({\n            ...node.props,\n            __context: {\n                direction,\n                vars: {\n                    ...node.props?.__context?.vars,\n                    ...ui?.vars\n                }\n            },\n            children: node.children\n        });\n        node.props.__context = undefined;\n        node = await parseImage(node, {\n            assetsUrl,\n            ui: {\n                ...ui,\n                direction\n            }\n        });\n    }\n    if (node.children) node.children = await Promise.all(node.children.map(async (e)=>await parseImage(e, {\n            assetsUrl,\n            ui: {\n                ...ui,\n                direction\n            }\n        })));\n    if (node.tag === \"img\") {\n        const src = node.props.src;\n        if (src.startsWith(\"/\")) node.props.src = `${assetsUrl + (0,_parsePath_js__WEBPACK_IMPORTED_MODULE_0__.parsePath)(src)}`;\n    }\n    return node;\n} //# sourceMappingURL=parseImage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL3BhcnNlSW1hZ2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMkM7QUFDcEMsZUFBZUMsV0FBV0MsS0FBSyxFQUFFQyxPQUFPO0lBQzNDLE1BQU0sRUFBRUMsU0FBUyxFQUFFQyxFQUFFLEVBQUUsR0FBR0Y7SUFDMUIsSUFBSSxPQUFPRCxVQUFVLFVBQ2pCLE9BQU9BO0lBQ1gsSUFBSUksTUFBTUMsT0FBTyxDQUFDTCxRQUNkLE9BQVEsTUFBTU0sUUFBUUMsR0FBRyxDQUFDUCxNQUFNUSxHQUFHLENBQUMsT0FBT0MsSUFBTSxNQUFNVixXQUFXVSxHQUFHO1lBQUVQO1lBQVdDO1FBQUc7SUFDekYsSUFBSUgsaUJBQWlCTSxTQUNqQixPQUFPLE1BQU1OO0lBQ2pCLElBQUlVLE9BQU9WO0lBQ1gsTUFBTVcsWUFBWUQsS0FBS0UsR0FBRyxFQUFFRCxhQUN4QlYsUUFBUUUsRUFBRSxDQUFDUSxTQUFTLElBQ25CRCxDQUFBQSxLQUFLRyxLQUFLLENBQUNDLGFBQWEsR0FDbkJKLEtBQUtHLEtBQUssQ0FBQ0MsYUFBYSxLQUFLLFdBQ3pCLGVBQ0EsYUFDSkMsU0FBUTtJQUNsQixJQUFJLE9BQU9MLEtBQUtFLEdBQUcsS0FBSyxZQUFZO1FBQ2hDRixPQUFPLE1BQU1BLEtBQUtFLEdBQUcsQ0FBQztZQUNsQixHQUFHRixLQUFLRyxLQUFLO1lBQ2JHLFdBQVc7Z0JBQ1BMO2dCQUNBTSxNQUFNO29CQUFFLEdBQUdQLEtBQUtHLEtBQUssRUFBRUcsV0FBV0MsSUFBSTtvQkFBRSxHQUFHZCxJQUFJYyxJQUFJO2dCQUFDO1lBQ3hEO1lBQ0FDLFVBQVVSLEtBQUtRLFFBQVE7UUFDM0I7UUFDQVIsS0FBS0csS0FBSyxDQUFDRyxTQUFTLEdBQUdEO1FBQ3ZCTCxPQUFRLE1BQU1YLFdBQVdXLE1BQU07WUFDM0JSO1lBQ0FDLElBQUk7Z0JBQUUsR0FBR0EsRUFBRTtnQkFBRVE7WUFBVTtRQUMzQjtJQUNKO0lBQ0EsSUFBSUQsS0FBS1EsUUFBUSxFQUNiUixLQUFLUSxRQUFRLEdBQUcsTUFBTVosUUFBUUMsR0FBRyxDQUFDRyxLQUFLUSxRQUFRLENBQUNWLEdBQUcsQ0FBQyxPQUFPQyxJQUFNLE1BQU1WLFdBQVdVLEdBQUc7WUFBRVA7WUFBV0MsSUFBSTtnQkFBRSxHQUFHQSxFQUFFO2dCQUFFUTtZQUFVO1FBQUU7SUFDL0gsSUFBSUQsS0FBS0UsR0FBRyxLQUFLLE9BQU87UUFDcEIsTUFBTU8sTUFBTVQsS0FBS0csS0FBSyxDQUFDTSxHQUFHO1FBQzFCLElBQUlBLElBQUlDLFVBQVUsQ0FBQyxNQUNmVixLQUFLRyxLQUFLLENBQUNNLEdBQUcsR0FBRyxDQUFDLEVBQUVqQixZQUFZSix3REFBU0EsQ0FBQ3FCLEtBQUssQ0FBQztJQUN4RDtJQUNBLE9BQU9UO0FBQ1gsRUFDQSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZWdnYXItLy4vbm9kZV9tb2R1bGVzL2Zyb2cvX2xpYi91dGlscy9wYXJzZUltYWdlLmpzPzE5MjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2VQYXRoIH0gZnJvbSAnLi9wYXJzZVBhdGguanMnO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHBhcnNlSW1hZ2Uobm9kZV8sIG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IGFzc2V0c1VybCwgdWkgfSA9IG9wdGlvbnM7XG4gICAgaWYgKHR5cGVvZiBub2RlXyAhPT0gJ29iamVjdCcpXG4gICAgICAgIHJldHVybiBub2RlXztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShub2RlXykpXG4gICAgICAgIHJldHVybiAoYXdhaXQgUHJvbWlzZS5hbGwobm9kZV8ubWFwKGFzeW5jIChlKSA9PiBhd2FpdCBwYXJzZUltYWdlKGUsIHsgYXNzZXRzVXJsLCB1aSB9KSkpKTtcbiAgICBpZiAobm9kZV8gaW5zdGFuY2VvZiBQcm9taXNlKVxuICAgICAgICByZXR1cm4gYXdhaXQgbm9kZV87XG4gICAgbGV0IG5vZGUgPSBub2RlXztcbiAgICBjb25zdCBkaXJlY3Rpb24gPSBub2RlLnRhZz8uZGlyZWN0aW9uID8/XG4gICAgICAgIG9wdGlvbnMudWkuZGlyZWN0aW9uID8/XG4gICAgICAgIChub2RlLnByb3BzLmZsZXhEaXJlY3Rpb25cbiAgICAgICAgICAgID8gbm9kZS5wcm9wcy5mbGV4RGlyZWN0aW9uID09PSAnY29sdW1uJ1xuICAgICAgICAgICAgICAgID8gJ2hvcml6b250YWwnXG4gICAgICAgICAgICAgICAgOiAndmVydGljYWwnXG4gICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgaWYgKHR5cGVvZiBub2RlLnRhZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBub2RlID0gYXdhaXQgbm9kZS50YWcoe1xuICAgICAgICAgICAgLi4ubm9kZS5wcm9wcyxcbiAgICAgICAgICAgIF9fY29udGV4dDoge1xuICAgICAgICAgICAgICAgIGRpcmVjdGlvbixcbiAgICAgICAgICAgICAgICB2YXJzOiB7IC4uLm5vZGUucHJvcHM/Ll9fY29udGV4dD8udmFycywgLi4udWk/LnZhcnMgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGlsZHJlbjogbm9kZS5jaGlsZHJlbixcbiAgICAgICAgfSk7XG4gICAgICAgIG5vZGUucHJvcHMuX19jb250ZXh0ID0gdW5kZWZpbmVkO1xuICAgICAgICBub2RlID0gKGF3YWl0IHBhcnNlSW1hZ2Uobm9kZSwge1xuICAgICAgICAgICAgYXNzZXRzVXJsLFxuICAgICAgICAgICAgdWk6IHsgLi4udWksIGRpcmVjdGlvbiB9LFxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGlmIChub2RlLmNoaWxkcmVuKVxuICAgICAgICBub2RlLmNoaWxkcmVuID0gYXdhaXQgUHJvbWlzZS5hbGwobm9kZS5jaGlsZHJlbi5tYXAoYXN5bmMgKGUpID0+IGF3YWl0IHBhcnNlSW1hZ2UoZSwgeyBhc3NldHNVcmwsIHVpOiB7IC4uLnVpLCBkaXJlY3Rpb24gfSB9KSkpO1xuICAgIGlmIChub2RlLnRhZyA9PT0gJ2ltZycpIHtcbiAgICAgICAgY29uc3Qgc3JjID0gbm9kZS5wcm9wcy5zcmM7XG4gICAgICAgIGlmIChzcmMuc3RhcnRzV2l0aCgnLycpKVxuICAgICAgICAgICAgbm9kZS5wcm9wcy5zcmMgPSBgJHthc3NldHNVcmwgKyBwYXJzZVBhdGgoc3JjKX1gO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlSW1hZ2UuanMubWFwIl0sIm5hbWVzIjpbInBhcnNlUGF0aCIsInBhcnNlSW1hZ2UiLCJub2RlXyIsIm9wdGlvbnMiLCJhc3NldHNVcmwiLCJ1aSIsIkFycmF5IiwiaXNBcnJheSIsIlByb21pc2UiLCJhbGwiLCJtYXAiLCJlIiwibm9kZSIsImRpcmVjdGlvbiIsInRhZyIsInByb3BzIiwiZmxleERpcmVjdGlvbiIsInVuZGVmaW5lZCIsIl9fY29udGV4dCIsInZhcnMiLCJjaGlsZHJlbiIsInNyYyIsInN0YXJ0c1dpdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/utils/parseImage.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/utils/parseIntents.js":
/*!******************************************************!*\
  !*** ./node_modules/frog/_lib/utils/parseIntents.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseIntents: () => (/* binding */ parseIntents)\n/* harmony export */ });\n/* harmony import */ var hono_jsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hono/jsx */ \"(rsc)/./node_modules/hono/dist/jsx/index.js\");\n/* harmony import */ var _components_Button_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/Button.js */ \"(rsc)/./node_modules/frog/_lib/components/Button.js\");\n/* harmony import */ var _parsePath_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parsePath.js */ \"(rsc)/./node_modules/frog/_lib/utils/parsePath.js\");\n\n\n\n\nfunction parseIntents(intents_, options = {}, counter = {\n    button: 1\n}) {\n    if (!intents_) return [];\n    const nodes = intents_;\n    const intents = (()=>{\n        if (Array.isArray(nodes)) return nodes.map((e)=>parseIntent(e, options, counter));\n        if (typeof nodes.children[0] === \"object\") return Object.assign(nodes, {\n            children: nodes.children.map((e)=>parseIntent(e, options, counter))\n        });\n        return parseIntent(nodes, options, counter);\n    })();\n    return (Array.isArray(intents) ? intents : [\n        intents\n    ]).flat();\n}\nfunction parseIntent(node_, options, counter) {\n    // Check if the node is a \"falsy\" node (ie. `null`, `undefined`, `false`, etc).\n    const node = !node_ ? {\n        children: [],\n        props: {},\n        tag () {}\n    } : node_;\n    const props = (()=>{\n        if (node.tag.__type === \"button\") {\n            const value = node.tag({})?.[0]?.props?.[\"data-value\"];\n            const buttonProps = {\n                ...node.props,\n                action: node.props.action ? node.props.action.startsWith(\"http\") ? node.props.action : (0,_parsePath_js__WEBPACK_IMPORTED_MODULE_1__.parsePath)(options.baseUrl + node.props.action) + (options.search && !value?.startsWith(_components_Button_js__WEBPACK_IMPORTED_MODULE_2__.buttonPrefix.addCastAction) ? `?${options.search}` : \"\") : undefined,\n                children: node.children,\n                index: counter.button++\n            };\n            if (value?.startsWith(_components_Button_js__WEBPACK_IMPORTED_MODULE_2__.buttonPrefix.transaction) && node.props.target) {\n                const search = (node.props.target ?? \"\").split(\"?\")[1];\n                buttonProps.target = node.props.target?.startsWith(\"http\") ? node.props.target : (0,_parsePath_js__WEBPACK_IMPORTED_MODULE_1__.parsePath)(options.baseUrl + node.props.target) + (search ? `?${search}` : \"\");\n            }\n            return buttonProps;\n        }\n        if (node.tag.__type === \"text-input\") return {\n            ...node.props,\n            children: node.children\n        };\n        return {};\n    })();\n    const intent = typeof node.tag === \"function\" ? node.tag(props) : node;\n    if (intent?.tag === \"\" && Object.keys(intent.props).length === 0) throw new InvalidIntentComponentError();\n    if (typeof intent?.tag === \"function\" && typeof node.tag === \"function\") {\n        if (intent.children.length > 1) throw new InvalidIntentComponentError();\n        return parseIntent(node.tag(node.props), options, counter);\n    }\n    return intent;\n}\nclass InvalidIntentComponentError extends Error {\n    constructor(){\n        super([\n            \"Intent components must return a single intent element.\",\n            \"\",\n            \"Example:\",\n            \"\",\n            \"```\",\n            \"import { Button } from 'frog'\",\n            \"\",\n            \"function CustomIntent() {\",\n            \"  return <Button>Foo</Button>\",\n            \"}\",\n            \"```\"\n        ].join(\"\\n\"));\n    }\n} //# sourceMappingURL=parseIntents.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/utils/parseIntents.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/utils/parsePath.js":
/*!***************************************************!*\
  !*** ./node_modules/frog/_lib/utils/parsePath.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parsePath: () => (/* binding */ parsePath)\n/* harmony export */ });\nfunction parsePath(path_) {\n    let path = path_.split(\"?\")[0];\n    if (path.endsWith(\"/\")) path = path.slice(0, -1);\n    return path;\n} //# sourceMappingURL=parsePath.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL3BhcnNlUGF0aC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EsVUFBVUMsS0FBSztJQUMzQixJQUFJQyxPQUFPRCxNQUFNRSxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7SUFDOUIsSUFBSUQsS0FBS0UsUUFBUSxDQUFDLE1BQ2RGLE9BQU9BLEtBQUtHLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFDMUIsT0FBT0g7QUFDWCxFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2JlZ2dhci0vLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL3BhcnNlUGF0aC5qcz8xMDg1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBwYXJzZVBhdGgocGF0aF8pIHtcbiAgICBsZXQgcGF0aCA9IHBhdGhfLnNwbGl0KCc/JylbMF07XG4gICAgaWYgKHBhdGguZW5kc1dpdGgoJy8nKSlcbiAgICAgICAgcGF0aCA9IHBhdGguc2xpY2UoMCwgLTEpO1xuICAgIHJldHVybiBwYXRoO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFyc2VQYXRoLmpzLm1hcCJdLCJuYW1lcyI6WyJwYXJzZVBhdGgiLCJwYXRoXyIsInBhdGgiLCJzcGxpdCIsImVuZHNXaXRoIiwic2xpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/utils/parsePath.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/utils/requestBodyToContext.js":
/*!**************************************************************!*\
  !*** ./node_modules/frog/_lib/utils/requestBodyToContext.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   requestBodyToContext: () => (/* binding */ requestBodyToContext)\n/* harmony export */ });\n/* harmony import */ var hono__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hono */ \"(rsc)/./node_modules/hono/dist/index.js\");\n/* harmony import */ var _deserializeJson_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deserializeJson.js */ \"(rsc)/./node_modules/frog/_lib/utils/deserializeJson.js\");\n/* harmony import */ var _fromQuery_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fromQuery.js */ \"(rsc)/./node_modules/frog/_lib/utils/fromQuery.js\");\n/* harmony import */ var _getRequestUrl_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getRequestUrl.js */ \"(rsc)/./node_modules/frog/_lib/utils/getRequestUrl.js\");\n/* harmony import */ var _jws_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jws.js */ \"(rsc)/./node_modules/frog/_lib/utils/jws.js\");\n/* harmony import */ var _verifyFrame_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./verifyFrame.js */ \"(rsc)/./node_modules/frog/_lib/utils/verifyFrame.js\");\n\n\n\n\n\n\nasync function requestBodyToContext(c, { hub, secret, verify = true }) {\n    const { trustedData, untrustedData } = await c.req.json().catch(()=>{}) || {};\n    const { initialPath, previousState, previousButtonValues } = await (async ()=>{\n        if (untrustedData?.state) {\n            const state = (0,_deserializeJson_js__WEBPACK_IMPORTED_MODULE_1__.deserializeJson)(untrustedData.state);\n            if (secret && state.previousState) state.previousState = JSON.parse(await _jws_js__WEBPACK_IMPORTED_MODULE_2__.verify(state.previousState, secret));\n            return state;\n        }\n        if (c.req.query()) return (0,_fromQuery_js__WEBPACK_IMPORTED_MODULE_3__.fromQuery)(c.req.query());\n        return {};\n    })();\n    const url = (0,_getRequestUrl_js__WEBPACK_IMPORTED_MODULE_4__.getRequestUrl)(c.req);\n    const trustedFrameData = await (async ()=>{\n        if (verify === false) return null;\n        if (!trustedData) return null;\n        if (!hub) return null;\n        try {\n            const { frameData } = await (0,_verifyFrame_js__WEBPACK_IMPORTED_MODULE_5__.verifyFrame)({\n                hub,\n                frameUrl: untrustedData.url,\n                trustedData,\n                url: url.href\n            });\n            return {\n                ...frameData,\n                state: frameData.state || untrustedData.state\n            };\n        } catch (err) {\n            if (verify === \"silent\") return null;\n            throw err;\n        }\n    })();\n    return {\n        env: c.env,\n        initialPath: initialPath ? initialPath : url.pathname,\n        previousState,\n        previousButtonValues,\n        frameData: trustedFrameData || untrustedData,\n        req: c.req,\n        status: c.req.method === \"POST\" ? \"response\" : \"initial\",\n        url: url.href,\n        var: c.var,\n        verified: Boolean(trustedFrameData)\n    };\n} //# sourceMappingURL=requestBodyToContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL3JlcXVlc3RCb2R5VG9Db250ZXh0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBc0I7QUFDaUM7QUFDWjtBQUNRO0FBQ25CO0FBQ2U7QUFDeEMsZUFBZUsscUJBQXFCQyxDQUFDLEVBQUUsRUFBRUMsR0FBRyxFQUFFQyxNQUFNLEVBQUVDLFNBQVMsSUFBSSxFQUFFO0lBQ3hFLE1BQU0sRUFBRUMsV0FBVyxFQUFFQyxhQUFhLEVBQUUsR0FBRyxNQUFPTCxFQUFFTSxHQUFHLENBQUNDLElBQUksR0FBR0MsS0FBSyxDQUFDLEtBQVEsTUFBTyxDQUFDO0lBQ2pGLE1BQU0sRUFBRUMsV0FBVyxFQUFFQyxhQUFhLEVBQUVDLG9CQUFvQixFQUFFLEdBQUcsTUFBTSxDQUFDO1FBQ2hFLElBQUlOLGVBQWVPLE9BQU87WUFDdEIsTUFBTUEsUUFBUWxCLG9FQUFlQSxDQUFDVyxjQUFjTyxLQUFLO1lBQ2pELElBQUlWLFVBQVVVLE1BQU1GLGFBQWEsRUFDN0JFLE1BQU1GLGFBQWEsR0FBR0csS0FBS0MsS0FBSyxDQUFDLE1BQU1qQiwyQ0FBVSxDQUFDZSxNQUFNRixhQUFhLEVBQUVSO1lBQzNFLE9BQU9VO1FBQ1g7UUFDQSxJQUFJWixFQUFFTSxHQUFHLENBQUNTLEtBQUssSUFDWCxPQUFPcEIsd0RBQVNBLENBQUNLLEVBQUVNLEdBQUcsQ0FBQ1MsS0FBSztRQUNoQyxPQUFPLENBQUM7SUFDWjtJQUNBLE1BQU1DLE1BQU1wQixnRUFBYUEsQ0FBQ0ksRUFBRU0sR0FBRztJQUMvQixNQUFNVyxtQkFBbUIsTUFBTSxDQUFDO1FBQzVCLElBQUlkLFdBQVcsT0FDWCxPQUFPO1FBQ1gsSUFBSSxDQUFDQyxhQUNELE9BQU87UUFDWCxJQUFJLENBQUNILEtBQ0QsT0FBTztRQUNYLElBQUk7WUFDQSxNQUFNLEVBQUVpQixTQUFTLEVBQUUsR0FBRyxNQUFNcEIsNERBQVdBLENBQUM7Z0JBQ3BDRztnQkFDQWtCLFVBQVVkLGNBQWNXLEdBQUc7Z0JBQzNCWjtnQkFDQVksS0FBS0EsSUFBSUksSUFBSTtZQUNqQjtZQUNBLE9BQU87Z0JBQUUsR0FBR0YsU0FBUztnQkFBRU4sT0FBT00sVUFBVU4sS0FBSyxJQUFJUCxjQUFjTyxLQUFLO1lBQUM7UUFDekUsRUFDQSxPQUFPUyxLQUFLO1lBQ1IsSUFBSWxCLFdBQVcsVUFDWCxPQUFPO1lBQ1gsTUFBTWtCO1FBQ1Y7SUFDSjtJQUNBLE9BQU87UUFDSEMsS0FBS3RCLEVBQUVzQixHQUFHO1FBQ1ZiLGFBQWFBLGNBQWNBLGNBQWNPLElBQUlPLFFBQVE7UUFDckRiO1FBQ0FDO1FBQ0FPLFdBQVdELG9CQUFvQlo7UUFDL0JDLEtBQUtOLEVBQUVNLEdBQUc7UUFDVmtCLFFBQVF4QixFQUFFTSxHQUFHLENBQUNtQixNQUFNLEtBQUssU0FBUyxhQUFhO1FBQy9DVCxLQUFLQSxJQUFJSSxJQUFJO1FBQ2JNLEtBQUsxQixFQUFFMEIsR0FBRztRQUNWQyxVQUFVQyxRQUFRWDtJQUN0QjtBQUNKLEVBQ0EsZ0RBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmVnZ2FyLS8uL25vZGVfbW9kdWxlcy9mcm9nL19saWIvdXRpbHMvcmVxdWVzdEJvZHlUb0NvbnRleHQuanM/YmQwOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge30gZnJvbSAnaG9ubyc7XG5pbXBvcnQgeyBkZXNlcmlhbGl6ZUpzb24gfSBmcm9tICcuL2Rlc2VyaWFsaXplSnNvbi5qcyc7XG5pbXBvcnQgeyBmcm9tUXVlcnkgfSBmcm9tICcuL2Zyb21RdWVyeS5qcyc7XG5pbXBvcnQgeyBnZXRSZXF1ZXN0VXJsIH0gZnJvbSAnLi9nZXRSZXF1ZXN0VXJsLmpzJztcbmltcG9ydCAqIGFzIGp3cyBmcm9tICcuL2p3cy5qcyc7XG5pbXBvcnQgeyB2ZXJpZnlGcmFtZSB9IGZyb20gJy4vdmVyaWZ5RnJhbWUuanMnO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlcXVlc3RCb2R5VG9Db250ZXh0KGMsIHsgaHViLCBzZWNyZXQsIHZlcmlmeSA9IHRydWUgfSkge1xuICAgIGNvbnN0IHsgdHJ1c3RlZERhdGEsIHVudHJ1c3RlZERhdGEgfSA9IChhd2FpdCBjLnJlcS5qc29uKCkuY2F0Y2goKCkgPT4geyB9KSkgfHwge307XG4gICAgY29uc3QgeyBpbml0aWFsUGF0aCwgcHJldmlvdXNTdGF0ZSwgcHJldmlvdXNCdXR0b25WYWx1ZXMgfSA9IGF3YWl0IChhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmICh1bnRydXN0ZWREYXRhPy5zdGF0ZSkge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSBkZXNlcmlhbGl6ZUpzb24odW50cnVzdGVkRGF0YS5zdGF0ZSk7XG4gICAgICAgICAgICBpZiAoc2VjcmV0ICYmIHN0YXRlLnByZXZpb3VzU3RhdGUpXG4gICAgICAgICAgICAgICAgc3RhdGUucHJldmlvdXNTdGF0ZSA9IEpTT04ucGFyc2UoYXdhaXQgandzLnZlcmlmeShzdGF0ZS5wcmV2aW91c1N0YXRlLCBzZWNyZXQpKTtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYy5yZXEucXVlcnkoKSlcbiAgICAgICAgICAgIHJldHVybiBmcm9tUXVlcnkoYy5yZXEucXVlcnkoKSk7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9KSgpO1xuICAgIGNvbnN0IHVybCA9IGdldFJlcXVlc3RVcmwoYy5yZXEpO1xuICAgIGNvbnN0IHRydXN0ZWRGcmFtZURhdGEgPSBhd2FpdCAoYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZiAodmVyaWZ5ID09PSBmYWxzZSlcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBpZiAoIXRydXN0ZWREYXRhKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmICghaHViKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7IGZyYW1lRGF0YSB9ID0gYXdhaXQgdmVyaWZ5RnJhbWUoe1xuICAgICAgICAgICAgICAgIGh1YixcbiAgICAgICAgICAgICAgICBmcmFtZVVybDogdW50cnVzdGVkRGF0YS51cmwsXG4gICAgICAgICAgICAgICAgdHJ1c3RlZERhdGEsXG4gICAgICAgICAgICAgICAgdXJsOiB1cmwuaHJlZixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHsgLi4uZnJhbWVEYXRhLCBzdGF0ZTogZnJhbWVEYXRhLnN0YXRlIHx8IHVudHJ1c3RlZERhdGEuc3RhdGUgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAodmVyaWZ5ID09PSAnc2lsZW50JylcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH0pKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZW52OiBjLmVudixcbiAgICAgICAgaW5pdGlhbFBhdGg6IGluaXRpYWxQYXRoID8gaW5pdGlhbFBhdGggOiB1cmwucGF0aG5hbWUsXG4gICAgICAgIHByZXZpb3VzU3RhdGUsXG4gICAgICAgIHByZXZpb3VzQnV0dG9uVmFsdWVzLFxuICAgICAgICBmcmFtZURhdGE6IHRydXN0ZWRGcmFtZURhdGEgfHwgdW50cnVzdGVkRGF0YSxcbiAgICAgICAgcmVxOiBjLnJlcSxcbiAgICAgICAgc3RhdHVzOiBjLnJlcS5tZXRob2QgPT09ICdQT1NUJyA/ICdyZXNwb25zZScgOiAnaW5pdGlhbCcsXG4gICAgICAgIHVybDogdXJsLmhyZWYsXG4gICAgICAgIHZhcjogYy52YXIsXG4gICAgICAgIHZlcmlmaWVkOiBCb29sZWFuKHRydXN0ZWRGcmFtZURhdGEpLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXF1ZXN0Qm9keVRvQ29udGV4dC5qcy5tYXAiXSwibmFtZXMiOlsiZGVzZXJpYWxpemVKc29uIiwiZnJvbVF1ZXJ5IiwiZ2V0UmVxdWVzdFVybCIsImp3cyIsInZlcmlmeUZyYW1lIiwicmVxdWVzdEJvZHlUb0NvbnRleHQiLCJjIiwiaHViIiwic2VjcmV0IiwidmVyaWZ5IiwidHJ1c3RlZERhdGEiLCJ1bnRydXN0ZWREYXRhIiwicmVxIiwianNvbiIsImNhdGNoIiwiaW5pdGlhbFBhdGgiLCJwcmV2aW91c1N0YXRlIiwicHJldmlvdXNCdXR0b25WYWx1ZXMiLCJzdGF0ZSIsIkpTT04iLCJwYXJzZSIsInF1ZXJ5IiwidXJsIiwidHJ1c3RlZEZyYW1lRGF0YSIsImZyYW1lRGF0YSIsImZyYW1lVXJsIiwiaHJlZiIsImVyciIsImVudiIsInBhdGhuYW1lIiwic3RhdHVzIiwibWV0aG9kIiwidmFyIiwidmVyaWZpZWQiLCJCb29sZWFuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/utils/requestBodyToContext.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/utils/serializeJson.js":
/*!*******************************************************!*\
  !*** ./node_modules/frog/_lib/utils/serializeJson.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   serializeJson: () => (/* binding */ serializeJson)\n/* harmony export */ });\nfunction serializeJson(data = {}) {\n    return encodeURIComponent(JSON.stringify(data));\n} //# sourceMappingURL=serializeJson.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL3NlcmlhbGl6ZUpzb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLGNBQWNDLE9BQU8sQ0FBQyxDQUFDO0lBQ25DLE9BQU9DLG1CQUFtQkMsS0FBS0MsU0FBUyxDQUFDSDtBQUM3QyxFQUNBLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2JlZ2dhci0vLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL3NlcmlhbGl6ZUpzb24uanM/YzNmMyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplSnNvbihkYXRhID0ge30pIHtcbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlcmlhbGl6ZUpzb24uanMubWFwIl0sIm5hbWVzIjpbInNlcmlhbGl6ZUpzb24iLCJkYXRhIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/utils/serializeJson.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/utils/toSearchParams.js":
/*!********************************************************!*\
  !*** ./node_modules/frog/_lib/utils/toSearchParams.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toSearchParams: () => (/* binding */ toSearchParams)\n/* harmony export */ });\n// If this changes, update in dev/components/Preview.tsx as well\nfunction toSearchParams(object) {\n    const params = new URLSearchParams();\n    for (const [key, value] of Object.entries(object)){\n        const encoded = (()=>{\n            if (typeof value === \"string\") return encodeURIComponent(value);\n            if (typeof value === \"number\") return value.toString();\n            if (typeof value === \"boolean\") return value.toString();\n            if (typeof value === \"object\" && value !== null) {\n                return encodeURIComponent(Array.isArray(value) ? `#A_${value.join(\",\")}` : `#O_${JSON.stringify(value)}`);\n            }\n            return undefined;\n        })();\n        if (encoded) params.set(key, encoded);\n    }\n    return params;\n} //# sourceMappingURL=toSearchParams.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL3RvU2VhcmNoUGFyYW1zLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxnRUFBZ0U7QUFDekQsU0FBU0EsZUFBZUMsTUFBTTtJQUNqQyxNQUFNQyxTQUFTLElBQUlDO0lBQ25CLEtBQUssTUFBTSxDQUFDQyxLQUFLQyxNQUFNLElBQUlDLE9BQU9DLE9BQU8sQ0FBQ04sUUFBUztRQUMvQyxNQUFNTyxVQUFVLENBQUM7WUFDYixJQUFJLE9BQU9ILFVBQVUsVUFDakIsT0FBT0ksbUJBQW1CSjtZQUM5QixJQUFJLE9BQU9BLFVBQVUsVUFDakIsT0FBT0EsTUFBTUssUUFBUTtZQUN6QixJQUFJLE9BQU9MLFVBQVUsV0FDakIsT0FBT0EsTUFBTUssUUFBUTtZQUN6QixJQUFJLE9BQU9MLFVBQVUsWUFBWUEsVUFBVSxNQUFNO2dCQUM3QyxPQUFPSSxtQkFBbUJFLE1BQU1DLE9BQU8sQ0FBQ1AsU0FDbEMsQ0FBQyxHQUFHLEVBQUVBLE1BQU1RLElBQUksQ0FBQyxLQUFLLENBQUMsR0FDdkIsQ0FBQyxHQUFHLEVBQUVDLEtBQUtDLFNBQVMsQ0FBQ1YsT0FBTyxDQUFDO1lBQ3ZDO1lBQ0EsT0FBT1c7UUFDWDtRQUNBLElBQUlSLFNBQ0FOLE9BQU9lLEdBQUcsQ0FBQ2IsS0FBS0k7SUFDeEI7SUFDQSxPQUFPTjtBQUNYLEVBQ0EsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmVnZ2FyLS8uL25vZGVfbW9kdWxlcy9mcm9nL19saWIvdXRpbHMvdG9TZWFyY2hQYXJhbXMuanM/ZDJlMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJZiB0aGlzIGNoYW5nZXMsIHVwZGF0ZSBpbiBkZXYvY29tcG9uZW50cy9QcmV2aWV3LnRzeCBhcyB3ZWxsXG5leHBvcnQgZnVuY3Rpb24gdG9TZWFyY2hQYXJhbXMob2JqZWN0KSB7XG4gICAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKG9iamVjdCkpIHtcbiAgICAgICAgY29uc3QgZW5jb2RlZCA9ICgoKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKVxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKVxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KEFycmF5LmlzQXJyYXkodmFsdWUpXG4gICAgICAgICAgICAgICAgICAgID8gYCNBXyR7dmFsdWUuam9pbignLCcpfWBcbiAgICAgICAgICAgICAgICAgICAgOiBgI09fJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9KSgpO1xuICAgICAgICBpZiAoZW5jb2RlZClcbiAgICAgICAgICAgIHBhcmFtcy5zZXQoa2V5LCBlbmNvZGVkKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcmFtcztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvU2VhcmNoUGFyYW1zLmpzLm1hcCJdLCJuYW1lcyI6WyJ0b1NlYXJjaFBhcmFtcyIsIm9iamVjdCIsInBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImtleSIsInZhbHVlIiwiT2JqZWN0IiwiZW50cmllcyIsImVuY29kZWQiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ0b1N0cmluZyIsIkFycmF5IiwiaXNBcnJheSIsImpvaW4iLCJKU09OIiwic3RyaW5naWZ5IiwidW5kZWZpbmVkIiwic2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/utils/toSearchParams.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/utils/verifyFrame.js":
/*!*****************************************************!*\
  !*** ./node_modules/frog/_lib/utils/verifyFrame.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   messageToFrameData: () => (/* binding */ messageToFrameData),\n/* harmony export */   verifyFrame: () => (/* binding */ verifyFrame)\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/utils/encoding/toBytes.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/utils/encoding/toHex.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem */ \"(rsc)/./node_modules/viem/_esm/utils/encoding/fromBytes.js\");\n/* harmony import */ var _protobufs_generated_message_pb_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../protobufs/generated/message_pb.js */ \"(rsc)/./node_modules/frog/_lib/protobufs/generated/message_pb.js\");\n\n\n\nasync function verifyFrame({ frameUrl, hub, trustedData, url }) {\n    const body = (0,viem__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(`0x${trustedData.messageBytes}`);\n    const response = await fetch(`${hub.apiUrl}/v1/validateMessage`, {\n        ...hub.fetchOptions,\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/octet-stream\",\n            ...hub.fetchOptions?.headers\n        },\n        body\n    }).then((res)=>res.json());\n    if (!response.valid) throw new Error(`message is invalid. ${response.details}`);\n    if (new URL(url).origin !== new URL(frameUrl).origin) throw new Error(`Invalid frame url: ${frameUrl}. Expected: ${url}.`);\n    const message = _protobufs_generated_message_pb_js__WEBPACK_IMPORTED_MODULE_1__.Message.fromBinary(body);\n    const frameData = messageToFrameData(message);\n    return {\n        frameData\n    };\n}\n////////////////////////////////////////////////////////////////////\n// Utilties\nfunction messageToFrameData(message) {\n    const frameActionBody = message.data?.body.value;\n    const frameData = {\n        address: frameActionBody.address ? (0,viem__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(frameActionBody.address) : undefined,\n        castId: {\n            fid: Number(frameActionBody.castId?.fid),\n            hash: (0,viem__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(frameActionBody.castId?.hash)\n        },\n        fid: Number(message.data?.fid),\n        messageHash: (0,viem__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(message.hash),\n        network: message.data?.network,\n        timestamp: message.data?.timestamp,\n        url: (0,viem__WEBPACK_IMPORTED_MODULE_3__.bytesToString)(frameActionBody.url),\n        buttonIndex: frameActionBody.buttonIndex,\n        inputText: (0,viem__WEBPACK_IMPORTED_MODULE_3__.bytesToString)(frameActionBody.inputText),\n        state: (0,viem__WEBPACK_IMPORTED_MODULE_3__.bytesToString)(frameActionBody.state),\n        transactionId: frameActionBody.transactionId ? (0,viem__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(frameActionBody.transactionId) : undefined\n    };\n    return frameData;\n} //# sourceMappingURL=verifyFrame.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3V0aWxzL3ZlcmlmeUZyYW1lLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUE2RDtBQUNtQjtBQUM3QztBQUM1QixlQUFlSyxZQUFZLEVBQUVDLFFBQVEsRUFBRUMsR0FBRyxFQUFFQyxXQUFXLEVBQUVDLEdBQUcsRUFBRztJQUNsRSxNQUFNQyxPQUFPUixnREFBVUEsQ0FBQyxDQUFDLEVBQUUsRUFBRU0sWUFBWUcsWUFBWSxDQUFDLENBQUM7SUFDdkQsTUFBTUMsV0FBVyxNQUFNQyxNQUFNLENBQUMsRUFBRU4sSUFBSU8sTUFBTSxDQUFDLG1CQUFtQixDQUFDLEVBQUU7UUFDN0QsR0FBR1AsSUFBSVEsWUFBWTtRQUNuQkMsUUFBUTtRQUNSQyxTQUFTO1lBQ0wsZ0JBQWdCO1lBQ2hCLEdBQUdWLElBQUlRLFlBQVksRUFBRUUsT0FBTztRQUNoQztRQUNBUDtJQUNKLEdBQUdRLElBQUksQ0FBQyxDQUFDQyxNQUFRQSxJQUFJQyxJQUFJO0lBQ3pCLElBQUksQ0FBQ1IsU0FBU1MsS0FBSyxFQUNmLE1BQU0sSUFBSUMsTUFBTSxDQUFDLG9CQUFvQixFQUFFVixTQUFTVyxPQUFPLENBQUMsQ0FBQztJQUM3RCxJQUFJLElBQUlDLElBQUlmLEtBQUtnQixNQUFNLEtBQUssSUFBSUQsSUFBSWxCLFVBQVVtQixNQUFNLEVBQ2hELE1BQU0sSUFBSUgsTUFBTSxDQUFDLG1CQUFtQixFQUFFaEIsU0FBUyxZQUFZLEVBQUVHLElBQUksQ0FBQyxDQUFDO0lBQ3ZFLE1BQU1pQixVQUFVdEIsdUVBQU9BLENBQUN1QixVQUFVLENBQUNqQjtJQUNuQyxNQUFNa0IsWUFBWUMsbUJBQW1CSDtJQUNyQyxPQUFPO1FBQUVFO0lBQVU7QUFDdkI7QUFDQSxvRUFBb0U7QUFDcEUsV0FBVztBQUNKLFNBQVNDLG1CQUFtQkgsT0FBTztJQUN0QyxNQUFNSSxrQkFBa0JKLFFBQVFLLElBQUksRUFBRXJCLEtBQUtzQjtJQUMzQyxNQUFNSixZQUFZO1FBQ2RLLFNBQVNILGdCQUFnQkcsT0FBTyxHQUMxQmpDLGdEQUFVQSxDQUFDOEIsZ0JBQWdCRyxPQUFPLElBQ2xDQztRQUNOQyxRQUFRO1lBQ0pDLEtBQUtDLE9BQU9QLGdCQUFnQkssTUFBTSxFQUFFQztZQUNwQ0UsTUFBTXRDLGdEQUFVQSxDQUFDOEIsZ0JBQWdCSyxNQUFNLEVBQUVHO1FBQzdDO1FBQ0FGLEtBQUtDLE9BQU9YLFFBQVFLLElBQUksRUFBRUs7UUFDMUJHLGFBQWF2QyxnREFBVUEsQ0FBQzBCLFFBQVFZLElBQUk7UUFDcENFLFNBQVNkLFFBQVFLLElBQUksRUFBRVM7UUFDdkJDLFdBQVdmLFFBQVFLLElBQUksRUFBRVU7UUFDekJoQyxLQUFLUixtREFBYUEsQ0FBQzZCLGdCQUFnQnJCLEdBQUc7UUFDdENpQyxhQUFhWixnQkFBZ0JZLFdBQVc7UUFDeENDLFdBQVcxQyxtREFBYUEsQ0FBQzZCLGdCQUFnQmEsU0FBUztRQUNsREMsT0FBTzNDLG1EQUFhQSxDQUFDNkIsZ0JBQWdCYyxLQUFLO1FBQzFDQyxlQUFlZixnQkFBZ0JlLGFBQWEsR0FDdEM3QyxnREFBVUEsQ0FBQzhCLGdCQUFnQmUsYUFBYSxJQUN4Q1g7SUFDVjtJQUNBLE9BQU9OO0FBQ1gsRUFDQSx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZWdnYXItLy4vbm9kZV9tb2R1bGVzL2Zyb2cvX2xpYi91dGlscy92ZXJpZnlGcmFtZS5qcz83ZTBiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJ5dGVzVG9IZXgsIGJ5dGVzVG9TdHJpbmcsIGhleFRvQnl0ZXMgfSBmcm9tICd2aWVtJztcbmltcG9ydCB7IEZyYW1lQWN0aW9uQm9keSwgTWVzc2FnZSB9IGZyb20gJy4uL3Byb3RvYnVmcy9nZW5lcmF0ZWQvbWVzc2FnZV9wYi5qcyc7XG5pbXBvcnQge30gZnJvbSAnLi4vdHlwZXMvZnJhbWUuanMnO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHZlcmlmeUZyYW1lKHsgZnJhbWVVcmwsIGh1YiwgdHJ1c3RlZERhdGEsIHVybCwgfSkge1xuICAgIGNvbnN0IGJvZHkgPSBoZXhUb0J5dGVzKGAweCR7dHJ1c3RlZERhdGEubWVzc2FnZUJ5dGVzfWApO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7aHViLmFwaVVybH0vdjEvdmFsaWRhdGVNZXNzYWdlYCwge1xuICAgICAgICAuLi5odWIuZmV0Y2hPcHRpb25zLFxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nLFxuICAgICAgICAgICAgLi4uaHViLmZldGNoT3B0aW9ucz8uaGVhZGVycyxcbiAgICAgICAgfSxcbiAgICAgICAgYm9keSxcbiAgICB9KS50aGVuKChyZXMpID0+IHJlcy5qc29uKCkpO1xuICAgIGlmICghcmVzcG9uc2UudmFsaWQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgbWVzc2FnZSBpcyBpbnZhbGlkLiAke3Jlc3BvbnNlLmRldGFpbHN9YCk7XG4gICAgaWYgKG5ldyBVUkwodXJsKS5vcmlnaW4gIT09IG5ldyBVUkwoZnJhbWVVcmwpLm9yaWdpbilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGZyYW1lIHVybDogJHtmcmFtZVVybH0uIEV4cGVjdGVkOiAke3VybH0uYCk7XG4gICAgY29uc3QgbWVzc2FnZSA9IE1lc3NhZ2UuZnJvbUJpbmFyeShib2R5KTtcbiAgICBjb25zdCBmcmFtZURhdGEgPSBtZXNzYWdlVG9GcmFtZURhdGEobWVzc2FnZSk7XG4gICAgcmV0dXJuIHsgZnJhbWVEYXRhIH07XG59XG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gVXRpbHRpZXNcbmV4cG9ydCBmdW5jdGlvbiBtZXNzYWdlVG9GcmFtZURhdGEobWVzc2FnZSkge1xuICAgIGNvbnN0IGZyYW1lQWN0aW9uQm9keSA9IG1lc3NhZ2UuZGF0YT8uYm9keS52YWx1ZTtcbiAgICBjb25zdCBmcmFtZURhdGEgPSB7XG4gICAgICAgIGFkZHJlc3M6IGZyYW1lQWN0aW9uQm9keS5hZGRyZXNzXG4gICAgICAgICAgICA/IGJ5dGVzVG9IZXgoZnJhbWVBY3Rpb25Cb2R5LmFkZHJlc3MpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgY2FzdElkOiB7XG4gICAgICAgICAgICBmaWQ6IE51bWJlcihmcmFtZUFjdGlvbkJvZHkuY2FzdElkPy5maWQpLFxuICAgICAgICAgICAgaGFzaDogYnl0ZXNUb0hleChmcmFtZUFjdGlvbkJvZHkuY2FzdElkPy5oYXNoKSxcbiAgICAgICAgfSxcbiAgICAgICAgZmlkOiBOdW1iZXIobWVzc2FnZS5kYXRhPy5maWQpLFxuICAgICAgICBtZXNzYWdlSGFzaDogYnl0ZXNUb0hleChtZXNzYWdlLmhhc2gpLFxuICAgICAgICBuZXR3b3JrOiBtZXNzYWdlLmRhdGE/Lm5ldHdvcmssXG4gICAgICAgIHRpbWVzdGFtcDogbWVzc2FnZS5kYXRhPy50aW1lc3RhbXAsXG4gICAgICAgIHVybDogYnl0ZXNUb1N0cmluZyhmcmFtZUFjdGlvbkJvZHkudXJsKSxcbiAgICAgICAgYnV0dG9uSW5kZXg6IGZyYW1lQWN0aW9uQm9keS5idXR0b25JbmRleCxcbiAgICAgICAgaW5wdXRUZXh0OiBieXRlc1RvU3RyaW5nKGZyYW1lQWN0aW9uQm9keS5pbnB1dFRleHQpLFxuICAgICAgICBzdGF0ZTogYnl0ZXNUb1N0cmluZyhmcmFtZUFjdGlvbkJvZHkuc3RhdGUpLFxuICAgICAgICB0cmFuc2FjdGlvbklkOiBmcmFtZUFjdGlvbkJvZHkudHJhbnNhY3Rpb25JZFxuICAgICAgICAgICAgPyBieXRlc1RvSGV4KGZyYW1lQWN0aW9uQm9keS50cmFuc2FjdGlvbklkKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgfTtcbiAgICByZXR1cm4gZnJhbWVEYXRhO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyaWZ5RnJhbWUuanMubWFwIl0sIm5hbWVzIjpbImJ5dGVzVG9IZXgiLCJieXRlc1RvU3RyaW5nIiwiaGV4VG9CeXRlcyIsIkZyYW1lQWN0aW9uQm9keSIsIk1lc3NhZ2UiLCJ2ZXJpZnlGcmFtZSIsImZyYW1lVXJsIiwiaHViIiwidHJ1c3RlZERhdGEiLCJ1cmwiLCJib2R5IiwibWVzc2FnZUJ5dGVzIiwicmVzcG9uc2UiLCJmZXRjaCIsImFwaVVybCIsImZldGNoT3B0aW9ucyIsIm1ldGhvZCIsImhlYWRlcnMiLCJ0aGVuIiwicmVzIiwianNvbiIsInZhbGlkIiwiRXJyb3IiLCJkZXRhaWxzIiwiVVJMIiwib3JpZ2luIiwibWVzc2FnZSIsImZyb21CaW5hcnkiLCJmcmFtZURhdGEiLCJtZXNzYWdlVG9GcmFtZURhdGEiLCJmcmFtZUFjdGlvbkJvZHkiLCJkYXRhIiwidmFsdWUiLCJhZGRyZXNzIiwidW5kZWZpbmVkIiwiY2FzdElkIiwiZmlkIiwiTnVtYmVyIiwiaGFzaCIsIm1lc3NhZ2VIYXNoIiwibmV0d29yayIsInRpbWVzdGFtcCIsImJ1dHRvbkluZGV4IiwiaW5wdXRUZXh0Iiwic3RhdGUiLCJ0cmFuc2FjdGlvbklkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/utils/verifyFrame.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/vercel/handle.js":
/*!*************************************************!*\
  !*** ./node_modules/frog/_lib/vercel/handle.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handle: () => (/* binding */ handle)\n/* harmony export */ });\n/* harmony import */ var hono_vercel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hono/vercel */ \"(rsc)/./node_modules/hono/dist/adapter/vercel/index.js\");\n\nfunction handle(app) {\n    return (0,hono_vercel__WEBPACK_IMPORTED_MODULE_0__.handle)(app.hono).bind(app.hono);\n} //# sourceMappingURL=handle.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3ZlcmNlbC9oYW5kbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0Q7QUFDN0MsU0FBU0EsT0FBT0UsR0FBRztJQUN0QixPQUFPRCxtREFBV0EsQ0FBQ0MsSUFBSUMsSUFBSSxFQUFFQyxJQUFJLENBQUNGLElBQUlDLElBQUk7QUFDOUMsRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZWdnYXItLy4vbm9kZV9tb2R1bGVzL2Zyb2cvX2xpYi92ZXJjZWwvaGFuZGxlLmpzPzIwYmEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaGFuZGxlIGFzIGhhbmRsZV9ob25vIH0gZnJvbSAnaG9uby92ZXJjZWwnO1xuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZShhcHApIHtcbiAgICByZXR1cm4gaGFuZGxlX2hvbm8oYXBwLmhvbm8pLmJpbmQoYXBwLmhvbm8pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGFuZGxlLmpzLm1hcCJdLCJuYW1lcyI6WyJoYW5kbGUiLCJoYW5kbGVfaG9ubyIsImFwcCIsImhvbm8iLCJiaW5kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/vercel/handle.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/_lib/version.js":
/*!*******************************************!*\
  !*** ./node_modules/frog/_lib/version.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\nconst version = \"0.8.6\"; //# sourceMappingURL=version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9fbGliL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLFVBQVUsUUFBUSxDQUMvQixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZWdnYXItLy4vbm9kZV9tb2R1bGVzL2Zyb2cvX2xpYi92ZXJzaW9uLmpzP2YyNWEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSAnMC44LjYnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOlsidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/_lib/version.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/curve.js":
/*!****************************************************************************!*\
  !*** ./node_modules/frog/node_modules/@noble/curves/esm/abstract/curve.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateBasic: () => (/* binding */ validateBasic),\n/* harmony export */   wNAF: () => (/* binding */ wNAF)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modular.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/utils.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // Abelian group utilities\n\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nfunction wNAF(c, bits) {\n    const constTimeNegate = (condition, item)=>{\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W)=>{\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return {\n            windows,\n            windowSize\n        };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder (elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while(n > _0n){\n                if (n & _1n) p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */ precomputeWindow (elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for(let window = 0; window < windows; window++){\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for(let i = 1; i < windowSize; i++){\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */ wNAF (W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for(let window = 0; window < windows; window++){\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                } else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return {\n                p,\n                f\n            };\n        },\n        wNAFCached (P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        }\n    };\n}\nfunction validateBasic(curve) {\n    (0,_modular_js__WEBPACK_IMPORTED_MODULE_0__.validateField)(curve.Fp);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject)(curve, {\n        n: \"bigint\",\n        h: \"bigint\",\n        Gx: \"field\",\n        Gy: \"field\"\n    }, {\n        nBitLength: \"isSafeInteger\",\n        nByteLength: \"isSafeInteger\"\n    });\n    // Set defaults\n    return Object.freeze({\n        ...(0,_modular_js__WEBPACK_IMPORTED_MODULE_0__.nLength)(curve.n, curve.nBitLength),\n        ...curve,\n        ...{\n            p: curve.Fp.ORDER\n        }\n    });\n} //# sourceMappingURL=curve.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/curve.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/edwards.js":
/*!******************************************************************************!*\
  !*** ./node_modules/frog/node_modules/@noble/curves/esm/abstract/edwards.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   twistedEdwards: () => (/* binding */ twistedEdwards)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modular.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/utils.js\");\n/* harmony import */ var _curve_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./curve.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/curve.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y²\n\n\n\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = {\n    zip215: true\n};\nfunction validateOpts(curve) {\n    const opts = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.validateBasic)(curve);\n    _utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject(curve, {\n        hash: \"function\",\n        a: \"bigint\",\n        d: \"bigint\",\n        randomBytes: \"function\"\n    }, {\n        adjustScalarBytes: \"function\",\n        domain: \"function\",\n        uvRatio: \"function\",\n        mapToCurve: \"function\"\n    });\n    // Set defaults\n    return Object.freeze({\n        ...opts\n    });\n}\n// It is not generic twisted curve for now, but ed25519/ed448 generic implementation\nfunction twistedEdwards(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER, prehash: prehash, hash: cHash, randomBytes, nByteLength, h: cofactor } = CURVE;\n    const MASK = _2n << BigInt(nByteLength * 8) - _1n;\n    const modP = Fp.create; // Function overrides\n    // sqrt(u/v)\n    const uvRatio = CURVE.uvRatio || ((u, v)=>{\n        try {\n            return {\n                isValid: true,\n                value: Fp.sqrt(u * Fp.inv(v))\n            };\n        } catch (e) {\n            return {\n                isValid: false,\n                value: _0n\n            };\n        }\n    });\n    const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes)=>bytes); // NOOP\n    const domain = CURVE.domain || ((data, ctx, phflag)=>{\n        if (ctx.length || phflag) throw new Error(\"Contexts/pre-hash are not supported\");\n        return data;\n    }); // NOOP\n    const inBig = (n)=>typeof n === \"bigint\" && _0n < n; // n in [1..]\n    const inRange = (n, max)=>inBig(n) && inBig(max) && n < max; // n in [1..max-1]\n    const in0MaskRange = (n)=>n === _0n || inRange(n, MASK); // n in [0..MASK-1]\n    function assertInRange(n, max) {\n        // n in [1..max-1]\n        if (inRange(n, max)) return n;\n        throw new Error(`Expected valid scalar < ${max}, got ${typeof n} ${n}`);\n    }\n    function assertGE0(n) {\n        // n in [0..CURVE_ORDER-1]\n        return n === _0n ? n : assertInRange(n, CURVE_ORDER); // GE = prime subgroup, not full group\n    }\n    const pointPrecomputes = new Map();\n    function isPoint(other) {\n        if (!(other instanceof Point)) throw new Error(\"ExtendedPoint expected\");\n    }\n    // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n    // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n    class Point {\n        constructor(ex, ey, ez, et){\n            this.ex = ex;\n            this.ey = ey;\n            this.ez = ez;\n            this.et = et;\n            if (!in0MaskRange(ex)) throw new Error(\"x required\");\n            if (!in0MaskRange(ey)) throw new Error(\"y required\");\n            if (!in0MaskRange(ez)) throw new Error(\"z required\");\n            if (!in0MaskRange(et)) throw new Error(\"t required\");\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        static fromAffine(p) {\n            if (p instanceof Point) throw new Error(\"extended point not allowed\");\n            const { x, y } = p || {};\n            if (!in0MaskRange(x) || !in0MaskRange(y)) throw new Error(\"invalid affine point\");\n            return new Point(x, y, _1n, modP(x * y));\n        }\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p)=>p.ez));\n            return points.map((p, i)=>p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // Not required for fromHex(), which always creates valid points.\n        // Could be useful for fromAffine().\n        assertValidity() {\n            const { a, d } = CURVE;\n            if (this.is0()) throw new Error(\"bad point: ZERO\"); // TODO: optimize, with vars below?\n            // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n            // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n            const { ex: X, ey: Y, ez: Z, et: T } = this;\n            const X2 = modP(X * X); // X²\n            const Y2 = modP(Y * Y); // Y²\n            const Z2 = modP(Z * Z); // Z²\n            const Z4 = modP(Z2 * Z2); // Z⁴\n            const aX2 = modP(X2 * a); // aX²\n            const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n            const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n            if (left !== right) throw new Error(\"bad point: equation left != right (1)\");\n            // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n            const XY = modP(X * Y);\n            const ZT = modP(Z * T);\n            if (XY !== ZT) throw new Error(\"bad point: equation left != right (2)\");\n        }\n        // Compare one point to another.\n        equals(other) {\n            isPoint(other);\n            const { ex: X1, ey: Y1, ez: Z1 } = this;\n            const { ex: X2, ey: Y2, ez: Z2 } = other;\n            const X1Z2 = modP(X1 * Z2);\n            const X2Z1 = modP(X2 * Z1);\n            const Y1Z2 = modP(Y1 * Z2);\n            const Y2Z1 = modP(Y2 * Z1);\n            return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        negate() {\n            // Flips point sign to a negative one (-x, y in affine coords)\n            return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n        }\n        // Fast algo for doubling Extended Point.\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n        // Cost: 4M + 4S + 1*a + 6add + 1*2.\n        double() {\n            const { a } = CURVE;\n            const { ex: X1, ey: Y1, ez: Z1 } = this;\n            const A = modP(X1 * X1); // A = X12\n            const B = modP(Y1 * Y1); // B = Y12\n            const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n            const D = modP(a * A); // D = a*A\n            const x1y1 = X1 + Y1;\n            const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n            const G = D + B; // G = D+B\n            const F = G - C; // F = G-C\n            const H = D - B; // H = D-B\n            const X3 = modP(E * F); // X3 = E*F\n            const Y3 = modP(G * H); // Y3 = G*H\n            const T3 = modP(E * H); // T3 = E*H\n            const Z3 = modP(F * G); // Z3 = F*G\n            return new Point(X3, Y3, Z3, T3);\n        }\n        // Fast algo for adding 2 Extended Points.\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n        // Cost: 9M + 1*a + 1*d + 7add.\n        add(other) {\n            isPoint(other);\n            const { a, d } = CURVE;\n            const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n            const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n            // Faster algo for adding 2 Extended Points when curve's a=-1.\n            // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n            // Cost: 8M + 8add + 2*2.\n            // Note: It does not check whether the `other` point is valid.\n            if (a === BigInt(-1)) {\n                const A = modP((Y1 - X1) * (Y2 + X2));\n                const B = modP((Y1 + X1) * (Y2 - X2));\n                const F = modP(B - A);\n                if (F === _0n) return this.double(); // Same point. Tests say it doesn't affect timing\n                const C = modP(Z1 * _2n * T2);\n                const D = modP(T1 * _2n * Z2);\n                const E = D + C;\n                const G = B + A;\n                const H = D - C;\n                const X3 = modP(E * F);\n                const Y3 = modP(G * H);\n                const T3 = modP(E * H);\n                const Z3 = modP(F * G);\n                return new Point(X3, Y3, Z3, T3);\n            }\n            const A = modP(X1 * X2); // A = X1*X2\n            const B = modP(Y1 * Y2); // B = Y1*Y2\n            const C = modP(T1 * d * T2); // C = T1*d*T2\n            const D = modP(Z1 * Z2); // D = Z1*Z2\n            const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n            const F = D - C; // F = D-C\n            const G = D + C; // G = D+C\n            const H = modP(B - a * A); // H = B-a*A\n            const X3 = modP(E * F); // X3 = E*F\n            const Y3 = modP(G * H); // Y3 = G*H\n            const T3 = modP(E * H); // T3 = E*H\n            const Z3 = modP(F * G); // Z3 = F*G\n            return new Point(X3, Y3, Z3, T3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, Point.normalizeZ);\n        }\n        // Constant-time multiplication.\n        multiply(scalar) {\n            const { p, f } = this.wNAF(assertInRange(scalar, CURVE_ORDER));\n            return Point.normalizeZ([\n                p,\n                f\n            ])[0];\n        }\n        // Non-constant-time multiplication. Uses double-and-add algorithm.\n        // It's faster, but should only be used when you don't care about\n        // an exposed private key e.g. sig verification.\n        // Does NOT allow scalars higher than CURVE.n.\n        multiplyUnsafe(scalar) {\n            let n = assertGE0(scalar); // 0 <= scalar < CURVE.n\n            if (n === _0n) return I;\n            if (this.equals(I) || n === _1n) return this;\n            if (this.equals(G)) return this.wNAF(n).p;\n            return wnaf.unsafeLadder(this, n);\n        }\n        // Checks if point is of small order.\n        // If you add something to small order point, you will have \"dirty\"\n        // point with torsion component.\n        // Multiplies point by cofactor and checks if the result is 0.\n        isSmallOrder() {\n            return this.multiplyUnsafe(cofactor).is0();\n        }\n        // Multiplies point by curve order and checks if the result is 0.\n        // Returns `false` is the point is dirty.\n        isTorsionFree() {\n            return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n        }\n        // Converts Extended point to default (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        toAffine(iz) {\n            const { ex: x, ey: y, ez: z } = this;\n            const is0 = this.is0();\n            if (iz == null) iz = is0 ? _8n : Fp.inv(z); // 8 was chosen arbitrarily\n            const ax = modP(x * iz);\n            const ay = modP(y * iz);\n            const zz = modP(z * iz);\n            if (is0) return {\n                x: _0n,\n                y: _1n\n            };\n            if (zz !== _1n) throw new Error(\"invZ was invalid\");\n            return {\n                x: ax,\n                y: ay\n            };\n        }\n        clearCofactor() {\n            const { h: cofactor } = CURVE;\n            if (cofactor === _1n) return this;\n            return this.multiplyUnsafe(cofactor);\n        }\n        // Converts hash string or Uint8Array to Point.\n        // Uses algo from RFC8032 5.1.3.\n        static fromHex(hex, zip215 = false) {\n            const { d, a } = CURVE;\n            const len = Fp.BYTES;\n            hex = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)(\"pointHex\", hex, len); // copy hex to a new array\n            const normed = hex.slice(); // copy again, we'll manipulate it\n            const lastByte = hex[len - 1]; // select last byte\n            normed[len - 1] = lastByte & ~0x80; // clear last bit\n            const y = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberLE(normed);\n            if (y === _0n) {\n            // y=0 is allowed\n            } else {\n                // RFC8032 prohibits >= p, but ZIP215 doesn't\n                if (zip215) assertInRange(y, MASK); // zip215=true [1..P-1] (2^255-19-1 for ed25519)\n                else assertInRange(y, Fp.ORDER); // zip215=false [1..MASK-1] (2^256-1 for ed25519)\n            }\n            // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n            // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n            const y2 = modP(y * y); // denominator is always non-0 mod p.\n            const u = modP(y2 - _1n); // u = y² - 1\n            const v = modP(d * y2 - a); // v = d y² + 1.\n            let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n            if (!isValid) throw new Error(\"Point.fromHex: invalid y coordinate\");\n            const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n            const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n            if (!zip215 && x === _0n && isLastByteOdd) // if x=0 and x_0 = 1, fail\n            throw new Error(\"Point.fromHex: x=0 and x_0=1\");\n            if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n            return Point.fromAffine({\n                x,\n                y\n            });\n        }\n        static fromPrivateKey(privKey) {\n            return getExtendedPublicKey(privKey).point;\n        }\n        toRawBytes() {\n            const { x, y } = this.toAffine();\n            const bytes = _utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n            bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n            return bytes; // and use the last byte to encode sign of x\n        }\n        toHex() {\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    Point.ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n    const { BASE: G, ZERO: I } = Point;\n    const wnaf = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.wNAF)(Point, nByteLength * 8);\n    function modN(a) {\n        return (0,_modular_js__WEBPACK_IMPORTED_MODULE_2__.mod)(a, CURVE_ORDER);\n    }\n    // Little-endian SHA512 with modulo n\n    function modN_LE(hash) {\n        return modN(_utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberLE(hash));\n    }\n    /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */ function getExtendedPublicKey(key) {\n        const len = nByteLength;\n        key = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)(\"private key\", key, len);\n        // Hash private key with curve's hash function to produce uniformingly random input\n        // Check byte lengths: ensure(64, h(ensure(32, key)))\n        const hashed = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)(\"hashed private key\", cHash(key), 2 * len);\n        const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n        const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n        const scalar = modN_LE(head); // The actual private scalar\n        const point = G.multiply(scalar); // Point on Edwards curve aka public key\n        const pointBytes = point.toRawBytes(); // Uint8Array representation\n        return {\n            head,\n            prefix,\n            scalar,\n            point,\n            pointBytes\n        };\n    }\n    // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n    function getPublicKey(privKey) {\n        return getExtendedPublicKey(privKey).pointBytes;\n    }\n    // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n    function hashDomainToScalar(context = new Uint8Array(), ...msgs) {\n        const msg = _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes(...msgs);\n        return modN_LE(cHash(domain(msg, (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)(\"context\", context), !!prehash)));\n    }\n    /** Signs message with privateKey. RFC8032 5.1.6 */ function sign(msg, privKey, options = {}) {\n        msg = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)(\"message\", msg);\n        if (prehash) msg = prehash(msg); // for ed25519ph etc.\n        const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n        const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n        const R = G.multiply(r).toRawBytes(); // R = rG\n        const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n        const s = modN(r + k * scalar); // S = (r + k * s) mod L\n        assertGE0(s); // 0 <= s < l\n        const res = _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes(R, _utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesLE(s, Fp.BYTES));\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)(\"result\", res, nByteLength * 2); // 64-byte signature\n    }\n    const verifyOpts = VERIFY_DEFAULT;\n    function verify(sig, msg, publicKey, options = verifyOpts) {\n        const { context, zip215 } = options;\n        const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n        sig = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)(\"signature\", sig, 2 * len); // An extended group equation is checked.\n        msg = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)(\"message\", msg);\n        if (prehash) msg = prehash(msg); // for ed25519ph, etc\n        const s = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberLE(sig.slice(len, 2 * len));\n        // zip215: true is good for consensus-critical apps and allows points < 2^256\n        // zip215: false follows RFC8032 / NIST186-5 and restricts points to CURVE.p\n        let A, R, SB;\n        try {\n            A = Point.fromHex(publicKey, zip215);\n            R = Point.fromHex(sig.slice(0, len), zip215);\n            SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n        } catch (error) {\n            return false;\n        }\n        if (!zip215 && A.isSmallOrder()) return false;\n        const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n        const RkA = R.add(A.multiplyUnsafe(k));\n        // [8][S]B = [8]R + [8][k]A'\n        return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n    }\n    G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n    const utils = {\n        getExtendedPublicKey,\n        // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n        randomPrivateKey: ()=>randomBytes(Fp.BYTES),\n        /**\n         * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n         * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n         * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n         * @param windowSize 2, 4, 8, 16\n         */ precompute (windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3));\n            return point;\n        }\n    };\n    return {\n        CURVE,\n        getPublicKey,\n        sign,\n        verify,\n        ExtendedPoint: Point,\n        utils\n    };\n} //# sourceMappingURL=edwards.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9lc20vYWJzdHJhY3QvZWR3YXJkcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsb0VBQW9FLEdBQ3BFLDhEQUE4RDtBQUMzQjtBQUNGO0FBQ1E7QUFDUTtBQUNqRCxxRUFBcUU7QUFDckUsa0JBQWtCO0FBQ2xCLE1BQU1LLE1BQU1DLE9BQU8sSUFBSUMsTUFBTUQsT0FBTyxJQUFJRSxNQUFNRixPQUFPLElBQUlHLE1BQU1ILE9BQU87QUFDdEUsOEVBQThFO0FBQzlFLE1BQU1JLGlCQUFpQjtJQUFFQyxRQUFRO0FBQUs7QUFDdEMsU0FBU0MsYUFBYUMsS0FBSztJQUN2QixNQUFNQyxPQUFPVix3REFBYUEsQ0FBQ1M7SUFDM0JaLHFEQUFpQixDQUFDWSxPQUFPO1FBQ3JCRyxNQUFNO1FBQ05DLEdBQUc7UUFDSEMsR0FBRztRQUNIQyxhQUFhO0lBQ2pCLEdBQUc7UUFDQ0MsbUJBQW1CO1FBQ25CQyxRQUFRO1FBQ1JDLFNBQVM7UUFDVEMsWUFBWTtJQUNoQjtJQUNBLGVBQWU7SUFDZixPQUFPQyxPQUFPQyxNQUFNLENBQUM7UUFBRSxHQUFHWCxJQUFJO0lBQUM7QUFDbkM7QUFDQSxvRkFBb0Y7QUFDN0UsU0FBU1ksZUFBZUMsUUFBUTtJQUNuQyxNQUFNQyxRQUFRaEIsYUFBYWU7SUFDM0IsTUFBTSxFQUFFRSxFQUFFLEVBQUVDLEdBQUdDLFdBQVcsRUFBRUMsU0FBU0EsT0FBTyxFQUFFaEIsTUFBTWlCLEtBQUssRUFBRWQsV0FBVyxFQUFFZSxXQUFXLEVBQUVDLEdBQUdDLFFBQVEsRUFBRyxHQUFHUjtJQUN0RyxNQUFNUyxPQUFPN0IsT0FBUUYsT0FBTzRCLGNBQWMsS0FBSzNCO0lBQy9DLE1BQU0rQixPQUFPVCxHQUFHVSxNQUFNLEVBQUUscUJBQXFCO0lBQzdDLFlBQVk7SUFDWixNQUFNakIsVUFBVU0sTUFBTU4sT0FBTyxJQUN4QixFQUFDa0IsR0FBR0M7UUFDRCxJ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TztRQUNBUTtRQUNBUyxlQUFldEk7UUFDZm1JO0lBQ0o7QUFDSixFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2JlZ2dhci0vLi9ub2RlX21vZHVsZXMvZnJvZy9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9lc20vYWJzdHJhY3QvZWR3YXJkcy5qcz9kMzhmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBub2JsZS1jdXJ2ZXMgLSBNSVQgTGljZW5zZSAoYykgMjAyMiBQYXVsIE1pbGxlciAocGF1bG1pbGxyLmNvbSkgKi9cbi8vIFR3aXN0ZWQgRWR3YXJkcyBjdXJ2ZS4gVGhlIGZvcm11bGEgaXM6IGF4wrIgKyB5wrIgPSAxICsgZHjCsnnCslxuaW1wb3J0IHsgbW9kIH0gZnJvbSAnLi9tb2R1bGFyLmpzJztcbmltcG9ydCAqIGFzIHV0IGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IHsgZW5zdXJlQnl0ZXMgfSBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7IHdOQUYsIHZhbGlkYXRlQmFzaWMgfSBmcm9tICcuL2N1cnZlLmpzJztcbi8vIEJlIGZyaWVuZGx5IHRvIGJhZCBFQ01BU2NyaXB0IHBhcnNlcnMgYnkgbm90IHVzaW5nIGJpZ2ludCBsaXRlcmFsc1xuLy8gcHJldHRpZXItaWdub3JlXG5jb25zdCBfMG4gPSBCaWdJbnQoMCksIF8xbiA9IEJpZ0ludCgxKSwgXzJuID0gQmlnSW50KDIpLCBfOG4gPSBCaWdJbnQoOCk7XG4vLyB2ZXJpZmljYXRpb24gcnVsZSBpcyBlaXRoZXIgemlwMjE1IG9yIHJmYzgwMzIgLyBuaXN0MTg2LTUuIENvbnN1bHQgZnJvbUhleDpcbmNvbnN0IFZFUklGWV9ERUZBVUxUID0geyB6aXAyMTU6IHRydWUgfTtcbmZ1bmN0aW9uIHZhbGlkYXRlT3B0cyhjdXJ2ZSkge1xuICAgIGNvbnN0IG9wdHMgPSB2YWxpZGF0ZUJhc2ljKGN1cnZlKTtcbiAgICB1dC52YWxpZGF0ZU9iamVjdChjdXJ2ZSwge1xuICAgICAgICBoYXNoOiAnZnVuY3Rpb24nLFxuICAgICAgICBhOiAnYmlnaW50JyxcbiAgICAgICAgZDogJ2JpZ2ludCcsXG4gICAgICAgIHJhbmRvbUJ5dGVzOiAnZnVuY3Rpb24nLFxuICAgIH0sIHtcbiAgICAgICAgYWRqdXN0U2NhbGFyQnl0ZXM6ICdmdW5jdGlvbicsXG4gICAgICAgIGRvbWFpbjogJ2Z1bmN0aW9uJyxcbiAgICAgICAgdXZSYXRpbzogJ2Z1bmN0aW9uJyxcbiAgICAgICAgbWFwVG9DdXJ2ZTogJ2Z1bmN0aW9uJyxcbiAgICB9KTtcbiAgICAvLyBTZXQgZGVmYXVsdHNcbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7IC4uLm9wdHMgfSk7XG59XG4vLyBJdCBpcyBub3QgZ2VuZXJpYyB0d2lzdGVkIGN1cnZlIGZvciBub3csIGJ1dCBlZDI1NTE5L2VkNDQ4IGdlbmVyaWMgaW1wbGVtZW50YXRpb25cbmV4cG9ydCBmdW5jdGlvbiB0d2lzdGVkRWR3YXJkcyhjdXJ2ZURlZikge1xuICAgIGNvbnN0IENVUlZFID0gdmFsaWRhdGVPcHRzKGN1cnZlRGVmKTtcbiAgICBjb25zdCB7IEZwLCBuOiBDVVJWRV9PUkRFUiwgcHJlaGFzaDogcHJlaGFzaCwgaGFzaDogY0hhc2gsIHJhbmRvbUJ5dGVzLCBuQnl0ZUxlbmd0aCwgaDogY29mYWN0b3IsIH0gPSBDVVJWRTtcbiAgICBjb25zdCBNQVNLID0gXzJuIDw8IChCaWdJbnQobkJ5dGVMZW5ndGggKiA4KSAtIF8xbik7XG4gICAgY29uc3QgbW9kUCA9IEZwLmNyZWF0ZTsgLy8gRnVuY3Rpb24gb3ZlcnJpZGVzXG4gICAgLy8gc3FydCh1L3YpXG4gICAgY29uc3QgdXZSYXRpbyA9IENVUlZFLnV2UmF0aW8gfHxcbiAgICAgICAgKCh1LCB2KSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGlzVmFsaWQ6IHRydWUsIHZhbHVlOiBGcC5zcXJ0KHUgKiBGcC5pbnYodikpIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGlzVmFsaWQ6IGZhbHNlLCB2YWx1ZTogXzBuIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIGNvbnN0IGFkanVzdFNjYWxhckJ5dGVzID0gQ1VSVkUuYWRqdXN0U2NhbGFyQnl0ZXMgfHwgKChieXRlcykgPT4gYnl0ZXMpOyAvLyBOT09QXG4gICAgY29uc3QgZG9tYWluID0gQ1VSVkUuZG9tYWluIHx8XG4gICAgICAgICgoZGF0YSwgY3R4LCBwaGZsYWcpID0+IHtcbiAgICAgICAgICAgIGlmIChjdHgubGVuZ3RoIHx8IHBoZmxhZylcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbnRleHRzL3ByZS1oYXNoIGFyZSBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSk7IC8vIE5PT1BcbiAgICBjb25zdCBpbkJpZyA9IChuKSA9PiB0eXBlb2YgbiA9PT0gJ2JpZ2ludCcgJiYgXzBuIDwgbjsgLy8gbiBpbiBbMS4uXVxuICAgIGNvbnN0IGluUmFuZ2UgPSAobiwgbWF4KSA9PiBpbkJpZyhuKSAmJiBpbkJpZyhtYXgpICYmIG4gPCBtYXg7IC8vIG4gaW4gWzEuLm1heC0xXVxuICAgIGNvbnN0IGluME1hc2tSYW5nZSA9IChuKSA9PiBuID09PSBfMG4gfHwgaW5SYW5nZShuLCBNQVNLKTsgLy8gbiBpbiBbMC4uTUFTSy0xXVxuICAgIGZ1bmN0aW9uIGFzc2VydEluUmFuZ2UobiwgbWF4KSB7XG4gICAgICAgIC8vIG4gaW4gWzEuLm1heC0xXVxuICAgICAgICBpZiAoaW5SYW5nZShuLCBtYXgpKVxuICAgICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgdmFsaWQgc2NhbGFyIDwgJHttYXh9LCBnb3QgJHt0eXBlb2Ygbn0gJHtufWApO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhc3NlcnRHRTAobikge1xuICAgICAgICAvLyBuIGluIFswLi5DVVJWRV9PUkRFUi0xXVxuICAgICAgICByZXR1cm4gbiA9PT0gXzBuID8gbiA6IGFzc2VydEluUmFuZ2UobiwgQ1VSVkVfT1JERVIpOyAvLyBHRSA9IHByaW1lIHN1Ymdyb3VwLCBub3QgZnVsbCBncm91cFxuICAgIH1cbiAgICBjb25zdCBwb2ludFByZWNvbXB1dGVzID0gbmV3IE1hcCgpO1xuICAgIGZ1bmN0aW9uIGlzUG9pbnQob3RoZXIpIHtcbiAgICAgICAgaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBQb2ludCkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4dGVuZGVkUG9pbnQgZXhwZWN0ZWQnKTtcbiAgICB9XG4gICAgLy8gRXh0ZW5kZWQgUG9pbnQgd29ya3MgaW4gZXh0ZW5kZWQgY29vcmRpbmF0ZXM6ICh4LCB5LCB6LCB0KSDiiIsgKHg9eC96LCB5PXkveiwgdD14eSkuXG4gICAgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVHdpc3RlZF9FZHdhcmRzX2N1cnZlI0V4dGVuZGVkX2Nvb3JkaW5hdGVzXG4gICAgY2xhc3MgUG9pbnQge1xuICAgICAgICBjb25zdHJ1Y3RvcihleCwgZXksIGV6LCBldCkge1xuICAgICAgICAgICAgdGhpcy5leCA9IGV4O1xuICAgICAgICAgICAgdGhpcy5leSA9IGV5O1xuICAgICAgICAgICAgdGhpcy5leiA9IGV6O1xuICAgICAgICAgICAgdGhpcy5ldCA9IGV0O1xuICAgICAgICAgICAgaWYgKCFpbjBNYXNrUmFuZ2UoZXgpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigneCByZXF1aXJlZCcpO1xuICAgICAgICAgICAgaWYgKCFpbjBNYXNrUmFuZ2UoZXkpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigneSByZXF1aXJlZCcpO1xuICAgICAgICAgICAgaWYgKCFpbjBNYXNrUmFuZ2UoZXopKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigneiByZXF1aXJlZCcpO1xuICAgICAgICAgICAgaWYgKCFpbjBNYXNrUmFuZ2UoZXQpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndCByZXF1aXJlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGdldCB4KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9BZmZpbmUoKS54O1xuICAgICAgICB9XG4gICAgICAgIGdldCB5KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9BZmZpbmUoKS55O1xuICAgICAgICB9XG4gICAgICAgIHN0YXRpYyBmcm9tQWZmaW5lKHApIHtcbiAgICAgICAgICAgIGlmIChwIGluc3RhbmNlb2YgUG9pbnQpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdleHRlbmRlZCBwb2ludCBub3QgYWxsb3dlZCcpO1xuICAgICAgICAgICAgY29uc3QgeyB4LCB5IH0gPSBwIHx8IHt9O1xuICAgICAgICAgICAgaWYgKCFpbjBNYXNrUmFuZ2UoeCkgfHwgIWluME1hc2tSYW5nZSh5KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgYWZmaW5lIHBvaW50Jyk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFBvaW50KHgsIHksIF8xbiwgbW9kUCh4ICogeSkpO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRpYyBub3JtYWxpemVaKHBvaW50cykge1xuICAgICAgICAgICAgY29uc3QgdG9JbnYgPSBGcC5pbnZlcnRCYXRjaChwb2ludHMubWFwKChwKSA9PiBwLmV6KSk7XG4gICAgICAgICAgICByZXR1cm4gcG9pbnRzLm1hcCgocCwgaSkgPT4gcC50b0FmZmluZSh0b0ludltpXSkpLm1hcChQb2ludC5mcm9tQWZmaW5lKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBcIlByaXZhdGUgbWV0aG9kXCIsIGRvbid0IHVzZSBpdCBkaXJlY3RseVxuICAgICAgICBfc2V0V2luZG93U2l6ZSh3aW5kb3dTaXplKSB7XG4gICAgICAgICAgICB0aGlzLl9XSU5ET1dfU0laRSA9IHdpbmRvd1NpemU7XG4gICAgICAgICAgICBwb2ludFByZWNvbXB1dGVzLmRlbGV0ZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBOb3QgcmVxdWlyZWQgZm9yIGZyb21IZXgoKSwgd2hpY2ggYWx3YXlzIGNyZWF0ZXMgdmFsaWQgcG9pbnRzLlxuICAgICAgICAvLyBDb3VsZCBiZSB1c2VmdWwgZm9yIGZyb21BZmZpbmUoKS5cbiAgICAgICAgYXNzZXJ0VmFsaWRpdHkoKSB7XG4gICAgICAgICAgICBjb25zdCB7IGEsIGQgfSA9IENVUlZFO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXMwKCkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdiYWQgcG9pbnQ6IFpFUk8nKTsgLy8gVE9ETzogb3B0aW1pemUsIHdpdGggdmFycyBiZWxvdz9cbiAgICAgICAgICAgIC8vIEVxdWF0aW9uIGluIGFmZmluZSBjb29yZGluYXRlczogYXjCsiArIHnCsiA9IDEgKyBkeMKyecKyXG4gICAgICAgICAgICAvLyBFcXVhdGlvbiBpbiBwcm9qZWN0aXZlIGNvb3JkaW5hdGVzIChYL1osIFkvWiwgWik6ICAoYVjCsiArIFnCsilawrIgPSBa4oG0ICsgZFjCslnCslxuICAgICAgICAgICAgY29uc3QgeyBleDogWCwgZXk6IFksIGV6OiBaLCBldDogVCB9ID0gdGhpcztcbiAgICAgICAgICAgIGNvbnN0IFgyID0gbW9kUChYICogWCk7IC8vIFjCslxuICAgICAgICAgICAgY29uc3QgWTIgPSBtb2RQKFkgKiBZKTsgLy8gWcKyXG4gICAgICAgICAgICBjb25zdCBaMiA9IG1vZFAoWiAqIFopOyAvLyBawrJcbiAgICAgICAgICAgIGNvbnN0IFo0ID0gbW9kUChaMiAqIFoyKTsgLy8gWuKBtFxuICAgICAgICAgICAgY29uc3QgYVgyID0gbW9kUChYMiAqIGEpOyAvLyBhWMKyXG4gICAgICAgICAgICBjb25zdCBsZWZ0ID0gbW9kUChaMiAqIG1vZFAoYVgyICsgWTIpKTsgLy8gKGFYwrIgKyBZwrIpWsKyXG4gICAgICAgICAgICBjb25zdCByaWdodCA9IG1vZFAoWjQgKyBtb2RQKGQgKiBtb2RQKFgyICogWTIpKSk7IC8vIFrigbQgKyBkWMKyWcKyXG4gICAgICAgICAgICBpZiAobGVmdCAhPT0gcmlnaHQpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdiYWQgcG9pbnQ6IGVxdWF0aW9uIGxlZnQgIT0gcmlnaHQgKDEpJyk7XG4gICAgICAgICAgICAvLyBJbiBFeHRlbmRlZCBjb29yZGluYXRlcyB3ZSBhbHNvIGhhdmUgVCwgd2hpY2ggaXMgeCp5PVQvWjogY2hlY2sgWCpZID09IFoqVFxuICAgICAgICAgICAgY29uc3QgWFkgPSBtb2RQKFggKiBZKTtcbiAgICAgICAgICAgIGNvbnN0IFpUID0gbW9kUChaICogVCk7XG4gICAgICAgICAgICBpZiAoWFkgIT09IFpUKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYmFkIHBvaW50OiBlcXVhdGlvbiBsZWZ0ICE9IHJpZ2h0ICgyKScpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENvbXBhcmUgb25lIHBvaW50IHRvIGFub3RoZXIuXG4gICAgICAgIGVxdWFscyhvdGhlcikge1xuICAgICAgICAgICAgaXNQb2ludChvdGhlcik7XG4gICAgICAgICAgICBjb25zdCB7IGV4OiBYMSwgZXk6IFkxLCBlejogWjEgfSA9IHRoaXM7XG4gICAgICAgICAgICBjb25zdCB7IGV4OiBYMiwgZXk6IFkyLCBlejogWjIgfSA9IG90aGVyO1xuICAgICAgICAgICAgY29uc3QgWDFaMiA9IG1vZFAoWDEgKiBaMik7XG4gICAgICAgICAgICBjb25zdCBYMloxID0gbW9kUChYMiAqIFoxKTtcbiAgICAgICAgICAgIGNvbnN0IFkxWjIgPSBtb2RQKFkxICogWjIpO1xuICAgICAgICAgICAgY29uc3QgWTJaMSA9IG1vZFAoWTIgKiBaMSk7XG4gICAgICAgICAgICByZXR1cm4gWDFaMiA9PT0gWDJaMSAmJiBZMVoyID09PSBZMloxO1xuICAgICAgICB9XG4gICAgICAgIGlzMCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVxdWFscyhQb2ludC5aRVJPKTtcbiAgICAgICAgfVxuICAgICAgICBuZWdhdGUoKSB7XG4gICAgICAgICAgICAvLyBGbGlwcyBwb2ludCBzaWduIHRvIGEgbmVnYXRpdmUgb25lICgteCwgeSBpbiBhZmZpbmUgY29vcmRzKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQb2ludChtb2RQKC10aGlzLmV4KSwgdGhpcy5leSwgdGhpcy5leiwgbW9kUCgtdGhpcy5ldCkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZhc3QgYWxnbyBmb3IgZG91YmxpbmcgRXh0ZW5kZWQgUG9pbnQuXG4gICAgICAgIC8vIGh0dHBzOi8vaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXR3aXN0ZWQtZXh0ZW5kZWQuaHRtbCNkb3VibGluZy1kYmwtMjAwOC1od2NkXG4gICAgICAgIC8vIENvc3Q6IDRNICsgNFMgKyAxKmEgKyA2YWRkICsgMSoyLlxuICAgICAgICBkb3VibGUoKSB7XG4gICAgICAgICAgICBjb25zdCB7IGEgfSA9IENVUlZFO1xuICAgICAgICAgICAgY29uc3QgeyBleDogWDEsIGV5OiBZMSwgZXo6IFoxIH0gPSB0aGlzO1xuICAgICAgICAgICAgY29uc3QgQSA9IG1vZFAoWDEgKiBYMSk7IC8vIEEgPSBYMTJcbiAgICAgICAgICAgIGNvbnN0IEIgPSBtb2RQKFkxICogWTEpOyAvLyBCID0gWTEyXG4gICAgICAgICAgICBjb25zdCBDID0gbW9kUChfMm4gKiBtb2RQKFoxICogWjEpKTsgLy8gQyA9IDIqWjEyXG4gICAgICAgICAgICBjb25zdCBEID0gbW9kUChhICogQSk7IC8vIEQgPSBhKkFcbiAgICAgICAgICAgIGNvbnN0IHgxeTEgPSBYMSArIFkxO1xuICAgICAgICAgICAgY29uc3QgRSA9IG1vZFAobW9kUCh4MXkxICogeDF5MSkgLSBBIC0gQik7IC8vIEUgPSAoWDErWTEpMi1BLUJcbiAgICAgICAgICAgIGNvbnN0IEcgPSBEICsgQjsgLy8gRyA9IEQrQlxuICAgICAgICAgICAgY29uc3QgRiA9IEcgLSBDOyAvLyBGID0gRy1DXG4gICAgICAgICAgICBjb25zdCBIID0gRCAtIEI7IC8vIEggPSBELUJcbiAgICAgICAgICAgIGNvbnN0IFgzID0gbW9kUChFICogRik7IC8vIFgzID0gRSpGXG4gICAgICAgICAgICBjb25zdCBZMyA9IG1vZFAoRyAqIEgpOyAvLyBZMyA9IEcqSFxuICAgICAgICAgICAgY29uc3QgVDMgPSBtb2RQKEUgKiBIKTsgLy8gVDMgPSBFKkhcbiAgICAgICAgICAgIGNvbnN0IFozID0gbW9kUChGICogRyk7IC8vIFozID0gRipHXG4gICAgICAgICAgICByZXR1cm4gbmV3IFBvaW50KFgzLCBZMywgWjMsIFQzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBGYXN0IGFsZ28gZm9yIGFkZGluZyAyIEV4dGVuZGVkIFBvaW50cy5cbiAgICAgICAgLy8gaHR0cHM6Ly9oeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tdHdpc3RlZC1leHRlbmRlZC5odG1sI2FkZGl0aW9uLWFkZC0yMDA4LWh3Y2RcbiAgICAgICAgLy8gQ29zdDogOU0gKyAxKmEgKyAxKmQgKyA3YWRkLlxuICAgICAgICBhZGQob3RoZXIpIHtcbiAgICAgICAgICAgIGlzUG9pbnQob3RoZXIpO1xuICAgICAgICAgICAgY29uc3QgeyBhLCBkIH0gPSBDVVJWRTtcbiAgICAgICAgICAgIGNvbnN0IHsgZXg6IFgxLCBleTogWTEsIGV6OiBaMSwgZXQ6IFQxIH0gPSB0aGlzO1xuICAgICAgICAgICAgY29uc3QgeyBleDogWDIsIGV5OiBZMiwgZXo6IFoyLCBldDogVDIgfSA9IG90aGVyO1xuICAgICAgICAgICAgLy8gRmFzdGVyIGFsZ28gZm9yIGFkZGluZyAyIEV4dGVuZGVkIFBvaW50cyB3aGVuIGN1cnZlJ3MgYT0tMS5cbiAgICAgICAgICAgIC8vIGh0dHA6Ly9oeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tdHdpc3RlZC1leHRlbmRlZC0xLmh0bWwjYWRkaXRpb24tYWRkLTIwMDgtaHdjZC00XG4gICAgICAgICAgICAvLyBDb3N0OiA4TSArIDhhZGQgKyAyKjIuXG4gICAgICAgICAgICAvLyBOb3RlOiBJdCBkb2VzIG5vdCBjaGVjayB3aGV0aGVyIHRoZSBgb3RoZXJgIHBvaW50IGlzIHZhbGlkLlxuICAgICAgICAgICAgaWYgKGEgPT09IEJpZ0ludCgtMSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBBID0gbW9kUCgoWTEgLSBYMSkgKiAoWTIgKyBYMikpO1xuICAgICAgICAgICAgICAgIGNvbnN0IEIgPSBtb2RQKChZMSArIFgxKSAqIChZMiAtIFgyKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgRiA9IG1vZFAoQiAtIEEpO1xuICAgICAgICAgICAgICAgIGlmIChGID09PSBfMG4pXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRvdWJsZSgpOyAvLyBTYW1lIHBvaW50LiBUZXN0cyBzYXkgaXQgZG9lc24ndCBhZmZlY3QgdGltaW5nXG4gICAgICAgICAgICAgICAgY29uc3QgQyA9IG1vZFAoWjEgKiBfMm4gKiBUMik7XG4gICAgICAgICAgICAgICAgY29uc3QgRCA9IG1vZFAoVDEgKiBfMm4gKiBaMik7XG4gICAgICAgICAgICAgICAgY29uc3QgRSA9IEQgKyBDO1xuICAgICAgICAgICAgICAgIGNvbnN0IEcgPSBCICsgQTtcbiAgICAgICAgICAgICAgICBjb25zdCBIID0gRCAtIEM7XG4gICAgICAgICAgICAgICAgY29uc3QgWDMgPSBtb2RQKEUgKiBGKTtcbiAgICAgICAgICAgICAgICBjb25zdCBZMyA9IG1vZFAoRyAqIEgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IFQzID0gbW9kUChFICogSCk7XG4gICAgICAgICAgICAgICAgY29uc3QgWjMgPSBtb2RQKEYgKiBHKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBvaW50KFgzLCBZMywgWjMsIFQzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IEEgPSBtb2RQKFgxICogWDIpOyAvLyBBID0gWDEqWDJcbiAgICAgICAgICAgIGNvbnN0IEIgPSBtb2RQKFkxICogWTIpOyAvLyBCID0gWTEqWTJcbiAgICAgICAgICAgIGNvbnN0IEMgPSBtb2RQKFQxICogZCAqIFQyKTsgLy8gQyA9IFQxKmQqVDJcbiAgICAgICAgICAgIGNvbnN0IEQgPSBtb2RQKFoxICogWjIpOyAvLyBEID0gWjEqWjJcbiAgICAgICAgICAgIGNvbnN0IEUgPSBtb2RQKChYMSArIFkxKSAqIChYMiArIFkyKSAtIEEgLSBCKTsgLy8gRSA9IChYMStZMSkqKFgyK1kyKS1BLUJcbiAgICAgICAgICAgIGNvbnN0IEYgPSBEIC0gQzsgLy8gRiA9IEQtQ1xuICAgICAgICAgICAgY29uc3QgRyA9IEQgKyBDOyAvLyBHID0gRCtDXG4gICAgICAgICAgICBjb25zdCBIID0gbW9kUChCIC0gYSAqIEEpOyAvLyBIID0gQi1hKkFcbiAgICAgICAgICAgIGNvbnN0IFgzID0gbW9kUChFICogRik7IC8vIFgzID0gRSpGXG4gICAgICAgICAgICBjb25zdCBZMyA9IG1vZFAoRyAqIEgpOyAvLyBZMyA9IEcqSFxuICAgICAgICAgICAgY29uc3QgVDMgPSBtb2RQKEUgKiBIKTsgLy8gVDMgPSBFKkhcbiAgICAgICAgICAgIGNvbnN0IFozID0gbW9kUChGICogRyk7IC8vIFozID0gRipHXG4gICAgICAgICAgICByZXR1cm4gbmV3IFBvaW50KFgzLCBZMywgWjMsIFQzKTtcbiAgICAgICAgfVxuICAgICAgICBzdWJ0cmFjdChvdGhlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkKG90aGVyLm5lZ2F0ZSgpKTtcbiAgICAgICAgfVxuICAgICAgICB3TkFGKG4pIHtcbiAgICAgICAgICAgIHJldHVybiB3bmFmLndOQUZDYWNoZWQodGhpcywgcG9pbnRQcmVjb21wdXRlcywgbiwgUG9pbnQubm9ybWFsaXplWik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ29uc3RhbnQtdGltZSBtdWx0aXBsaWNhdGlvbi5cbiAgICAgICAgbXVsdGlwbHkoc2NhbGFyKSB7XG4gICAgICAgICAgICBjb25zdCB7IHAsIGYgfSA9IHRoaXMud05BRihhc3NlcnRJblJhbmdlKHNjYWxhciwgQ1VSVkVfT1JERVIpKTtcbiAgICAgICAgICAgIHJldHVybiBQb2ludC5ub3JtYWxpemVaKFtwLCBmXSlbMF07XG4gICAgICAgIH1cbiAgICAgICAgLy8gTm9uLWNvbnN0YW50LXRpbWUgbXVsdGlwbGljYXRpb24uIFVzZXMgZG91YmxlLWFuZC1hZGQgYWxnb3JpdGhtLlxuICAgICAgICAvLyBJdCdzIGZhc3RlciwgYnV0IHNob3VsZCBvbmx5IGJlIHVzZWQgd2hlbiB5b3UgZG9uJ3QgY2FyZSBhYm91dFxuICAgICAgICAvLyBhbiBleHBvc2VkIHByaXZhdGUga2V5IGUuZy4gc2lnIHZlcmlmaWNhdGlvbi5cbiAgICAgICAgLy8gRG9lcyBOT1QgYWxsb3cgc2NhbGFycyBoaWdoZXIgdGhhbiBDVVJWRS5uLlxuICAgICAgICBtdWx0aXBseVVuc2FmZShzY2FsYXIpIHtcbiAgICAgICAgICAgIGxldCBuID0gYXNzZXJ0R0UwKHNjYWxhcik7IC8vIDAgPD0gc2NhbGFyIDwgQ1VSVkUublxuICAgICAgICAgICAgaWYgKG4gPT09IF8wbilcbiAgICAgICAgICAgICAgICByZXR1cm4gSTtcbiAgICAgICAgICAgIGlmICh0aGlzLmVxdWFscyhJKSB8fCBuID09PSBfMW4pXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICBpZiAodGhpcy5lcXVhbHMoRykpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMud05BRihuKS5wO1xuICAgICAgICAgICAgcmV0dXJuIHduYWYudW5zYWZlTGFkZGVyKHRoaXMsIG4pO1xuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNrcyBpZiBwb2ludCBpcyBvZiBzbWFsbCBvcmRlci5cbiAgICAgICAgLy8gSWYgeW91IGFkZCBzb21ldGhpbmcgdG8gc21hbGwgb3JkZXIgcG9pbnQsIHlvdSB3aWxsIGhhdmUgXCJkaXJ0eVwiXG4gICAgICAgIC8vIHBvaW50IHdpdGggdG9yc2lvbiBjb21wb25lbnQuXG4gICAgICAgIC8vIE11bHRpcGxpZXMgcG9pbnQgYnkgY29mYWN0b3IgYW5kIGNoZWNrcyBpZiB0aGUgcmVzdWx0IGlzIDAuXG4gICAgICAgIGlzU21hbGxPcmRlcigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm11bHRpcGx5VW5zYWZlKGNvZmFjdG9yKS5pczAoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBNdWx0aXBsaWVzIHBvaW50IGJ5IGN1cnZlIG9yZGVyIGFuZCBjaGVja3MgaWYgdGhlIHJlc3VsdCBpcyAwLlxuICAgICAgICAvLyBSZXR1cm5zIGBmYWxzZWAgaXMgdGhlIHBvaW50IGlzIGRpcnR5LlxuICAgICAgICBpc1RvcnNpb25GcmVlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHduYWYudW5zYWZlTGFkZGVyKHRoaXMsIENVUlZFX09SREVSKS5pczAoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDb252ZXJ0cyBFeHRlbmRlZCBwb2ludCB0byBkZWZhdWx0ICh4LCB5KSBjb29yZGluYXRlcy5cbiAgICAgICAgLy8gQ2FuIGFjY2VwdCBwcmVjb21wdXRlZCBaXi0xIC0gZm9yIGV4YW1wbGUsIGZyb20gaW52ZXJ0QmF0Y2guXG4gICAgICAgIHRvQWZmaW5lKGl6KSB7XG4gICAgICAgICAgICBjb25zdCB7IGV4OiB4LCBleTogeSwgZXo6IHogfSA9IHRoaXM7XG4gICAgICAgICAgICBjb25zdCBpczAgPSB0aGlzLmlzMCgpO1xuICAgICAgICAgICAgaWYgKGl6ID09IG51bGwpXG4gICAgICAgICAgICAgICAgaXogPSBpczAgPyBfOG4gOiBGcC5pbnYoeik7IC8vIDggd2FzIGNob3NlbiBhcmJpdHJhcmlseVxuICAgICAgICAgICAgY29uc3QgYXggPSBtb2RQKHggKiBpeik7XG4gICAgICAgICAgICBjb25zdCBheSA9IG1vZFAoeSAqIGl6KTtcbiAgICAgICAgICAgIGNvbnN0IHp6ID0gbW9kUCh6ICogaXopO1xuICAgICAgICAgICAgaWYgKGlzMClcbiAgICAgICAgICAgICAgICByZXR1cm4geyB4OiBfMG4sIHk6IF8xbiB9O1xuICAgICAgICAgICAgaWYgKHp6ICE9PSBfMW4pXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZaIHdhcyBpbnZhbGlkJyk7XG4gICAgICAgICAgICByZXR1cm4geyB4OiBheCwgeTogYXkgfTtcbiAgICAgICAgfVxuICAgICAgICBjbGVhckNvZmFjdG9yKCkge1xuICAgICAgICAgICAgY29uc3QgeyBoOiBjb2ZhY3RvciB9ID0gQ1VSVkU7XG4gICAgICAgICAgICBpZiAoY29mYWN0b3IgPT09IF8xbilcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm11bHRpcGx5VW5zYWZlKGNvZmFjdG9yKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDb252ZXJ0cyBoYXNoIHN0cmluZyBvciBVaW50OEFycmF5IHRvIFBvaW50LlxuICAgICAgICAvLyBVc2VzIGFsZ28gZnJvbSBSRkM4MDMyIDUuMS4zLlxuICAgICAgICBzdGF0aWMgZnJvbUhleChoZXgsIHppcDIxNSA9IGZhbHNlKSB7XG4gICAgICAgICAgICBjb25zdCB7IGQsIGEgfSA9IENVUlZFO1xuICAgICAgICAgICAgY29uc3QgbGVuID0gRnAuQllURVM7XG4gICAgICAgICAgICBoZXggPSBlbnN1cmVCeXRlcygncG9pbnRIZXgnLCBoZXgsIGxlbik7IC8vIGNvcHkgaGV4IHRvIGEgbmV3IGFycmF5XG4gICAgICAgICAgICBjb25zdCBub3JtZWQgPSBoZXguc2xpY2UoKTsgLy8gY29weSBhZ2Fpbiwgd2UnbGwgbWFuaXB1bGF0ZSBpdFxuICAgICAgICAgICAgY29uc3QgbGFzdEJ5dGUgPSBoZXhbbGVuIC0gMV07IC8vIHNlbGVjdCBsYXN0IGJ5dGVcbiAgICAgICAgICAgIG5vcm1lZFtsZW4gLSAxXSA9IGxhc3RCeXRlICYgfjB4ODA7IC8vIGNsZWFyIGxhc3QgYml0XG4gICAgICAgICAgICBjb25zdCB5ID0gdXQuYnl0ZXNUb051bWJlckxFKG5vcm1lZCk7XG4gICAgICAgICAgICBpZiAoeSA9PT0gXzBuKSB7XG4gICAgICAgICAgICAgICAgLy8geT0wIGlzIGFsbG93ZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFJGQzgwMzIgcHJvaGliaXRzID49IHAsIGJ1dCBaSVAyMTUgZG9lc24ndFxuICAgICAgICAgICAgICAgIGlmICh6aXAyMTUpXG4gICAgICAgICAgICAgICAgICAgIGFzc2VydEluUmFuZ2UoeSwgTUFTSyk7IC8vIHppcDIxNT10cnVlIFsxLi5QLTFdICgyXjI1NS0xOS0xIGZvciBlZDI1NTE5KVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0SW5SYW5nZSh5LCBGcC5PUkRFUik7IC8vIHppcDIxNT1mYWxzZSBbMS4uTUFTSy0xXSAoMl4yNTYtMSBmb3IgZWQyNTUxOSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEVkMjU1MTk6IHjCsiA9ICh5wrItMSkvKGR5wrIrMSkgbW9kIHAuIEVkNDQ4OiB4wrIgPSAoecKyLTEpLyhkecKyLTEpIG1vZCBwLiBHZW5lcmljIGNhc2U6XG4gICAgICAgICAgICAvLyBheMKyK3nCsj0xK2R4wrJ5wrIgPT4gecKyLTE9ZHjCsnnCsi1heMKyID0+IHnCsi0xPXjCsihkecKyLWEpID0+IHjCsj0oecKyLTEpLyhkecKyLWEpXG4gICAgICAgICAgICBjb25zdCB5MiA9IG1vZFAoeSAqIHkpOyAvLyBkZW5vbWluYXRvciBpcyBhbHdheXMgbm9uLTAgbW9kIHAuXG4gICAgICAgICAgICBjb25zdCB1ID0gbW9kUCh5MiAtIF8xbik7IC8vIHUgPSB5wrIgLSAxXG4gICAgICAgICAgICBjb25zdCB2ID0gbW9kUChkICogeTIgLSBhKTsgLy8gdiA9IGQgecKyICsgMS5cbiAgICAgICAgICAgIGxldCB7IGlzVmFsaWQsIHZhbHVlOiB4IH0gPSB1dlJhdGlvKHUsIHYpOyAvLyDiiJoodS92KVxuICAgICAgICAgICAgaWYgKCFpc1ZhbGlkKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUG9pbnQuZnJvbUhleDogaW52YWxpZCB5IGNvb3JkaW5hdGUnKTtcbiAgICAgICAgICAgIGNvbnN0IGlzWE9kZCA9ICh4ICYgXzFuKSA9PT0gXzFuOyAvLyBUaGVyZSBhcmUgMiBzcXVhcmUgcm9vdHMuIFVzZSB4XzAgYml0IHRvIHNlbGVjdCBwcm9wZXJcbiAgICAgICAgICAgIGNvbnN0IGlzTGFzdEJ5dGVPZGQgPSAobGFzdEJ5dGUgJiAweDgwKSAhPT0gMDsgLy8geF8wLCBsYXN0IGJpdFxuICAgICAgICAgICAgaWYgKCF6aXAyMTUgJiYgeCA9PT0gXzBuICYmIGlzTGFzdEJ5dGVPZGQpXG4gICAgICAgICAgICAgICAgLy8gaWYgeD0wIGFuZCB4XzAgPSAxLCBmYWlsXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQb2ludC5mcm9tSGV4OiB4PTAgYW5kIHhfMD0xJyk7XG4gICAgICAgICAgICBpZiAoaXNMYXN0Qnl0ZU9kZCAhPT0gaXNYT2RkKVxuICAgICAgICAgICAgICAgIHggPSBtb2RQKC14KTsgLy8gaWYgeF8wICE9IHggbW9kIDIsIHNldCB4ID0gcC14XG4gICAgICAgICAgICByZXR1cm4gUG9pbnQuZnJvbUFmZmluZSh7IHgsIHkgfSk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGljIGZyb21Qcml2YXRlS2V5KHByaXZLZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRFeHRlbmRlZFB1YmxpY0tleShwcml2S2V5KS5wb2ludDtcbiAgICAgICAgfVxuICAgICAgICB0b1Jhd0J5dGVzKCkge1xuICAgICAgICAgICAgY29uc3QgeyB4LCB5IH0gPSB0aGlzLnRvQWZmaW5lKCk7XG4gICAgICAgICAgICBjb25zdCBieXRlcyA9IHV0Lm51bWJlclRvQnl0ZXNMRSh5LCBGcC5CWVRFUyk7IC8vIGVhY2ggeSBoYXMgMiB4IHZhbHVlcyAoeCwgLXkpXG4gICAgICAgICAgICBieXRlc1tieXRlcy5sZW5ndGggLSAxXSB8PSB4ICYgXzFuID8gMHg4MCA6IDA7IC8vIHdoZW4gY29tcHJlc3NpbmcsIGl0J3MgZW5vdWdoIHRvIHN0b3JlIHlcbiAgICAgICAgICAgIHJldHVybiBieXRlczsgLy8gYW5kIHVzZSB0aGUgbGFzdCBieXRlIHRvIGVuY29kZSBzaWduIG9mIHhcbiAgICAgICAgfVxuICAgICAgICB0b0hleCgpIHtcbiAgICAgICAgICAgIHJldHVybiB1dC5ieXRlc1RvSGV4KHRoaXMudG9SYXdCeXRlcygpKTsgLy8gU2FtZSBhcyB0b1Jhd0J5dGVzLCBidXQgcmV0dXJucyBzdHJpbmcuXG4gICAgICAgIH1cbiAgICB9XG4gICAgUG9pbnQuQkFTRSA9IG5ldyBQb2ludChDVVJWRS5HeCwgQ1VSVkUuR3ksIF8xbiwgbW9kUChDVVJWRS5HeCAqIENVUlZFLkd5KSk7XG4gICAgUG9pbnQuWkVSTyA9IG5ldyBQb2ludChfMG4sIF8xbiwgXzFuLCBfMG4pOyAvLyAwLCAxLCAxLCAwXG4gICAgY29uc3QgeyBCQVNFOiBHLCBaRVJPOiBJIH0gPSBQb2ludDtcbiAgICBjb25zdCB3bmFmID0gd05BRihQb2ludCwgbkJ5dGVMZW5ndGggKiA4KTtcbiAgICBmdW5jdGlvbiBtb2ROKGEpIHtcbiAgICAgICAgcmV0dXJuIG1vZChhLCBDVVJWRV9PUkRFUik7XG4gICAgfVxuICAgIC8vIExpdHRsZS1lbmRpYW4gU0hBNTEyIHdpdGggbW9kdWxvIG5cbiAgICBmdW5jdGlvbiBtb2ROX0xFKGhhc2gpIHtcbiAgICAgICAgcmV0dXJuIG1vZE4odXQuYnl0ZXNUb051bWJlckxFKGhhc2gpKTtcbiAgICB9XG4gICAgLyoqIENvbnZlbmllbmNlIG1ldGhvZCB0aGF0IGNyZWF0ZXMgcHVibGljIGtleSBhbmQgb3RoZXIgc3R1ZmYuIFJGQzgwMzIgNS4xLjUgKi9cbiAgICBmdW5jdGlvbiBnZXRFeHRlbmRlZFB1YmxpY0tleShrZXkpIHtcbiAgICAgICAgY29uc3QgbGVuID0gbkJ5dGVMZW5ndGg7XG4gICAgICAgIGtleSA9IGVuc3VyZUJ5dGVzKCdwcml2YXRlIGtleScsIGtleSwgbGVuKTtcbiAgICAgICAgLy8gSGFzaCBwcml2YXRlIGtleSB3aXRoIGN1cnZlJ3MgaGFzaCBmdW5jdGlvbiB0byBwcm9kdWNlIHVuaWZvcm1pbmdseSByYW5kb20gaW5wdXRcbiAgICAgICAgLy8gQ2hlY2sgYnl0ZSBsZW5ndGhzOiBlbnN1cmUoNjQsIGgoZW5zdXJlKDMyLCBrZXkpKSlcbiAgICAgICAgY29uc3QgaGFzaGVkID0gZW5zdXJlQnl0ZXMoJ2hhc2hlZCBwcml2YXRlIGtleScsIGNIYXNoKGtleSksIDIgKiBsZW4pO1xuICAgICAgICBjb25zdCBoZWFkID0gYWRqdXN0U2NhbGFyQnl0ZXMoaGFzaGVkLnNsaWNlKDAsIGxlbikpOyAvLyBjbGVhciBmaXJzdCBoYWxmIGJpdHMsIHByb2R1Y2UgRkVcbiAgICAgICAgY29uc3QgcHJlZml4ID0gaGFzaGVkLnNsaWNlKGxlbiwgMiAqIGxlbik7IC8vIHNlY29uZCBoYWxmIGlzIGNhbGxlZCBrZXkgcHJlZml4ICg1LjEuNilcbiAgICAgICAgY29uc3Qgc2NhbGFyID0gbW9kTl9MRShoZWFkKTsgLy8gVGhlIGFjdHVhbCBwcml2YXRlIHNjYWxhclxuICAgICAgICBjb25zdCBwb2ludCA9IEcubXVsdGlwbHkoc2NhbGFyKTsgLy8gUG9pbnQgb24gRWR3YXJkcyBjdXJ2ZSBha2EgcHVibGljIGtleVxuICAgICAgICBjb25zdCBwb2ludEJ5dGVzID0gcG9pbnQudG9SYXdCeXRlcygpOyAvLyBVaW50OEFycmF5IHJlcHJlc2VudGF0aW9uXG4gICAgICAgIHJldHVybiB7IGhlYWQsIHByZWZpeCwgc2NhbGFyLCBwb2ludCwgcG9pbnRCeXRlcyB9O1xuICAgIH1cbiAgICAvLyBDYWxjdWxhdGVzIEVkRFNBIHB1YiBrZXkuIFJGQzgwMzIgNS4xLjUuIFByaXZrZXkgaXMgaGFzaGVkLiBVc2UgZmlyc3QgaGFsZiB3aXRoIDMgYml0cyBjbGVhcmVkXG4gICAgZnVuY3Rpb24gZ2V0UHVibGljS2V5KHByaXZLZXkpIHtcbiAgICAgICAgcmV0dXJuIGdldEV4dGVuZGVkUHVibGljS2V5KHByaXZLZXkpLnBvaW50Qnl0ZXM7XG4gICAgfVxuICAgIC8vIGludCgnTEUnLCBTSEE1MTIoZG9tMihGLCBDKSB8fCBtc2dzKSkgbW9kIE5cbiAgICBmdW5jdGlvbiBoYXNoRG9tYWluVG9TY2FsYXIoY29udGV4dCA9IG5ldyBVaW50OEFycmF5KCksIC4uLm1zZ3MpIHtcbiAgICAgICAgY29uc3QgbXNnID0gdXQuY29uY2F0Qnl0ZXMoLi4ubXNncyk7XG4gICAgICAgIHJldHVybiBtb2ROX0xFKGNIYXNoKGRvbWFpbihtc2csIGVuc3VyZUJ5dGVzKCdjb250ZXh0JywgY29udGV4dCksICEhcHJlaGFzaCkpKTtcbiAgICB9XG4gICAgLyoqIFNpZ25zIG1lc3NhZ2Ugd2l0aCBwcml2YXRlS2V5LiBSRkM4MDMyIDUuMS42ICovXG4gICAgZnVuY3Rpb24gc2lnbihtc2csIHByaXZLZXksIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBtc2cgPSBlbnN1cmVCeXRlcygnbWVzc2FnZScsIG1zZyk7XG4gICAgICAgIGlmIChwcmVoYXNoKVxuICAgICAgICAgICAgbXNnID0gcHJlaGFzaChtc2cpOyAvLyBmb3IgZWQyNTUxOXBoIGV0Yy5cbiAgICAgICAgY29uc3QgeyBwcmVmaXgsIHNjYWxhciwgcG9pbnRCeXRlcyB9ID0gZ2V0RXh0ZW5kZWRQdWJsaWNLZXkocHJpdktleSk7XG4gICAgICAgIGNvbnN0IHIgPSBoYXNoRG9tYWluVG9TY2FsYXIob3B0aW9ucy5jb250ZXh0LCBwcmVmaXgsIG1zZyk7IC8vIHIgPSBkb20yKEYsIEMpIHx8IHByZWZpeCB8fCBQSChNKVxuICAgICAgICBjb25zdCBSID0gRy5tdWx0aXBseShyKS50b1Jhd0J5dGVzKCk7IC8vIFIgPSByR1xuICAgICAgICBjb25zdCBrID0gaGFzaERvbWFpblRvU2NhbGFyKG9wdGlvbnMuY29udGV4dCwgUiwgcG9pbnRCeXRlcywgbXNnKTsgLy8gUiB8fCBBIHx8IFBIKE0pXG4gICAgICAgIGNvbnN0IHMgPSBtb2ROKHIgKyBrICogc2NhbGFyKTsgLy8gUyA9IChyICsgayAqIHMpIG1vZCBMXG4gICAgICAgIGFzc2VydEdFMChzKTsgLy8gMCA8PSBzIDwgbFxuICAgICAgICBjb25zdCByZXMgPSB1dC5jb25jYXRCeXRlcyhSLCB1dC5udW1iZXJUb0J5dGVzTEUocywgRnAuQllURVMpKTtcbiAgICAgICAgcmV0dXJuIGVuc3VyZUJ5dGVzKCdyZXN1bHQnLCByZXMsIG5CeXRlTGVuZ3RoICogMik7IC8vIDY0LWJ5dGUgc2lnbmF0dXJlXG4gICAgfVxuICAgIGNvbnN0IHZlcmlmeU9wdHMgPSBWRVJJRllfREVGQVVMVDtcbiAgICBmdW5jdGlvbiB2ZXJpZnkoc2lnLCBtc2csIHB1YmxpY0tleSwgb3B0aW9ucyA9IHZlcmlmeU9wdHMpIHtcbiAgICAgICAgY29uc3QgeyBjb250ZXh0LCB6aXAyMTUgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGxlbiA9IEZwLkJZVEVTOyAvLyBWZXJpZmllcyBFZERTQSBzaWduYXR1cmUgYWdhaW5zdCBtZXNzYWdlIGFuZCBwdWJsaWMga2V5LiBSRkM4MDMyIDUuMS43LlxuICAgICAgICBzaWcgPSBlbnN1cmVCeXRlcygnc2lnbmF0dXJlJywgc2lnLCAyICogbGVuKTsgLy8gQW4gZXh0ZW5kZWQgZ3JvdXAgZXF1YXRpb24gaXMgY2hlY2tlZC5cbiAgICAgICAgbXNnID0gZW5zdXJlQnl0ZXMoJ21lc3NhZ2UnLCBtc2cpO1xuICAgICAgICBpZiAocHJlaGFzaClcbiAgICAgICAgICAgIG1zZyA9IHByZWhhc2gobXNnKTsgLy8gZm9yIGVkMjU1MTlwaCwgZXRjXG4gICAgICAgIGNvbnN0IHMgPSB1dC5ieXRlc1RvTnVtYmVyTEUoc2lnLnNsaWNlKGxlbiwgMiAqIGxlbikpO1xuICAgICAgICAvLyB6aXAyMTU6IHRydWUgaXMgZ29vZCBmb3IgY29uc2Vuc3VzLWNyaXRpY2FsIGFwcHMgYW5kIGFsbG93cyBwb2ludHMgPCAyXjI1NlxuICAgICAgICAvLyB6aXAyMTU6IGZhbHNlIGZvbGxvd3MgUkZDODAzMiAvIE5JU1QxODYtNSBhbmQgcmVzdHJpY3RzIHBvaW50cyB0byBDVVJWRS5wXG4gICAgICAgIGxldCBBLCBSLCBTQjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIEEgPSBQb2ludC5mcm9tSGV4KHB1YmxpY0tleSwgemlwMjE1KTtcbiAgICAgICAgICAgIFIgPSBQb2ludC5mcm9tSGV4KHNpZy5zbGljZSgwLCBsZW4pLCB6aXAyMTUpO1xuICAgICAgICAgICAgU0IgPSBHLm11bHRpcGx5VW5zYWZlKHMpOyAvLyAwIDw9IHMgPCBsIGlzIGRvbmUgaW5zaWRlXG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF6aXAyMTUgJiYgQS5pc1NtYWxsT3JkZXIoKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc3QgayA9IGhhc2hEb21haW5Ub1NjYWxhcihjb250ZXh0LCBSLnRvUmF3Qnl0ZXMoKSwgQS50b1Jhd0J5dGVzKCksIG1zZyk7XG4gICAgICAgIGNvbnN0IFJrQSA9IFIuYWRkKEEubXVsdGlwbHlVbnNhZmUoaykpO1xuICAgICAgICAvLyBbOF1bU11CID0gWzhdUiArIFs4XVtrXUEnXG4gICAgICAgIHJldHVybiBSa0Euc3VidHJhY3QoU0IpLmNsZWFyQ29mYWN0b3IoKS5lcXVhbHMoUG9pbnQuWkVSTyk7XG4gICAgfVxuICAgIEcuX3NldFdpbmRvd1NpemUoOCk7IC8vIEVuYWJsZSBwcmVjb21wdXRlcy4gU2xvd3MgZG93biBmaXJzdCBwdWJsaWNLZXkgY29tcHV0YXRpb24gYnkgMjBtcy5cbiAgICBjb25zdCB1dGlscyA9IHtcbiAgICAgICAgZ2V0RXh0ZW5kZWRQdWJsaWNLZXksXG4gICAgICAgIC8vIGVkMjU1MTkgcHJpdmF0ZSBrZXlzIGFyZSB1bmlmb3JtIDMyYi4gTm8gbmVlZCB0byBjaGVjayBmb3IgbW9kdWxvIGJpYXMsIGxpa2UgaW4gc2VjcDI1NmsxLlxuICAgICAgICByYW5kb21Qcml2YXRlS2V5OiAoKSA9PiByYW5kb21CeXRlcyhGcC5CWVRFUyksXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXZSdyZSBkb2luZyBzY2FsYXIgbXVsdGlwbGljYXRpb24gKHVzZWQgaW4gZ2V0UHVibGljS2V5IGV0Yykgd2l0aCBwcmVjb21wdXRlZCBCQVNFX1BPSU5UXG4gICAgICAgICAqIHZhbHVlcy4gVGhpcyBzbG93cyBkb3duIGZpcnN0IGdldFB1YmxpY0tleSgpIGJ5IG1pbGxpc2Vjb25kcyAoc2VlIFNwZWVkIHNlY3Rpb24pLFxuICAgICAgICAgKiBidXQgYWxsb3dzIHRvIHNwZWVkLXVwIHN1YnNlcXVlbnQgZ2V0UHVibGljS2V5KCkgY2FsbHMgdXAgdG8gMjB4LlxuICAgICAgICAgKiBAcGFyYW0gd2luZG93U2l6ZSAyLCA0LCA4LCAxNlxuICAgICAgICAgKi9cbiAgICAgICAgcHJlY29tcHV0ZSh3aW5kb3dTaXplID0gOCwgcG9pbnQgPSBQb2ludC5CQVNFKSB7XG4gICAgICAgICAgICBwb2ludC5fc2V0V2luZG93U2l6ZSh3aW5kb3dTaXplKTtcbiAgICAgICAgICAgIHBvaW50Lm11bHRpcGx5KEJpZ0ludCgzKSk7XG4gICAgICAgICAgICByZXR1cm4gcG9pbnQ7XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICBDVVJWRSxcbiAgICAgICAgZ2V0UHVibGljS2V5LFxuICAgICAgICBzaWduLFxuICAgICAgICB2ZXJpZnksXG4gICAgICAgIEV4dGVuZGVkUG9pbnQ6IFBvaW50LFxuICAgICAgICB1dGlscyxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWR3YXJkcy5qcy5tYXAiXSwibmFtZXMiOlsibW9kIiwidXQiLCJlbnN1cmVCeXRlcyIsIndOQUYiLCJ2YWxpZGF0ZUJhc2ljIiwiXzBuIiwiQmlnSW50IiwiXzFuIiwiXzJuIiwiXzhuIiwiVkVSSUZZX0RFRkFVTFQiLCJ6aXAyMTUiLCJ2YWxpZGF0ZU9wdHMiLCJjdXJ2ZSIsIm9wdHMiLCJ2YWxpZGF0ZU9iamVjdCIsImhhc2giLCJhIiwiZCIsInJhbmRvbUJ5dGVzIiwiYWRqdXN0U2NhbGFyQnl0ZXMiLCJkb21haW4iLCJ1dlJhdGlvIiwibWFwVG9DdXJ2ZSIsIk9iamVjdCIsImZyZWV6ZSIsInR3aXN0ZWRFZHdhcmRzIiwiY3VydmVEZWYiLCJDVVJWRSIsIkZwIiwibiIsIkNVUlZFX09SREVSIiwicHJlaGFzaCIsImNIYXNoIiwibkJ5dGVMZW5ndGgiLCJoIiwiY29mYWN0b3IiLCJNQVNLIiwibW9kUCIsImNyZWF0ZSIsInUiLCJ2IiwiaXNWYWxpZCIsInZhbHVlIiwic3FydCIsImludiIsImUiLCJieXRlcyIsImRhdGEiLCJjdHgiLCJwaGZsYWciLCJsZW5ndGgiLCJFcnJvciIsImluQmlnIiwiaW5SYW5nZSIsIm1heCIsImluME1hc2tSYW5nZSIsImFzc2VydEluUmFuZ2UiLCJhc3NlcnRHRTAiLCJwb2ludFByZWNvbXB1dGVzIiwiTWFwIiwiaXNQb2ludCIsIm90aGVyIiwiUG9pbnQiLCJjb25zdHJ1Y3RvciIsImV4IiwiZXkiLCJleiIsImV0IiwieCIsInRvQWZmaW5lIiwieSIsImZyb21BZmZpbmUiLCJwIiwibm9ybWFsaXplWiIsInBvaW50cyIsInRvSW52IiwiaW52ZXJ0QmF0Y2giLCJtYXAiLCJpIiwiX3NldFdpbmRvd1NpemUiLCJ3aW5kb3dTaXplIiwiX1dJTkRPV19TSVpFIiwiZGVsZXRlIiwiYXNzZXJ0VmFsaWRpdHkiLCJpczAiLCJYIiwiWSIsIloiLCJUIiwiWDIiLCJZMiIsIloyIiwiWjQiLCJhWDIiLCJsZWZ0IiwicmlnaHQiLCJYWSIsIlpUIiwiZXF1YWxzIiwiWDEiLCJZMSIsIloxIiwiWDFaMiIsIlgyWjEiLCJZMVoyIiwiWTJaMSIsIlpFUk8iLCJuZWdhdGUiLCJkb3VibGUiLCJBIiwiQiIsIkMiLCJEIiwieDF5MSIsIkUiLCJHIiwiRiIsIkgiLCJYMyIsIlkzIiwiVDMiLCJaMyIsImFkZCIsIlQxIiwiVDIiLCJzdWJ0cmFjdCIsInduYWYiLCJ3TkFGQ2FjaGVkIiwibXVsdGlwbHkiLCJzY2FsYXIiLCJmIiwibXVsdGlwbHlVbnNhZmUiLCJJIiwidW5zYWZlTGFkZGVyIiwiaXNTbWFsbE9yZGVyIiwiaXNUb3JzaW9uRnJlZSIsIml6IiwieiIsImF4IiwiYXkiLCJ6eiIsImNsZWFyQ29mYWN0b3IiLCJmcm9tSGV4IiwiaGV4IiwibGVuIiwiQllURVMiLCJub3JtZWQiLCJzbGljZSIsImxhc3RCeXRlIiwiYnl0ZXNUb051bWJlckxFIiwiT1JERVIiLCJ5MiIsImlzWE9kZCIsImlzTGFzdEJ5dGVPZGQiLCJmcm9tUHJpdmF0ZUtleSIsInByaXZLZXkiLCJnZXRFeHRlbmRlZFB1YmxpY0tleSIsInBvaW50IiwidG9SYXdCeXRlcyIsIm51bWJlclRvQnl0ZXNMRSIsInRvSGV4IiwiYnl0ZXNUb0hleCIsIkJBU0UiLCJHeCIsIkd5IiwibW9kTiIsIm1vZE5fTEUiLCJrZXkiLCJoYXNoZWQiLCJoZWFkIiwicHJlZml4IiwicG9pbnRCeXRlcyIsImdldFB1YmxpY0tleSIsImhhc2hEb21haW5Ub1NjYWxhciIsImNvbnRleHQiLCJVaW50OEFycmF5IiwibXNncyIsIm1zZyIsImNvbmNhdEJ5dGVzIiwic2lnbiIsIm9wdGlvbnMiLCJyIiwiUiIsImsiLCJzIiwicmVzIiwidmVyaWZ5T3B0cyIsInZlcmlmeSIsInNpZyIsInB1YmxpY0tleSIsIlNCIiwiZXJyb3IiLCJSa0EiLCJ1dGlscyIsInJhbmRvbVByaXZhdGVLZXkiLCJwcmVjb21wdXRlIiwiRXh0ZW5kZWRQb2ludCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/edwards.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/hash-to-curve.js":
/*!************************************************************************************!*\
  !*** ./node_modules/frog/node_modules/@noble/curves/esm/abstract/hash-to-curve.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHasher: () => (/* binding */ createHasher),\n/* harmony export */   expand_message_xmd: () => (/* binding */ expand_message_xmd),\n/* harmony export */   expand_message_xof: () => (/* binding */ expand_message_xof),\n/* harmony export */   hash_to_field: () => (/* binding */ hash_to_field),\n/* harmony export */   isogenyMap: () => (/* binding */ isogenyMap)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modular.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/utils.js\");\n\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = _utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n    if (value < 0 || value >= 1 << 8 * length) {\n        throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n    }\n    const res = Array.from({\n        length\n    }).fill(0);\n    for(let i = length - 1; i >= 0; i--){\n        res[i] = value & 0xff;\n        value >>>= 8;\n    }\n    return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n    const arr = new Uint8Array(a.length);\n    for(let i = 0; i < a.length; i++){\n        arr[i] = a[i] ^ b[i];\n    }\n    return arr;\n}\nfunction anum(item) {\n    if (!Number.isSafeInteger(item)) throw new Error(\"number expected\");\n}\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\nfunction expand_message_xmd(msg, DST, lenInBytes, H) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(msg);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    if (DST.length > 255) DST = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(\"H2C-OVERSIZE-DST-\"), DST));\n    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (ell > 255) throw new Error(\"Invalid xmd length\");\n    const DST_prime = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(DST, i2osp(DST.length, 1));\n    const Z_pad = i2osp(0, r_in_bytes);\n    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n    const b = new Array(ell);\n    const b_0 = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n    b[0] = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(b_0, i2osp(1, 1), DST_prime));\n    for(let i = 1; i <= ell; i++){\n        const args = [\n            strxor(b_0, b[i - 1]),\n            i2osp(i + 1, 1),\n            DST_prime\n        ];\n        b[i] = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(...args));\n    }\n    const pseudo_random_bytes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n}\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\n// 1. The collision resistance of H MUST be at least k bits.\n// 2. H MUST be an XOF that has been proved indifferentiable from\n//    a random oracle under a reasonable cryptographic assumption.\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\nfunction expand_message_xof(msg, DST, lenInBytes, k, H) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(msg);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n    if (DST.length > 255) {\n        const dkLen = Math.ceil(2 * k / 8);\n        DST = H.create({\n            dkLen\n        }).update((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(\"H2C-OVERSIZE-DST-\")).update(DST).digest();\n    }\n    if (lenInBytes > 65535 || DST.length > 255) throw new Error(\"expand_message_xof: invalid lenInBytes\");\n    return H.create({\n        dkLen: lenInBytes\n    }).update(msg).update(i2osp(lenInBytes, 2))// 2. DST_prime = DST || I2OSP(len(DST), 1)\n    .update(DST).update(i2osp(DST.length, 1)).digest();\n}\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */ function hash_to_field(msg, count, options) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.validateObject)(options, {\n        DST: \"stringOrUint8Array\",\n        p: \"bigint\",\n        m: \"isSafeInteger\",\n        k: \"isSafeInteger\",\n        hash: \"hash\"\n    });\n    const { p, k, m, hash, expand, DST: _DST } = options;\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(msg);\n    anum(count);\n    const DST = typeof _DST === \"string\" ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(_DST) : _DST;\n    const log2p = p.toString(2).length;\n    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n    const len_in_bytes = count * m * L;\n    let prb; // pseudo_random_bytes\n    if (expand === \"xmd\") {\n        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n    } else if (expand === \"xof\") {\n        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n    } else if (expand === \"_internal_pass\") {\n        // for internal tests only\n        prb = msg;\n    } else {\n        throw new Error('expand must be \"xmd\" or \"xof\"');\n    }\n    const u = new Array(count);\n    for(let i = 0; i < count; i++){\n        const e = new Array(m);\n        for(let j = 0; j < m; j++){\n            const elm_offset = L * (j + i * m);\n            const tv = prb.subarray(elm_offset, elm_offset + L);\n            e[j] = (0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.mod)(os2ip(tv), p);\n        }\n        u[i] = e;\n    }\n    return u;\n}\nfunction isogenyMap(field, map) {\n    // Make same order as in spec\n    const COEFF = map.map((i)=>Array.from(i).reverse());\n    return (x, y)=>{\n        const [xNum, xDen, yNum, yDen] = COEFF.map((val)=>val.reduce((acc, i)=>field.add(field.mul(acc, x), i)));\n        x = field.div(xNum, xDen); // xNum / xDen\n        y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n        return {\n            x,\n            y\n        };\n    };\n}\nfunction createHasher(Point, mapToCurve, def) {\n    if (typeof mapToCurve !== \"function\") throw new Error(\"mapToCurve() must be defined\");\n    return {\n        // Encodes byte string to elliptic curve.\n        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        hashToCurve (msg, options) {\n            const u = hash_to_field(msg, 2, {\n                ...def,\n                DST: def.DST,\n                ...options\n            });\n            const u0 = Point.fromAffine(mapToCurve(u[0]));\n            const u1 = Point.fromAffine(mapToCurve(u[1]));\n            const P = u0.add(u1).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n        // Encodes byte string to elliptic curve.\n        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        encodeToCurve (msg, options) {\n            const u = hash_to_field(msg, 1, {\n                ...def,\n                DST: def.encodeDST,\n                ...options\n            });\n            const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n            P.assertValidity();\n            return P;\n        }\n    };\n} //# sourceMappingURL=hash-to-curve.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/hash-to-curve.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/modular.js":
/*!******************************************************************************!*\
  !*** ./node_modules/frog/node_modules/@noble/curves/esm/abstract/modular.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Field: () => (/* binding */ Field),\n/* harmony export */   FpDiv: () => (/* binding */ FpDiv),\n/* harmony export */   FpInvertBatch: () => (/* binding */ FpInvertBatch),\n/* harmony export */   FpIsSquare: () => (/* binding */ FpIsSquare),\n/* harmony export */   FpPow: () => (/* binding */ FpPow),\n/* harmony export */   FpSqrt: () => (/* binding */ FpSqrt),\n/* harmony export */   FpSqrtEven: () => (/* binding */ FpSqrtEven),\n/* harmony export */   FpSqrtOdd: () => (/* binding */ FpSqrtOdd),\n/* harmony export */   getFieldBytesLength: () => (/* binding */ getFieldBytesLength),\n/* harmony export */   getMinHashLength: () => (/* binding */ getMinHashLength),\n/* harmony export */   hashToPrivateScalar: () => (/* binding */ hashToPrivateScalar),\n/* harmony export */   invert: () => (/* binding */ invert),\n/* harmony export */   isNegativeLE: () => (/* binding */ isNegativeLE),\n/* harmony export */   mapHashToField: () => (/* binding */ mapHashToField),\n/* harmony export */   mod: () => (/* binding */ mod),\n/* harmony export */   nLength: () => (/* binding */ nLength),\n/* harmony export */   pow: () => (/* binding */ pow),\n/* harmony export */   pow2: () => (/* binding */ pow2),\n/* harmony export */   tonelliShanks: () => (/* binding */ tonelliShanks),\n/* harmony export */   validateField: () => (/* binding */ validateField)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/utils.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // Utilities for modular arithmetics and finite fields\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nfunction mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */ // TODO: use field version && remove\nfunction pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n) throw new Error(\"Expected power/modulo > 0\");\n    if (modulo === _1n) return _0n;\n    let res = _1n;\n    while(power > _0n){\n        if (power & _1n) res = res * num % modulo;\n        num = num * num % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nfunction pow2(x, power, modulo) {\n    let res = x;\n    while(power-- > _0n){\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nfunction invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while(a !== _0n){\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n) throw new Error(\"invert: does not exist\");\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */ function tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for(Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for(Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n)) throw new Error(\"Cannot find square root\");\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error(\"Cannot find square root\");\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while(!Fp.eql(b, Fp.ONE)){\n            if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for(let t2 = Fp.sqr(b); m < r; m++){\n                if (Fp.eql(t2, Fp.ONE)) break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nfunction FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n)) throw new Error(\"Cannot find square root\");\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n)) throw new Error(\"Cannot find square root\");\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nconst isNegativeLE = (num, modulo)=>(mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    \"create\",\n    \"isValid\",\n    \"is0\",\n    \"neg\",\n    \"inv\",\n    \"sqrt\",\n    \"sqr\",\n    \"eql\",\n    \"add\",\n    \"sub\",\n    \"mul\",\n    \"pow\",\n    \"div\",\n    \"addN\",\n    \"subN\",\n    \"mulN\",\n    \"sqrN\"\n];\nfunction validateField(field) {\n    const initial = {\n        ORDER: \"bigint\",\n        MASK: \"bigint\",\n        BYTES: \"isSafeInteger\",\n        BITS: \"isSafeInteger\"\n    };\n    const opts = FIELD_FIELDS.reduce((map, val)=>{\n        map[val] = \"function\";\n        return map;\n    }, initial);\n    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.validateObject)(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */ function FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n) throw new Error(\"Expected power > 0\");\n    if (power === _0n) return f.ONE;\n    if (power === _1n) return num;\n    let p = f.ONE;\n    let d = num;\n    while(power > _0n){\n        if (power & _1n) p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */ function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i)=>{\n        if (f.is0(num)) return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i)=>{\n        if (f.is0(num)) return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nfunction FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === \"bigint\" ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n// This function returns True whenever the value x is a square in the field F.\nfunction FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x)=>{\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nfunction nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return {\n        nBitLength: _nBitLength,\n        nByteLength\n    };\n}\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */ function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048) throw new Error(\"Field lengths over 2048 bytes are not supported\");\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bitMask)(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num)=>mod(num, ORDER),\n        isValid: (num)=>{\n            if (typeof num !== \"bigint\") throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num)=>num === _0n,\n        isOdd: (num)=>(num & _1n) === _1n,\n        neg: (num)=>mod(-num, ORDER),\n        eql: (lhs, rhs)=>lhs === rhs,\n        sqr: (num)=>mod(num * num, ORDER),\n        add: (lhs, rhs)=>mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs)=>mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs)=>mod(lhs * rhs, ORDER),\n        pow: (num, power)=>FpPow(f, num, power),\n        div: (lhs, rhs)=>mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num)=>num * num,\n        addN: (lhs, rhs)=>lhs + rhs,\n        subN: (lhs, rhs)=>lhs - rhs,\n        mulN: (lhs, rhs)=>lhs * rhs,\n        inv: (num)=>invert(num, ORDER),\n        sqrt: redef.sqrt || ((n)=>sqrtP(f, n)),\n        invertBatch: (lst)=>FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c)=>c ? b : a,\n        toBytes: (num)=>isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesLE)(num, BYTES) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(num, BYTES),\n        fromBytes: (bytes)=>{\n            if (bytes.length !== BYTES) throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(bytes) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(bytes);\n        }\n    });\n    return Object.freeze(f);\n}\nfunction FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nfunction FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */ function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)(\"privateHash\", hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024) throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(hash) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */ function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== \"bigint\") throw new Error(\"field order must be bigint\");\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */ function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */ function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024) throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(key) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesLE)(reduced, fieldLen) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(reduced, fieldLen);\n} //# sourceMappingURL=modular.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/modular.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/montgomery.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/frog/node_modules/@noble/curves/esm/abstract/montgomery.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   montgomery: () => (/* binding */ montgomery)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modular.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/utils.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ \n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nfunction validateOpts(curve) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.validateObject)(curve, {\n        a: \"bigint\"\n    }, {\n        montgomeryBits: \"isSafeInteger\",\n        nByteLength: \"isSafeInteger\",\n        adjustScalarBytes: \"function\",\n        domain: \"function\",\n        powPminus2: \"function\",\n        Gu: \"bigint\"\n    });\n    // Set defaults\n    return Object.freeze({\n        ...curve\n    });\n}\n// NOTE: not really montgomery curve, just bunch of very specific methods for X25519/X448 (RFC 7748, https://www.rfc-editor.org/rfc/rfc7748)\n// Uses only one coordinate instead of two\nfunction montgomery(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { P } = CURVE;\n    const modP = (n)=>(0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.mod)(n, P);\n    const montgomeryBits = CURVE.montgomeryBits;\n    const montgomeryBytes = Math.ceil(montgomeryBits / 8);\n    const fieldLen = CURVE.nByteLength;\n    const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes)=>bytes);\n    const powPminus2 = CURVE.powPminus2 || ((x)=>(0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.pow)(x, P - BigInt(2), P));\n    // cswap from RFC7748. But it is not from RFC7748!\n    /*\n      cswap(swap, x_2, x_3):\n           dummy = mask(swap) AND (x_2 XOR x_3)\n           x_2 = x_2 XOR dummy\n           x_3 = x_3 XOR dummy\n           Return (x_2, x_3)\n    Where mask(swap) is the all-1 or all-0 word of the same length as x_2\n     and x_3, computed, e.g., as mask(swap) = 0 - swap.\n    */ function cswap(swap, x_2, x_3) {\n        const dummy = modP(swap * (x_2 - x_3));\n        x_2 = modP(x_2 - dummy);\n        x_3 = modP(x_3 + dummy);\n        return [\n            x_2,\n            x_3\n        ];\n    }\n    // Accepts 0 as well\n    function assertFieldElement(n) {\n        if (typeof n === \"bigint\" && _0n <= n && n < P) return n;\n        throw new Error(\"Expected valid scalar 0 < scalar < CURVE.P\");\n    }\n    // x25519 from 4\n    // The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519\n    const a24 = (CURVE.a - BigInt(2)) / BigInt(4);\n    /**\n     *\n     * @param pointU u coordinate (x) on Montgomery Curve 25519\n     * @param scalar by which the point would be multiplied\n     * @returns new Point on Montgomery curve\n     */ function montgomeryLadder(pointU, scalar) {\n        const u = assertFieldElement(pointU);\n        // Section 5: Implementations MUST accept non-canonical values and process them as\n        // if they had been reduced modulo the field prime.\n        const k = assertFieldElement(scalar);\n        const x_1 = u;\n        let x_2 = _1n;\n        let z_2 = _0n;\n        let x_3 = u;\n        let z_3 = _1n;\n        let swap = _0n;\n        let sw;\n        for(let t = BigInt(montgomeryBits - 1); t >= _0n; t--){\n            const k_t = k >> t & _1n;\n            swap ^= k_t;\n            sw = cswap(swap, x_2, x_3);\n            x_2 = sw[0];\n            x_3 = sw[1];\n            sw = cswap(swap, z_2, z_3);\n            z_2 = sw[0];\n            z_3 = sw[1];\n            swap = k_t;\n            const A = x_2 + z_2;\n            const AA = modP(A * A);\n            const B = x_2 - z_2;\n            const BB = modP(B * B);\n            const E = AA - BB;\n            const C = x_3 + z_3;\n            const D = x_3 - z_3;\n            const DA = modP(D * A);\n            const CB = modP(C * B);\n            const dacb = DA + CB;\n            const da_cb = DA - CB;\n            x_3 = modP(dacb * dacb);\n            z_3 = modP(x_1 * modP(da_cb * da_cb));\n            x_2 = modP(AA * BB);\n            z_2 = modP(E * (AA + modP(a24 * E)));\n        }\n        // (x_2, x_3) = cswap(swap, x_2, x_3)\n        sw = cswap(swap, x_2, x_3);\n        x_2 = sw[0];\n        x_3 = sw[1];\n        // (z_2, z_3) = cswap(swap, z_2, z_3)\n        sw = cswap(swap, z_2, z_3);\n        z_2 = sw[0];\n        z_3 = sw[1];\n        // z_2^(p - 2)\n        const z2 = powPminus2(z_2);\n        // Return x_2 * (z_2^(p - 2))\n        return modP(x_2 * z2);\n    }\n    function encodeUCoordinate(u) {\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesLE)(modP(u), montgomeryBytes);\n    }\n    function decodeUCoordinate(uEnc) {\n        // Section 5: When receiving such an array, implementations of X25519\n        // MUST mask the most significant bit in the final byte.\n        const u = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)(\"u coordinate\", uEnc, montgomeryBytes);\n        if (fieldLen === 32) u[31] &= 127; // 0b0111_1111\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(u);\n    }\n    function decodeScalar(n) {\n        const bytes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)(\"scalar\", n);\n        const len = bytes.length;\n        if (len !== montgomeryBytes && len !== fieldLen) throw new Error(`Expected ${montgomeryBytes} or ${fieldLen} bytes, got ${len}`);\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(adjustScalarBytes(bytes));\n    }\n    function scalarMult(scalar, u) {\n        const pointU = decodeUCoordinate(u);\n        const _scalar = decodeScalar(scalar);\n        const pu = montgomeryLadder(pointU, _scalar);\n        // The result was not contributory\n        // https://cr.yp.to/ecdh.html#validate\n        if (pu === _0n) throw new Error(\"Invalid private or public key received\");\n        return encodeUCoordinate(pu);\n    }\n    // Computes public key from private. By doing scalar multiplication of base point.\n    const GuBytes = encodeUCoordinate(CURVE.Gu);\n    function scalarMultBase(scalar) {\n        return scalarMult(scalar, GuBytes);\n    }\n    return {\n        scalarMult,\n        scalarMultBase,\n        getSharedSecret: (privateKey, publicKey)=>scalarMult(privateKey, publicKey),\n        getPublicKey: (privateKey)=>scalarMultBase(privateKey),\n        utils: {\n            randomPrivateKey: ()=>CURVE.randomBytes(CURVE.nByteLength)\n        },\n        GuBytes: GuBytes\n    };\n} //# sourceMappingURL=montgomery.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/montgomery.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/utils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/frog/node_modules/@noble/curves/esm/abstract/utils.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   abytes: () => (/* binding */ abytes),\n/* harmony export */   bitGet: () => (/* binding */ bitGet),\n/* harmony export */   bitLen: () => (/* binding */ bitLen),\n/* harmony export */   bitMask: () => (/* binding */ bitMask),\n/* harmony export */   bitSet: () => (/* binding */ bitSet),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   bytesToNumberBE: () => (/* binding */ bytesToNumberBE),\n/* harmony export */   bytesToNumberLE: () => (/* binding */ bytesToNumberLE),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   createHmacDrbg: () => (/* binding */ createHmacDrbg),\n/* harmony export */   ensureBytes: () => (/* binding */ ensureBytes),\n/* harmony export */   equalBytes: () => (/* binding */ equalBytes),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   hexToNumber: () => (/* binding */ hexToNumber),\n/* harmony export */   isBytes: () => (/* binding */ isBytes),\n/* harmony export */   numberToBytesBE: () => (/* binding */ numberToBytesBE),\n/* harmony export */   numberToBytesLE: () => (/* binding */ numberToBytesLE),\n/* harmony export */   numberToHexUnpadded: () => (/* binding */ numberToHexUnpadded),\n/* harmony export */   numberToVarBytesBE: () => (/* binding */ numberToVarBytesBE),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   validateObject: () => (/* binding */ validateObject)\n/* harmony export */ });\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nfunction isBytes(a) {\n    return a instanceof Uint8Array || a != null && typeof a === \"object\" && a.constructor.name === \"Uint8Array\";\n}\nfunction abytes(item) {\n    if (!isBytes(item)) throw new Error(\"Uint8Array expected\");\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({\n    length: 256\n}, (_, i)=>i.toString(16).padStart(2, \"0\"));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */ function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = \"\";\n    for(let i = 0; i < bytes.length; i++){\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== \"string\") throw new Error(\"hex string expected, got \" + typeof hex);\n    // Big Endian\n    return BigInt(hex === \"\" ? \"0\" : `0x${hex}`);\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = {\n    _0: 48,\n    _9: 57,\n    _A: 65,\n    _F: 70,\n    _a: 97,\n    _f: 102\n};\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */ function hexToBytes(hex) {\n    if (typeof hex !== \"string\") throw new Error(\"hex string expected, got \" + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2) throw new Error(\"padded hex string expected, got unpadded hex of length \" + hl);\n    const array = new Uint8Array(al);\n    for(let ai = 0, hi = 0; ai < al; ai++, hi += 2){\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nfunction bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction bytesToNumberLE(bytes) {\n    abytes(bytes);\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nfunction numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, \"0\"));\n}\nfunction numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nfunction numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */ function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === \"string\") {\n        try {\n            res = hexToBytes(hex);\n        } catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    } else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    } else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === \"number\" && len !== expectedLength) throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */ function concatBytes(...arrays) {\n    let sum = 0;\n    for(let i = 0; i < arrays.length; i++){\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for(let i = 0, pad = 0; i < arrays.length; i++){\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nfunction equalBytes(a, b) {\n    if (a.length !== b.length) return false;\n    let diff = 0;\n    for(let i = 0; i < a.length; i++)diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */ function utf8ToBytes(str) {\n    if (typeof str !== \"string\") throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */ function bitLen(n) {\n    let len;\n    for(len = 0; n > _0n; n >>= _1n, len += 1);\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */ function bitGet(n, pos) {\n    return n >> BigInt(pos) & _1n;\n}\n/**\n * Sets single bit at position.\n */ function bitSet(n, pos, value) {\n    return n | (value ? _1n : _0n) << BigInt(pos);\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */ const bitMask = (n)=>(_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data)=>new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr)=>Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */ function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== \"number\" || hashLen < 2) throw new Error(\"hashLen must be a number\");\n    if (typeof qByteLen !== \"number\" || qByteLen < 2) throw new Error(\"qByteLen must be a number\");\n    if (typeof hmacFn !== \"function\") throw new Error(\"hmacFn must be a function\");\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = ()=>{\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b)=>hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n())=>{\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([\n            0x00\n        ]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0) return;\n        k = h(u8fr([\n            0x01\n        ]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = ()=>{\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000) throw new Error(\"drbg: tried 1000 values\");\n        let len = 0;\n        const out = [];\n        while(len < qByteLen){\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred)=>{\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while(!(res = pred(gen())))reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val)=>typeof val === \"bigint\",\n    function: (val)=>typeof val === \"function\",\n    boolean: (val)=>typeof val === \"boolean\",\n    string: (val)=>typeof val === \"string\",\n    stringOrUint8Array: (val)=>typeof val === \"string\" || isBytes(val),\n    isSafeInteger: (val)=>Number.isSafeInteger(val),\n    array: (val)=>Array.isArray(val),\n    field: (val, object)=>object.Fp.isValid(val),\n    hash: (val)=>typeof val === \"function\" && Number.isSafeInteger(val.outputLen)\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nfunction validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional)=>{\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== \"function\") throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined) return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))checkField(fieldName, type, true);\n    return object;\n} // validate type tests\n // const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n // const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n // // Should fail type-check\n // const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n // const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n // const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n // const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/ed25519.js":
/*!*********************************************************************!*\
  !*** ./node_modules/frog/node_modules/@noble/curves/esm/ed25519.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ED25519_TORSION_SUBGROUP: () => (/* binding */ ED25519_TORSION_SUBGROUP),\n/* harmony export */   RistrettoPoint: () => (/* binding */ RistrettoPoint),\n/* harmony export */   ed25519: () => (/* binding */ ed25519),\n/* harmony export */   ed25519ctx: () => (/* binding */ ed25519ctx),\n/* harmony export */   ed25519ph: () => (/* binding */ ed25519ph),\n/* harmony export */   edwardsToMontgomery: () => (/* binding */ edwardsToMontgomery),\n/* harmony export */   edwardsToMontgomeryPriv: () => (/* binding */ edwardsToMontgomeryPriv),\n/* harmony export */   edwardsToMontgomeryPub: () => (/* binding */ edwardsToMontgomeryPub),\n/* harmony export */   encodeToCurve: () => (/* binding */ encodeToCurve),\n/* harmony export */   hashToCurve: () => (/* binding */ hashToCurve),\n/* harmony export */   hashToRistretto255: () => (/* binding */ hashToRistretto255),\n/* harmony export */   hash_to_ristretto255: () => (/* binding */ hash_to_ristretto255),\n/* harmony export */   x25519: () => (/* binding */ x25519)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/sha512 */ \"(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/sha512.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/utils */ \"(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _abstract_edwards_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./abstract/edwards.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/edwards.js\");\n/* harmony import */ var _abstract_montgomery_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./abstract/montgomery.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/montgomery.js\");\n/* harmony import */ var _abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract/modular.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _abstract_utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./abstract/utils.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/utils.js\");\n/* harmony import */ var _abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./abstract/hash-to-curve.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/abstract/hash-to-curve.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ \n\n\n\n\n\n\n/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n */ const ED25519_P = BigInt(\"57896044618658097711785492504343953926634992332820282019728792003956564819949\");\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = BigInt(\"19681161376707505956807079304988542015446066515923890162744021073123829784752\");\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _5n = BigInt(5);\n// prettier-ignore\nconst _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\nfunction ed25519_pow_2_252_3(x) {\n    const P = ED25519_P;\n    const x2 = x * x % P;\n    const b2 = x2 * x % P; // x^3, 11\n    const b4 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b2, _2n, P) * b2 % P; // x^15, 1111\n    const b5 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b4, _1n, P) * x % P; // x^31\n    const b10 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b5, _5n, P) * b5 % P;\n    const b20 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b10, _10n, P) * b10 % P;\n    const b40 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b20, _20n, P) * b20 % P;\n    const b80 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b40, _40n, P) * b40 % P;\n    const b160 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b80, _80n, P) * b80 % P;\n    const b240 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b160, _80n, P) * b80 % P;\n    const b250 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b240, _10n, P) * b10 % P;\n    const pow_p_5_8 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b250, _2n, P) * x % P;\n    // ^ To pow to (p+3)/8, multiply it by x.\n    return {\n        pow_p_5_8,\n        b2\n    };\n}\nfunction adjustScalarBytes(bytes) {\n    // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n    // set the three least significant bits of the first byte\n    bytes[0] &= 248; // 0b1111_1000\n    // and the most significant bit of the last to zero,\n    bytes[31] &= 127; // 0b0111_1111\n    // set the second most significant bit of the last byte to 1\n    bytes[31] |= 64; // 0b0100_0000\n    return bytes;\n}\n// sqrt(u/v)\nfunction uvRatio(u, v) {\n    const P = ED25519_P;\n    const v3 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(v * v * v, P); // v³\n    const v7 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(v3 * v3 * v, P); // v⁷\n    // (p+3)/8 and (p-5)/8\n    const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n    let x = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n    const vx2 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(v * x * x, P); // vx²\n    const root1 = x; // First root candidate\n    const root2 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(x * ED25519_SQRT_M1, P); // Second root candidate\n    const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n    const useRoot2 = vx2 === (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n    const noRoot = vx2 === (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n    if (useRoot1) x = root1;\n    if (useRoot2 || noRoot) x = root2; // We return root2 anyway, for const-time\n    if ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.isNegativeLE)(x, P)) x = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(-x, P);\n    return {\n        isValid: useRoot1 || useRoot2,\n        value: x\n    };\n}\n// Just in case\nconst ED25519_TORSION_SUBGROUP = [\n    \"0100000000000000000000000000000000000000000000000000000000000000\",\n    \"c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a\",\n    \"0000000000000000000000000000000000000000000000000000000000000080\",\n    \"26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05\",\n    \"ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f\",\n    \"26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85\",\n    \"0000000000000000000000000000000000000000000000000000000000000000\",\n    \"c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa\"\n];\nconst Fp = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.Field)(ED25519_P, undefined, true);\nconst ed25519Defaults = {\n    // Param: a\n    a: BigInt(-1),\n    // d is equal to -121665/121666 over finite field.\n    // Negative number is P - number, and division is invert(number, P)\n    d: BigInt(\"37095705934669439343138083508754565189542113879843219016388785533085940283555\"),\n    // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n\n    Fp,\n    // Subgroup order: how many points curve has\n    // 2n**252n + 27742317777372353535851937790883648493n;\n    n: BigInt(\"7237005577332262213973186563042994240857116359379907606001950938285454250989\"),\n    // Cofactor\n    h: BigInt(8),\n    // Base point (x, y) aka generator point\n    Gx: BigInt(\"15112221349535400772501151409588531511454012693041857206046113283949847762202\"),\n    Gy: BigInt(\"46316835694926478169428394003475163141307993866256225615783033603165251855960\"),\n    hash: _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_1__.sha512,\n    randomBytes: _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__.randomBytes,\n    adjustScalarBytes,\n    // dom2\n    // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n    // Constant-time, u/√v\n    uvRatio\n};\nconst ed25519 = /* @__PURE__ */ (0,_abstract_edwards_js__WEBPACK_IMPORTED_MODULE_3__.twistedEdwards)(ed25519Defaults);\nfunction ed25519_domain(data, ctx, phflag) {\n    if (ctx.length > 255) throw new Error(\"Context is too big\");\n    return (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__.concatBytes)((0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__.utf8ToBytes)(\"SigEd25519 no Ed25519 collisions\"), new Uint8Array([\n        phflag ? 1 : 0,\n        ctx.length\n    ]), ctx, data);\n}\nconst ed25519ctx = /* @__PURE__ */ (0,_abstract_edwards_js__WEBPACK_IMPORTED_MODULE_3__.twistedEdwards)({\n    ...ed25519Defaults,\n    domain: ed25519_domain\n});\nconst ed25519ph = /* @__PURE__ */ (0,_abstract_edwards_js__WEBPACK_IMPORTED_MODULE_3__.twistedEdwards)({\n    ...ed25519Defaults,\n    domain: ed25519_domain,\n    prehash: _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_1__.sha512\n});\nconst x25519 = /* @__PURE__ */ (()=>(0,_abstract_montgomery_js__WEBPACK_IMPORTED_MODULE_4__.montgomery)({\n        P: ED25519_P,\n        a: BigInt(486662),\n        montgomeryBits: 255,\n        nByteLength: 32,\n        Gu: BigInt(9),\n        powPminus2: (x)=>{\n            const P = ED25519_P;\n            // x^(p-2) aka x^(2^255-21)\n            const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n            return (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(pow_p_5_8, BigInt(3), P) * b2, P);\n        },\n        adjustScalarBytes,\n        randomBytes: _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__.randomBytes\n    }))();\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */ function edwardsToMontgomeryPub(edwardsPub) {\n    const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n    const _1n = BigInt(1);\n    return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nconst edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */ function edwardsToMontgomeryPriv(edwardsPriv) {\n    const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n    return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\nconst ELL2_C1 = (Fp.ORDER + BigInt(3)) / BigInt(8); // 1. c1 = (q + 3) / 8       # Integer arithmetic\nconst ELL2_C2 = Fp.pow(_2n, ELL2_C1); // 2. c2 = 2^c1\nconst ELL2_C3 = Fp.sqrt(Fp.neg(Fp.ONE)); // 3. c3 = sqrt(-1)\nconst ELL2_C4 = (Fp.ORDER - BigInt(5)) / BigInt(8); // 4. c4 = (q - 5) / 8       # Integer arithmetic\nconst ELL2_J = BigInt(486662);\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u) {\n    let tv1 = Fp.sqr(u); //  1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, _2n); //  2.  tv1 = 2 * tv1\n    let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n    let x1n = Fp.neg(ELL2_J); //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n    let tv2 = Fp.sqr(xd); //  5.  tv2 = xd^2\n    let gxd = Fp.mul(tv2, xd); //  6.  gxd = tv2 * xd        # gxd = xd^3\n    let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n    gx1 = Fp.mul(gx1, x1n); //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n    gx1 = Fp.add(gx1, tv2); //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n    gx1 = Fp.mul(gx1, x1n); //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n    let tv3 = Fp.sqr(gxd); //  11. tv3 = gxd^2\n    tv2 = Fp.sqr(tv3); //  12. tv2 = tv3^2           # gxd^4\n    tv3 = Fp.mul(tv3, gxd); //  13. tv3 = tv3 * gxd       # gxd^3\n    tv3 = Fp.mul(tv3, gx1); //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n    tv2 = Fp.mul(tv2, tv3); //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n    let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n    y11 = Fp.mul(y11, tv3); //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n    let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n    tv2 = Fp.sqr(y11); //  19. tv2 = y11^2\n    tv2 = Fp.mul(tv2, gxd); //  20. tv2 = tv2 * gxd\n    let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n    let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n    let x2n = Fp.mul(x1n, tv1); //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n    let y21 = Fp.mul(y11, u); //  24. y21 = y11 * u\n    y21 = Fp.mul(y21, ELL2_C2); //  25. y21 = y21 * c2\n    let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n    let gx2 = Fp.mul(gx1, tv1); //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n    tv2 = Fp.sqr(y21); //  28. tv2 = y21^2\n    tv2 = Fp.mul(tv2, gxd); //  29. tv2 = tv2 * gxd\n    let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n    let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n    tv2 = Fp.sqr(y1); //  32. tv2 = y1^2\n    tv2 = Fp.mul(tv2, gxd); //  33. tv2 = tv2 * gxd\n    let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n    let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n    let y = Fp.cmov(y2, y1, e3); //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n    let e4 = Fp.isOdd(y); //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n    y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n    return {\n        xMn: xn,\n        xMd: xd,\n        yMn: y,\n        yMd: _1n\n    }; //  39. return (xn, xd, y, 1)\n}\nconst ELL2_C1_EDWARDS = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.FpSqrtEven)(Fp, Fp.neg(BigInt(486664))); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u) {\n    const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n    // map_to_curve_elligator2_curve25519(u)\n    let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n    xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n    let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n    let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n    let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n    let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n    let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n    xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n    xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n    yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n    yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n    const inv = Fp.invertBatch([\n        xd,\n        yd\n    ]); // batch division\n    return {\n        x: Fp.mul(xn, inv[0]),\n        y: Fp.mul(yn, inv[1])\n    }; //  13. return (xn, xd, yn, yd)\n}\nconst htf = /* @__PURE__ */ (()=>(0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__.createHasher)(ed25519.ExtendedPoint, (scalars)=>map_to_curve_elligator2_edwards25519(scalars[0]), {\n        DST: \"edwards25519_XMD:SHA-512_ELL2_RO_\",\n        encodeDST: \"edwards25519_XMD:SHA-512_ELL2_NU_\",\n        p: Fp.ORDER,\n        m: 1,\n        k: 128,\n        expand: \"xmd\",\n        hash: _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_1__.sha512\n    }))();\nconst hashToCurve = /* @__PURE__ */ (()=>htf.hashToCurve)();\nconst encodeToCurve = /* @__PURE__ */ (()=>htf.encodeToCurve)();\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistPoint)) throw new Error(\"RistrettoPoint expected\");\n}\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = BigInt(\"25063068953384623474111414158702152701244531502492656460079210482610430750235\");\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = BigInt(\"54469307008909316920995813868745141605393597292927456921205312896311721017578\");\n// 1-d²\nconst ONE_MINUS_D_SQ = BigInt(\"1159843021668779879193775521855586647937357759715417654439879720876111806838\");\n// (d-1)²\nconst D_MINUS_ONE_SQ = BigInt(\"40440834346308536858101042469323190826248399146238708352240133220865137265952\");\n// Calculates 1/√(number)\nconst invertSqrt = (number)=>uvRatio(_1n, number);\nconst MAX_255B = BigInt(\"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nconst bytes255ToNumberLE = (bytes)=>ed25519.CURVE.Fp.create((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_6__.bytesToNumberLE)(bytes) & MAX_255B);\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0) {\n    const { d } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const r = mod(SQRT_M1 * r0 * r0); // 1\n    const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n    let c = BigInt(-1); // 3\n    const D = mod((c - d * r) * mod(r + d)); // 4\n    let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n    let s_ = mod(s * r0); // 6\n    if (!(0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.isNegativeLE)(s_, P)) s_ = mod(-s_);\n    if (!Ns_D_is_sq) s = s_; // 7\n    if (!Ns_D_is_sq) c = r; // 8\n    const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n    const s2 = s * s;\n    const W0 = mod((s + s) * D); // 10\n    const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n    const W2 = mod(_1n - s2); // 12\n    const W3 = mod(_1n + s2); // 13\n    return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */ class RistPoint {\n    // Private property to discourage combining ExtendedPoint + RistrettoPoint\n    // Always use Ristretto encoding/decoding instead.\n    constructor(ep){\n        this.ep = ep;\n    }\n    static fromAffine(ap) {\n        return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n    }\n    /**\n     * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n     * The hash-to-group operation applies Elligator twice and adds the results.\n     * **Note:** this is one-way map, there is no conversion from point to hash.\n     * https://ristretto.group/formulas/elligator.html\n     * @param hex 64-byte output of a hash function\n     */ static hashToCurve(hex) {\n        hex = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_6__.ensureBytes)(\"ristrettoHash\", hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = calcElligatorRistrettoMap(r2);\n        return new RistPoint(R1.add(R2));\n    }\n    /**\n     * Converts ristretto-encoded string to ristretto point.\n     * https://ristretto.group/formulas/decoding.html\n     * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n     */ static fromHex(hex) {\n        hex = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_6__.ensureBytes)(\"ristrettoHex\", hex, 32);\n        const { a, d } = ed25519.CURVE;\n        const P = ed25519.CURVE.Fp.ORDER;\n        const mod = ed25519.CURVE.Fp.create;\n        const emsg = \"RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint\";\n        const s = bytes255ToNumberLE(hex);\n        // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n        // 3. Check that s is non-negative, or else abort\n        if (!(0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_6__.equalBytes)((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_6__.numberToBytesLE)(s, 32), hex) || (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.isNegativeLE)(s, P)) throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2); // 4 (a is -1)\n        const u2 = mod(_1n - a * s2); // 5\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2); // 6\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n        const Dx = mod(I * u2); // 8\n        const Dy = mod(I * Dx * v); // 9\n        let x = mod((s + s) * Dx); // 10\n        if ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.isNegativeLE)(x, P)) x = mod(-x); // 10\n        const y = mod(u1 * Dy); // 11\n        const t = mod(x * y); // 12\n        if (!isValid || (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.isNegativeLE)(t, P) || y === _0n) throw new Error(emsg);\n        return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n    }\n    /**\n     * Encodes ristretto point to Uint8Array.\n     * https://ristretto.group/formulas/encoding.html\n     */ toRawBytes() {\n        let { ex: x, ey: y, ez: z, et: t } = this.ep;\n        const P = ed25519.CURVE.Fp.ORDER;\n        const mod = ed25519.CURVE.Fp.create;\n        const u1 = mod(mod(z + y) * mod(z - y)); // 1\n        const u2 = mod(x * y); // 2\n        // Square root always exists\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n        const D1 = mod(invsqrt * u1); // 4\n        const D2 = mod(invsqrt * u2); // 5\n        const zInv = mod(D1 * D2 * t); // 6\n        let D; // 7\n        if ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.isNegativeLE)(t * zInv, P)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        } else {\n            D = D2; // 8\n        }\n        if ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.isNegativeLE)(x * zInv, P)) y = mod(-y); // 9\n        let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n        if ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.isNegativeLE)(s, P)) s = mod(-s);\n        return (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_6__.numberToBytesLE)(s, 32); // 11\n    }\n    toHex() {\n        return (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_6__.bytesToHex)(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    // Compare one point to another.\n    equals(other) {\n        assertRstPoint(other);\n        const { ex: X1, ey: Y1 } = this.ep;\n        const { ex: X2, ey: Y2 } = other.ep;\n        const mod = ed25519.CURVE.Fp.create;\n        // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n        const one = mod(X1 * Y2) === mod(Y1 * X2);\n        const two = mod(Y1 * Y2) === mod(X1 * X2);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistPoint(this.ep.multiplyUnsafe(scalar));\n    }\n    double() {\n        return new RistPoint(this.ep.double());\n    }\n    negate() {\n        return new RistPoint(this.ep.negate());\n    }\n}\nconst RistrettoPoint = /* @__PURE__ */ (()=>{\n    if (!RistPoint.BASE) RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n    if (!RistPoint.ZERO) RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n    return RistPoint;\n})();\n// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B\nconst hashToRistretto255 = (msg, options)=>{\n    const d = options.DST;\n    const DST = typeof d === \"string\" ? (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__.utf8ToBytes)(d) : d;\n    const uniform_bytes = (0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__.expand_message_xmd)(msg, DST, 64, _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_1__.sha512);\n    const P = RistPoint.hashToCurve(uniform_bytes);\n    return P;\n};\nconst hash_to_ristretto255 = hashToRistretto255; // legacy\n //# sourceMappingURL=ed25519.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/node_modules/@noble/curves/esm/ed25519.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/_assert.js":
/*!*********************************************************************!*\
  !*** ./node_modules/frog/node_modules/@noble/hashes/esm/_assert.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bool: () => (/* binding */ bool),\n/* harmony export */   bytes: () => (/* binding */ bytes),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   isBytes: () => (/* binding */ isBytes),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   output: () => (/* binding */ output)\n/* harmony export */ });\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0) throw new Error(`positive integer expected, not ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== \"boolean\") throw new Error(`boolean expected, not ${b}`);\n}\n// copied from utils\nfunction isBytes(a) {\n    return a instanceof Uint8Array || a != null && typeof a === \"object\" && a.constructor.name === \"Uint8Array\";\n}\nfunction bytes(b, ...lengths) {\n    if (!isBytes(b)) throw new Error(\"Uint8Array expected\");\n    if (lengths.length > 0 && !lengths.includes(b.length)) throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(h) {\n    if (typeof h !== \"function\" || typeof h.create !== \"function\") throw new Error(\"Hash should be wrapped by utils.wrapConstructor\");\n    number(h.outputLen);\n    number(h.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed) throw new Error(\"Hash instance has been destroyed\");\n    if (checkFinished && instance.finished) throw new Error(\"Hash#digest() has already been called\");\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\n\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (assert); //# sourceMappingURL=_assert.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX2Fzc2VydC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLFNBQVNBLE9BQU9DLENBQUM7SUFDYixJQUFJLENBQUNDLE9BQU9DLGFBQWEsQ0FBQ0YsTUFBTUEsSUFBSSxHQUNoQyxNQUFNLElBQUlHLE1BQU0sQ0FBQywrQkFBK0IsRUFBRUgsRUFBRSxDQUFDO0FBQzdEO0FBQ0EsU0FBU0ksS0FBS0MsQ0FBQztJQUNYLElBQUksT0FBT0EsTUFBTSxXQUNiLE1BQU0sSUFBSUYsTUFBTSxDQUFDLHNCQUFzQixFQUFFRSxFQUFFLENBQUM7QUFDcEQ7QUFDQSxvQkFBb0I7QUFDYixTQUFTQyxRQUFRQyxDQUFDO0lBQ3JCLE9BQVFBLGFBQWFDLGNBQ2hCRCxLQUFLLFFBQVEsT0FBT0EsTUFBTSxZQUFZQSxFQUFFRSxXQUFXLENBQUNDLElBQUksS0FBSztBQUN0RTtBQUNBLFNBQVNDLE1BQU1OLENBQUMsRUFBRSxHQUFHTyxPQUFPO0lBQ3hCLElBQUksQ0FBQ04sUUFBUUQsSUFDVCxNQUFNLElBQUlGLE1BQU07SUFDcEIsSUFBSVMsUUFBUUMsTUFBTSxHQUFHLEtBQUssQ0FBQ0QsUUFBUUUsUUFBUSxDQUFDVCxFQUFFUSxNQUFNLEdBQ2hELE1BQU0sSUFBSVYsTUFBTSxDQUFDLDhCQUE4QixFQUFFUyxRQUFRLGdCQUFnQixFQUFFUCxFQUFFUSxNQUFNLENBQUMsQ0FBQztBQUM3RjtBQUNBLFNBQVNFLEtBQUtDLENBQUM7SUFDWCxJQUFJLE9BQU9BLE1BQU0sY0FBYyxPQUFPQSxFQUFFQyxNQUFNLEtBQUssWUFDL0MsTUFBTSxJQUFJZCxNQUFNO0lBQ3BCSixPQUFPaUIsRUFBRUUsU0FBUztJQUNsQm5CLE9BQU9pQixFQUFFRyxRQUFRO0FBQ3JCO0FBQ0EsU0FBU0MsT0FBT0MsUUFBUSxFQUFFQyxnQkFBZ0IsSUFBSTtJQUMxQyxJQUFJRCxTQUFTRSxTQUFTLEVBQ2xCLE1BQU0sSUFBSXBCLE1BQU07SUFDcEIsSUFBSW1CLGlCQUFpQkQsU0FBU0csUUFBUSxFQUNsQyxNQUFNLElBQUlyQixNQUFNO0FBQ3hCO0FBQ0EsU0FBU3NCLE9BQU9DLEdBQUcsRUFBRUwsUUFBUTtJQUN6QlYsTUFBTWU7SUFDTixNQUFNQyxNQUFNTixTQUFTSCxTQUFTO0lBQzlCLElBQUlRLElBQUliLE1BQU0sR0FBR2MsS0FBSztRQUNsQixNQUFNLElBQUl4QixNQUFNLENBQUMsc0RBQXNELEVBQUV3QixJQUFJLENBQUM7SUFDbEY7QUFDSjtBQUNxRDtBQUNyRCxNQUFNQyxTQUFTO0lBQUU3QjtJQUFRSztJQUFNTztJQUFPSTtJQUFNSztJQUFRSztBQUFPO0FBQzNELGlFQUFlRyxNQUFNQSxFQUFDLENBQ3RCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2JlZ2dhci0vLi9ub2RlX21vZHVsZXMvZnJvZy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX2Fzc2VydC5qcz8xZWY4Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIG51bWJlcihuKSB7XG4gICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihuKSB8fCBuIDwgMClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBwb3NpdGl2ZSBpbnRlZ2VyIGV4cGVjdGVkLCBub3QgJHtufWApO1xufVxuZnVuY3Rpb24gYm9vbChiKSB7XG4gICAgaWYgKHR5cGVvZiBiICE9PSAnYm9vbGVhbicpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgYm9vbGVhbiBleHBlY3RlZCwgbm90ICR7Yn1gKTtcbn1cbi8vIGNvcGllZCBmcm9tIHV0aWxzXG5leHBvcnQgZnVuY3Rpb24gaXNCeXRlcyhhKSB7XG4gICAgcmV0dXJuIChhIGluc3RhbmNlb2YgVWludDhBcnJheSB8fFxuICAgICAgICAoYSAhPSBudWxsICYmIHR5cGVvZiBhID09PSAnb2JqZWN0JyAmJiBhLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdVaW50OEFycmF5JykpO1xufVxuZnVuY3Rpb24gYnl0ZXMoYiwgLi4ubGVuZ3Rocykge1xuICAgIGlmICghaXNCeXRlcyhiKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVaW50OEFycmF5IGV4cGVjdGVkJyk7XG4gICAgaWYgKGxlbmd0aHMubGVuZ3RoID4gMCAmJiAhbGVuZ3Rocy5pbmNsdWRlcyhiLmxlbmd0aCkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVWludDhBcnJheSBleHBlY3RlZCBvZiBsZW5ndGggJHtsZW5ndGhzfSwgbm90IG9mIGxlbmd0aD0ke2IubGVuZ3RofWApO1xufVxuZnVuY3Rpb24gaGFzaChoKSB7XG4gICAgaWYgKHR5cGVvZiBoICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBoLmNyZWF0ZSAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdIYXNoIHNob3VsZCBiZSB3cmFwcGVkIGJ5IHV0aWxzLndyYXBDb25zdHJ1Y3RvcicpO1xuICAgIG51bWJlcihoLm91dHB1dExlbik7XG4gICAgbnVtYmVyKGguYmxvY2tMZW4pO1xufVxuZnVuY3Rpb24gZXhpc3RzKGluc3RhbmNlLCBjaGVja0ZpbmlzaGVkID0gdHJ1ZSkge1xuICAgIGlmIChpbnN0YW5jZS5kZXN0cm95ZWQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCBpbnN0YW5jZSBoYXMgYmVlbiBkZXN0cm95ZWQnKTtcbiAgICBpZiAoY2hlY2tGaW5pc2hlZCAmJiBpbnN0YW5jZS5maW5pc2hlZClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdIYXNoI2RpZ2VzdCgpIGhhcyBhbHJlYWR5IGJlZW4gY2FsbGVkJyk7XG59XG5mdW5jdGlvbiBvdXRwdXQob3V0LCBpbnN0YW5jZSkge1xuICAgIGJ5dGVzKG91dCk7XG4gICAgY29uc3QgbWluID0gaW5zdGFuY2Uub3V0cHV0TGVuO1xuICAgIGlmIChvdXQubGVuZ3RoIDwgbWluKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgZGlnZXN0SW50bygpIGV4cGVjdHMgb3V0cHV0IGJ1ZmZlciBvZiBsZW5ndGggYXQgbGVhc3QgJHttaW59YCk7XG4gICAgfVxufVxuZXhwb3J0IHsgbnVtYmVyLCBib29sLCBieXRlcywgaGFzaCwgZXhpc3RzLCBvdXRwdXQgfTtcbmNvbnN0IGFzc2VydCA9IHsgbnVtYmVyLCBib29sLCBieXRlcywgaGFzaCwgZXhpc3RzLCBvdXRwdXQgfTtcbmV4cG9ydCBkZWZhdWx0IGFzc2VydDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9hc3NlcnQuanMubWFwIl0sIm5hbWVzIjpbIm51bWJlciIsIm4iLCJOdW1iZXIiLCJpc1NhZmVJbnRlZ2VyIiwiRXJyb3IiLCJib29sIiwiYiIsImlzQnl0ZXMiLCJhIiwiVWludDhBcnJheSIsImNvbnN0cnVjdG9yIiwibmFtZSIsImJ5dGVzIiwibGVuZ3RocyIsImxlbmd0aCIsImluY2x1ZGVzIiwiaGFzaCIsImgiLCJjcmVhdGUiLCJvdXRwdXRMZW4iLCJibG9ja0xlbiIsImV4aXN0cyIsImluc3RhbmNlIiwiY2hlY2tGaW5pc2hlZCIsImRlc3Ryb3llZCIsImZpbmlzaGVkIiwib3V0cHV0Iiwib3V0IiwibWluIiwiYXNzZXJ0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/_assert.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/_blake.js":
/*!********************************************************************!*\
  !*** ./node_modules/frog/node_modules/@noble/hashes/esm/_blake.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BLAKE: () => (/* binding */ BLAKE),\n/* harmony export */   SIGMA: () => (/* binding */ SIGMA)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/utils.js\");\n\n\n// Blake is based on ChaCha permutation.\n// For BLAKE2b, the two extra permutations for rounds 10 and 11 are SIGMA[10..11] = SIGMA[0..1].\n// prettier-ignore\nconst SIGMA = /* @__PURE__ */ new Uint8Array([\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    14,\n    10,\n    4,\n    8,\n    9,\n    15,\n    13,\n    6,\n    1,\n    12,\n    0,\n    2,\n    11,\n    7,\n    5,\n    3,\n    11,\n    8,\n    12,\n    0,\n    5,\n    2,\n    15,\n    13,\n    10,\n    14,\n    3,\n    6,\n    7,\n    1,\n    9,\n    4,\n    7,\n    9,\n    3,\n    1,\n    13,\n    12,\n    11,\n    14,\n    2,\n    6,\n    5,\n    10,\n    4,\n    0,\n    15,\n    8,\n    9,\n    0,\n    5,\n    7,\n    2,\n    4,\n    10,\n    15,\n    14,\n    1,\n    11,\n    12,\n    6,\n    8,\n    3,\n    13,\n    2,\n    12,\n    6,\n    10,\n    0,\n    11,\n    8,\n    3,\n    4,\n    13,\n    7,\n    5,\n    15,\n    14,\n    1,\n    9,\n    12,\n    5,\n    1,\n    15,\n    14,\n    13,\n    4,\n    10,\n    0,\n    7,\n    6,\n    3,\n    9,\n    2,\n    8,\n    11,\n    13,\n    11,\n    7,\n    14,\n    12,\n    1,\n    3,\n    9,\n    5,\n    0,\n    15,\n    4,\n    8,\n    6,\n    2,\n    10,\n    6,\n    15,\n    14,\n    9,\n    11,\n    3,\n    0,\n    8,\n    12,\n    2,\n    13,\n    7,\n    1,\n    4,\n    10,\n    5,\n    10,\n    2,\n    8,\n    4,\n    7,\n    6,\n    1,\n    5,\n    15,\n    11,\n    9,\n    14,\n    3,\n    12,\n    13,\n    0,\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    14,\n    10,\n    4,\n    8,\n    9,\n    15,\n    13,\n    6,\n    1,\n    12,\n    0,\n    2,\n    11,\n    7,\n    5,\n    3\n]);\nclass BLAKE extends _utils_js__WEBPACK_IMPORTED_MODULE_0__.Hash {\n    constructor(blockLen, outputLen, opts = {}, keyLen, saltLen, persLen){\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.length = 0;\n        this.pos = 0;\n        this.finished = false;\n        this.destroyed = false;\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.number)(blockLen);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.number)(outputLen);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.number)(keyLen);\n        if (outputLen < 0 || outputLen > keyLen) throw new Error(\"outputLen bigger than keyLen\");\n        if (opts.key !== undefined && (opts.key.length < 1 || opts.key.length > keyLen)) throw new Error(`key must be up 1..${keyLen} byte long or undefined`);\n        if (opts.salt !== undefined && opts.salt.length !== saltLen) throw new Error(`salt must be ${saltLen} byte long or undefined`);\n        if (opts.personalization !== undefined && opts.personalization.length !== persLen) throw new Error(`personalization must be ${persLen} byte long or undefined`);\n        this.buffer32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(this.buffer = new Uint8Array(blockLen));\n    }\n    update(data) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        // Main difference with other hashes: there is flag for last block,\n        // so we cannot process current block before we know that there\n        // is the next one. This significantly complicates logic and reduces ability\n        // to do zero-copy processing\n        const { blockLen, buffer, buffer32 } = this;\n        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(data);\n        const len = data.length;\n        const offset = data.byteOffset;\n        const buf = data.buffer;\n        for(let pos = 0; pos < len;){\n            // If buffer is full and we still have input (don't process last block, same as blake2s)\n            if (this.pos === blockLen) {\n                if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__.isLE) (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.byteSwap32)(buffer32);\n                this.compress(buffer32, 0, false);\n                if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__.isLE) (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.byteSwap32)(buffer32);\n                this.pos = 0;\n            }\n            const take = Math.min(blockLen - this.pos, len - pos);\n            const dataOffset = offset + pos;\n            // full block && aligned to 4 bytes && not last in input\n            if (take === blockLen && !(dataOffset % 4) && pos + take < len) {\n                const data32 = new Uint32Array(buf, dataOffset, Math.floor((len - pos) / 4));\n                if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__.isLE) (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.byteSwap32)(data32);\n                for(let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen){\n                    this.length += blockLen;\n                    this.compress(data32, pos32, false);\n                }\n                if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__.isLE) (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.byteSwap32)(data32);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            this.length += take;\n            pos += take;\n        }\n        return this;\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.output)(out, this);\n        const { pos, buffer32 } = this;\n        this.finished = true;\n        // Padding\n        this.buffer.subarray(pos).fill(0);\n        if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__.isLE) (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.byteSwap32)(buffer32);\n        this.compress(buffer32, 0, true);\n        if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__.isLE) (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.byteSwap32)(buffer32);\n        const out32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(out);\n        this.get().forEach((v, i)=>out32[i] = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.byteSwapIfBE)(v));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        const { buffer, length, finished, destroyed, outputLen, pos } = this;\n        to || (to = new this.constructor({\n            dkLen: outputLen\n        }));\n        to.set(...this.get());\n        to.length = length;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.outputLen = outputLen;\n        to.buffer.set(buffer);\n        to.pos = pos;\n        return to;\n    }\n} //# sourceMappingURL=_blake.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/_blake.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/_md.js":
/*!*****************************************************************!*\
  !*** ./node_modules/frog/node_modules/@noble/hashes/esm/_md.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chi: () => (/* binding */ Chi),\n/* harmony export */   HashMD: () => (/* binding */ HashMD),\n/* harmony export */   Maj: () => (/* binding */ Maj)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/utils.js\");\n\n\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === \"function\") return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number(value >> _32n & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Choice: a ? b : c\nconst Chi = (a, b, c)=>a & b ^ ~a & c;\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c)=>a & b ^ a & c ^ b & c;\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */ class HashMD extends _utils_js__WEBPACK_IMPORTED_MODULE_0__.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE){\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(this.buffer);\n    }\n    update(data) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        const { view, buffer, blockLen } = this;\n        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(data);\n        const len = data.length;\n        for(let pos = 0; pos < len;){\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(data);\n                for(; blockLen <= len - pos; pos += blockLen)this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.output)(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 128;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for(let i = pos; i < blockLen; i++)buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4) throw new Error(\"_sha2: outputLen should be aligned to 32bit\");\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length) throw new Error(\"_sha2: outputLen bigger than state\");\n        for(let i = 0; i < outLen; i++)oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen) to.buffer.set(buffer);\n        return to;\n    }\n} //# sourceMappingURL=_md.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/_md.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/_u64.js":
/*!******************************************************************!*\
  !*** ./node_modules/frog/node_modules/@noble/hashes/esm/_u64.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   add3H: () => (/* binding */ add3H),\n/* harmony export */   add3L: () => (/* binding */ add3L),\n/* harmony export */   add4H: () => (/* binding */ add4H),\n/* harmony export */   add4L: () => (/* binding */ add4L),\n/* harmony export */   add5H: () => (/* binding */ add5H),\n/* harmony export */   add5L: () => (/* binding */ add5L),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   fromBig: () => (/* binding */ fromBig),\n/* harmony export */   rotlBH: () => (/* binding */ rotlBH),\n/* harmony export */   rotlBL: () => (/* binding */ rotlBL),\n/* harmony export */   rotlSH: () => (/* binding */ rotlSH),\n/* harmony export */   rotlSL: () => (/* binding */ rotlSL),\n/* harmony export */   rotr32H: () => (/* binding */ rotr32H),\n/* harmony export */   rotr32L: () => (/* binding */ rotr32L),\n/* harmony export */   rotrBH: () => (/* binding */ rotrBH),\n/* harmony export */   rotrBL: () => (/* binding */ rotrBL),\n/* harmony export */   rotrSH: () => (/* binding */ rotrSH),\n/* harmony export */   rotrSL: () => (/* binding */ rotrSL),\n/* harmony export */   shrSH: () => (/* binding */ shrSH),\n/* harmony export */   shrSL: () => (/* binding */ shrSL),\n/* harmony export */   split: () => (/* binding */ split),\n/* harmony export */   toBig: () => (/* binding */ toBig)\n/* harmony export */ });\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le) return {\n        h: Number(n & U32_MASK64),\n        l: Number(n >> _32n & U32_MASK64)\n    };\n    return {\n        h: Number(n >> _32n & U32_MASK64) | 0,\n        l: Number(n & U32_MASK64) | 0\n    };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for(let i = 0; i < lst.length; i++){\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [\n            h,\n            l\n        ];\n    }\n    return [\n        Ah,\n        Al\n    ];\n}\nconst toBig = (h, l)=>BigInt(h >>> 0) << _32n | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s)=>h >>> s;\nconst shrSL = (h, l, s)=>h << 32 - s | l >>> s;\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s)=>h >>> s | l << 32 - s;\nconst rotrSL = (h, l, s)=>h << 32 - s | l >>> s;\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s)=>h << 64 - s | l >>> s - 32;\nconst rotrBL = (h, l, s)=>h >>> s - 32 | l << 64 - s;\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l)=>l;\nconst rotr32L = (h, _l)=>h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s)=>h << s | l >>> 32 - s;\nconst rotlSL = (h, l, s)=>l << s | h >>> 32 - s;\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s)=>l << s - 32 | h >>> 64 - s;\nconst rotlBL = (h, l, s)=>h << s - 32 | l >>> 64 - s;\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return {\n        h: Ah + Bh + (l / 2 ** 32 | 0) | 0,\n        l: l | 0\n    };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch)=>Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;\nconst add4L = (Al, Bl, Cl, Dl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh)=>Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh)=>Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;\n// prettier-ignore\n\n// prettier-ignore\nconst u64 = {\n    fromBig,\n    split,\n    toBig,\n    shrSH,\n    shrSL,\n    rotrSH,\n    rotrSL,\n    rotrBH,\n    rotrBL,\n    rotr32H,\n    rotr32L,\n    rotlSH,\n    rotlSL,\n    rotlBH,\n    rotlBL,\n    add,\n    add3L,\n    add3H,\n    add4L,\n    add4H,\n    add5H,\n    add5L\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (u64); //# sourceMappingURL=_u64.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/_u64.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/blake2s.js":
/*!*********************************************************************!*\
  !*** ./node_modules/frog/node_modules/@noble/hashes/esm/blake2s.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   B2S_IV: () => (/* binding */ B2S_IV),\n/* harmony export */   blake2s: () => (/* binding */ blake2s),\n/* harmony export */   compress: () => (/* binding */ compress)\n/* harmony export */ });\n/* harmony import */ var _blake_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_blake.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/_blake.js\");\n/* harmony import */ var _u64_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_u64.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/_u64.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/utils.js\");\n\n\n\n// Initial state: same as SHA256\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst B2S_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667,\n    0xbb67ae85,\n    0x3c6ef372,\n    0xa54ff53a,\n    0x510e527f,\n    0x9b05688c,\n    0x1f83d9ab,\n    0x5be0cd19\n]);\n// Mixing function G splitted in two halfs\nfunction G1s(a, b, c, d, x) {\n    a = a + b + x | 0;\n    d = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotr)(d ^ a, 16);\n    c = c + d | 0;\n    b = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotr)(b ^ c, 12);\n    return {\n        a,\n        b,\n        c,\n        d\n    };\n}\nfunction G2s(a, b, c, d, x) {\n    a = a + b + x | 0;\n    d = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotr)(d ^ a, 8);\n    c = c + d | 0;\n    b = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotr)(b ^ c, 7);\n    return {\n        a,\n        b,\n        c,\n        d\n    };\n}\n// prettier-ignore\nfunction compress(s, offset, msg, rounds, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) {\n    let j = 0;\n    for(let i = 0; i < rounds; i++){\n        ({ a: v0, b: v4, c: v8, d: v12 } = G1s(v0, v4, v8, v12, msg[offset + s[j++]]));\n        ({ a: v0, b: v4, c: v8, d: v12 } = G2s(v0, v4, v8, v12, msg[offset + s[j++]]));\n        ({ a: v1, b: v5, c: v9, d: v13 } = G1s(v1, v5, v9, v13, msg[offset + s[j++]]));\n        ({ a: v1, b: v5, c: v9, d: v13 } = G2s(v1, v5, v9, v13, msg[offset + s[j++]]));\n        ({ a: v2, b: v6, c: v10, d: v14 } = G1s(v2, v6, v10, v14, msg[offset + s[j++]]));\n        ({ a: v2, b: v6, c: v10, d: v14 } = G2s(v2, v6, v10, v14, msg[offset + s[j++]]));\n        ({ a: v3, b: v7, c: v11, d: v15 } = G1s(v3, v7, v11, v15, msg[offset + s[j++]]));\n        ({ a: v3, b: v7, c: v11, d: v15 } = G2s(v3, v7, v11, v15, msg[offset + s[j++]]));\n        ({ a: v0, b: v5, c: v10, d: v15 } = G1s(v0, v5, v10, v15, msg[offset + s[j++]]));\n        ({ a: v0, b: v5, c: v10, d: v15 } = G2s(v0, v5, v10, v15, msg[offset + s[j++]]));\n        ({ a: v1, b: v6, c: v11, d: v12 } = G1s(v1, v6, v11, v12, msg[offset + s[j++]]));\n        ({ a: v1, b: v6, c: v11, d: v12 } = G2s(v1, v6, v11, v12, msg[offset + s[j++]]));\n        ({ a: v2, b: v7, c: v8, d: v13 } = G1s(v2, v7, v8, v13, msg[offset + s[j++]]));\n        ({ a: v2, b: v7, c: v8, d: v13 } = G2s(v2, v7, v8, v13, msg[offset + s[j++]]));\n        ({ a: v3, b: v4, c: v9, d: v14 } = G1s(v3, v4, v9, v14, msg[offset + s[j++]]));\n        ({ a: v3, b: v4, c: v9, d: v14 } = G2s(v3, v4, v9, v14, msg[offset + s[j++]]));\n    }\n    return {\n        v0,\n        v1,\n        v2,\n        v3,\n        v4,\n        v5,\n        v6,\n        v7,\n        v8,\n        v9,\n        v10,\n        v11,\n        v12,\n        v13,\n        v14,\n        v15\n    };\n}\nclass BLAKE2s extends _blake_js__WEBPACK_IMPORTED_MODULE_1__.BLAKE {\n    constructor(opts = {}){\n        super(64, opts.dkLen === undefined ? 32 : opts.dkLen, opts, 32, 8, 8);\n        // Internal state, same as SHA-256\n        this.v0 = B2S_IV[0] | 0;\n        this.v1 = B2S_IV[1] | 0;\n        this.v2 = B2S_IV[2] | 0;\n        this.v3 = B2S_IV[3] | 0;\n        this.v4 = B2S_IV[4] | 0;\n        this.v5 = B2S_IV[5] | 0;\n        this.v6 = B2S_IV[6] | 0;\n        this.v7 = B2S_IV[7] | 0;\n        const keyLength = opts.key ? opts.key.length : 0;\n        this.v0 ^= this.outputLen | keyLength << 8 | 0x01 << 16 | 0x01 << 24;\n        if (opts.salt) {\n            const salt = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(opts.salt));\n            this.v4 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.byteSwapIfBE)(salt[0]);\n            this.v5 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.byteSwapIfBE)(salt[1]);\n        }\n        if (opts.personalization) {\n            const pers = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(opts.personalization));\n            this.v6 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.byteSwapIfBE)(pers[0]);\n            this.v7 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.byteSwapIfBE)(pers[1]);\n        }\n        if (opts.key) {\n            // Pad to blockLen and update\n            const tmp = new Uint8Array(this.blockLen);\n            tmp.set((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(opts.key));\n            this.update(tmp);\n        }\n    }\n    get() {\n        const { v0, v1, v2, v3, v4, v5, v6, v7 } = this;\n        return [\n            v0,\n            v1,\n            v2,\n            v3,\n            v4,\n            v5,\n            v6,\n            v7\n        ];\n    }\n    // prettier-ignore\n    set(v0, v1, v2, v3, v4, v5, v6, v7) {\n        this.v0 = v0 | 0;\n        this.v1 = v1 | 0;\n        this.v2 = v2 | 0;\n        this.v3 = v3 | 0;\n        this.v4 = v4 | 0;\n        this.v5 = v5 | 0;\n        this.v6 = v6 | 0;\n        this.v7 = v7 | 0;\n    }\n    compress(msg, offset, isLast) {\n        const { h, l } = (0,_u64_js__WEBPACK_IMPORTED_MODULE_2__.fromBig)(BigInt(this.length));\n        // prettier-ignore\n        const { v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 } = compress(_blake_js__WEBPACK_IMPORTED_MODULE_1__.SIGMA, offset, msg, 10, this.v0, this.v1, this.v2, this.v3, this.v4, this.v5, this.v6, this.v7, B2S_IV[0], B2S_IV[1], B2S_IV[2], B2S_IV[3], l ^ B2S_IV[4], h ^ B2S_IV[5], isLast ? ~B2S_IV[6] : B2S_IV[6], B2S_IV[7]);\n        this.v0 ^= v0 ^ v8;\n        this.v1 ^= v1 ^ v9;\n        this.v2 ^= v2 ^ v10;\n        this.v3 ^= v3 ^ v11;\n        this.v4 ^= v4 ^ v12;\n        this.v5 ^= v5 ^ v13;\n        this.v6 ^= v6 ^ v14;\n        this.v7 ^= v7 ^ v15;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.buffer32.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\n/**\n * BLAKE2s - optimized for 32-bit platforms. JS doesn't have uint64, so it's faster than BLAKE2b.\n * @param msg - message that would be hashed\n * @param opts - dkLen, key, salt, personalization\n */ const blake2s = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapConstructorWithOpts)((opts)=>new BLAKE2s(opts)); //# sourceMappingURL=blake2s.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/blake2s.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/blake3.js":
/*!********************************************************************!*\
  !*** ./node_modules/frog/node_modules/@noble/hashes/esm/blake3.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blake3: () => (/* binding */ blake3)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _u64_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_u64.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/_u64.js\");\n/* harmony import */ var _blake_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_blake.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/_blake.js\");\n/* harmony import */ var _blake2s_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./blake2s.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/blake2s.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/utils.js\");\n\n\n\n\n\nconst SIGMA = /* @__PURE__ */ (()=>{\n    const Id = Array.from({\n        length: 16\n    }, (_, i)=>i);\n    const permute = (arr)=>[\n            2,\n            6,\n            3,\n            10,\n            7,\n            0,\n            4,\n            13,\n            1,\n            11,\n            12,\n            5,\n            9,\n            14,\n            15,\n            8\n        ].map((i)=>arr[i]);\n    const res = [];\n    for(let i = 0, v = Id; i < 7; i++, v = permute(v))res.push(...v);\n    return Uint8Array.from(res);\n})();\n// Why is this so slow? It should be 6x faster than blake2b.\n// - There is only 30% reduction in number of rounds from blake2s\n// - This function uses tree mode to achive parallelisation via SIMD and threading,\n//   however in JS we don't have threads and SIMD, so we get only overhead from tree structure\n// - It is possible to speed it up via Web Workers, hovewer it will make code singnificantly more\n//   complicated, which we are trying to avoid, since this library is intended to be used\n//   for cryptographic purposes. Also, parallelization happens only on chunk level (1024 bytes),\n//   which won't really benefit small inputs.\nclass BLAKE3 extends _blake_js__WEBPACK_IMPORTED_MODULE_0__.BLAKE {\n    constructor(opts = {}, flags = 0){\n        super(64, opts.dkLen === undefined ? 32 : opts.dkLen, {}, Number.MAX_SAFE_INTEGER, 0, 0);\n        this.flags = 0 | 0;\n        this.chunkPos = 0; // Position of current block in chunk\n        this.chunksDone = 0; // How many chunks we already have\n        this.stack = [];\n        // Output\n        this.posOut = 0;\n        this.bufferOut32 = new Uint32Array(16);\n        this.chunkOut = 0; // index of output chunk\n        this.enableXOF = true;\n        this.outputLen = opts.dkLen === undefined ? 32 : opts.dkLen;\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.number)(this.outputLen);\n        if (opts.key !== undefined && opts.context !== undefined) throw new Error(\"Blake3: only key or context can be specified at same time\");\n        else if (opts.key !== undefined) {\n            const key = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.toBytes)(opts.key).slice();\n            if (key.length !== 32) throw new Error(\"Blake3: key should be 32 byte\");\n            this.IV = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.u32)(key);\n            if (!_utils_js__WEBPACK_IMPORTED_MODULE_2__.isLE) (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.byteSwap32)(this.IV);\n            this.flags = flags | 16 /* B3_Flags.KEYED_HASH */ ;\n        } else if (opts.context !== undefined) {\n            const context_key = new BLAKE3({\n                dkLen: 32\n            }, 32 /* B3_Flags.DERIVE_KEY_CONTEXT */ ).update(opts.context).digest();\n            this.IV = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.u32)(context_key);\n            if (!_utils_js__WEBPACK_IMPORTED_MODULE_2__.isLE) (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.byteSwap32)(this.IV);\n            this.flags = flags | 64 /* B3_Flags.DERIVE_KEY_MATERIAL */ ;\n        } else {\n            this.IV = _blake2s_js__WEBPACK_IMPORTED_MODULE_3__.B2S_IV.slice();\n            this.flags = flags;\n        }\n        this.state = this.IV.slice();\n        this.bufferOut = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.u8)(this.bufferOut32);\n    }\n    // Unused\n    get() {\n        return [];\n    }\n    set() {}\n    b2Compress(counter, flags, buf, bufPos = 0) {\n        const { state: s, pos } = this;\n        const { h, l } = (0,_u64_js__WEBPACK_IMPORTED_MODULE_4__.fromBig)(BigInt(counter), true);\n        // prettier-ignore\n        const { v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 } = (0,_blake2s_js__WEBPACK_IMPORTED_MODULE_3__.compress)(SIGMA, bufPos, buf, 7, s[0], s[1], s[2], s[3], s[4], s[5], s[6], s[7], _blake2s_js__WEBPACK_IMPORTED_MODULE_3__.B2S_IV[0], _blake2s_js__WEBPACK_IMPORTED_MODULE_3__.B2S_IV[1], _blake2s_js__WEBPACK_IMPORTED_MODULE_3__.B2S_IV[2], _blake2s_js__WEBPACK_IMPORTED_MODULE_3__.B2S_IV[3], h, l, pos, flags);\n        s[0] = v0 ^ v8;\n        s[1] = v1 ^ v9;\n        s[2] = v2 ^ v10;\n        s[3] = v3 ^ v11;\n        s[4] = v4 ^ v12;\n        s[5] = v5 ^ v13;\n        s[6] = v6 ^ v14;\n        s[7] = v7 ^ v15;\n    }\n    compress(buf, bufPos = 0, isLast = false) {\n        // Compress last block\n        let flags = this.flags;\n        if (!this.chunkPos) flags |= 1 /* B3_Flags.CHUNK_START */ ;\n        if (this.chunkPos === 15 || isLast) flags |= 2 /* B3_Flags.CHUNK_END */ ;\n        if (!isLast) this.pos = this.blockLen;\n        this.b2Compress(this.chunksDone, flags, buf, bufPos);\n        this.chunkPos += 1;\n        // If current block is last in chunk (16 blocks), then compress chunks\n        if (this.chunkPos === 16 || isLast) {\n            let chunk = this.state;\n            this.state = this.IV.slice();\n            // If not the last one, compress only when there are trailing zeros in chunk counter\n            // chunks used as binary tree where current stack is path. Zero means current leaf is finished and can be compressed.\n            // 1 (001) - leaf not finished (just push current chunk to stack)\n            // 2 (010) - leaf finished at depth=1 (merge with last elm on stack and push back)\n            // 3 (011) - last leaf not finished\n            // 4 (100) - leafs finished at depth=1 and depth=2\n            for(let last, chunks = this.chunksDone + 1; isLast || !(chunks & 1); chunks >>= 1){\n                if (!(last = this.stack.pop())) break;\n                this.buffer32.set(last, 0);\n                this.buffer32.set(chunk, 8);\n                this.pos = this.blockLen;\n                this.b2Compress(0, this.flags | 4 /* B3_Flags.PARENT */ , this.buffer32, 0);\n                chunk = this.state;\n                this.state = this.IV.slice();\n            }\n            this.chunksDone++;\n            this.chunkPos = 0;\n            this.stack.push(chunk);\n        }\n        this.pos = 0;\n    }\n    _cloneInto(to) {\n        to = super._cloneInto(to);\n        const { IV, flags, state, chunkPos, posOut, chunkOut, stack, chunksDone } = this;\n        to.state.set(state.slice());\n        to.stack = stack.map((i)=>Uint32Array.from(i));\n        to.IV.set(IV);\n        to.flags = flags;\n        to.chunkPos = chunkPos;\n        to.chunksDone = chunksDone;\n        to.posOut = posOut;\n        to.chunkOut = chunkOut;\n        to.enableXOF = this.enableXOF;\n        to.bufferOut32.set(this.bufferOut32);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n        this.buffer32.fill(0);\n        this.IV.fill(0);\n        this.bufferOut32.fill(0);\n        for (let i of this.stack)i.fill(0);\n    }\n    // Same as b2Compress, but doesn't modify state and returns 16 u32 array (instead of 8)\n    b2CompressOut() {\n        const { state: s, pos, flags, buffer32, bufferOut32: out32 } = this;\n        const { h, l } = (0,_u64_js__WEBPACK_IMPORTED_MODULE_4__.fromBig)(BigInt(this.chunkOut++));\n        if (!_utils_js__WEBPACK_IMPORTED_MODULE_2__.isLE) (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.byteSwap32)(buffer32);\n        // prettier-ignore\n        const { v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 } = (0,_blake2s_js__WEBPACK_IMPORTED_MODULE_3__.compress)(SIGMA, 0, buffer32, 7, s[0], s[1], s[2], s[3], s[4], s[5], s[6], s[7], _blake2s_js__WEBPACK_IMPORTED_MODULE_3__.B2S_IV[0], _blake2s_js__WEBPACK_IMPORTED_MODULE_3__.B2S_IV[1], _blake2s_js__WEBPACK_IMPORTED_MODULE_3__.B2S_IV[2], _blake2s_js__WEBPACK_IMPORTED_MODULE_3__.B2S_IV[3], l, h, pos, flags);\n        out32[0] = v0 ^ v8;\n        out32[1] = v1 ^ v9;\n        out32[2] = v2 ^ v10;\n        out32[3] = v3 ^ v11;\n        out32[4] = v4 ^ v12;\n        out32[5] = v5 ^ v13;\n        out32[6] = v6 ^ v14;\n        out32[7] = v7 ^ v15;\n        out32[8] = s[0] ^ v8;\n        out32[9] = s[1] ^ v9;\n        out32[10] = s[2] ^ v10;\n        out32[11] = s[3] ^ v11;\n        out32[12] = s[4] ^ v12;\n        out32[13] = s[5] ^ v13;\n        out32[14] = s[6] ^ v14;\n        out32[15] = s[7] ^ v15;\n        if (!_utils_js__WEBPACK_IMPORTED_MODULE_2__.isLE) {\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.byteSwap32)(buffer32);\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.byteSwap32)(out32);\n        }\n        this.posOut = 0;\n    }\n    finish() {\n        if (this.finished) return;\n        this.finished = true;\n        // Padding\n        this.buffer.fill(0, this.pos);\n        // Process last chunk\n        let flags = this.flags | 8 /* B3_Flags.ROOT */ ;\n        if (this.stack.length) {\n            flags |= 4 /* B3_Flags.PARENT */ ;\n            if (!_utils_js__WEBPACK_IMPORTED_MODULE_2__.isLE) (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.byteSwap32)(this.buffer32);\n            this.compress(this.buffer32, 0, true);\n            if (!_utils_js__WEBPACK_IMPORTED_MODULE_2__.isLE) (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.byteSwap32)(this.buffer32);\n            this.chunksDone = 0;\n            this.pos = this.blockLen;\n        } else {\n            flags |= (!this.chunkPos ? 1 /* B3_Flags.CHUNK_START */  : 0) | 2 /* B3_Flags.CHUNK_END */ ;\n        }\n        this.flags = flags;\n        this.b2CompressOut();\n    }\n    writeInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this, false);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.bytes)(out);\n        this.finish();\n        const { blockLen, bufferOut } = this;\n        for(let pos = 0, len = out.length; pos < len;){\n            if (this.posOut >= blockLen) this.b2CompressOut();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        if (!this.enableXOF) throw new Error(\"XOF is not possible after digest call\");\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.number)(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.output)(out, this);\n        if (this.finished) throw new Error(\"digest() was already called\");\n        this.enableXOF = false;\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n}\n/**\n * BLAKE3 hash function.\n * @param msg - message that would be hashed\n * @param opts - dkLen, key, context\n */ const blake3 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.wrapXOFConstructorWithOpts)((opts)=>new BLAKE3(opts)); //# sourceMappingURL=blake3.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/blake3.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/cryptoNode.js":
/*!************************************************************************!*\
  !*** ./node_modules/frog/node_modules/@noble/hashes/esm/cryptoNode.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   crypto: () => (/* binding */ crypto)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\n// The file will throw on node.js 14 and earlier.\n// @ts-ignore\n\nconst crypto = /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) && typeof /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) === \"object\" && \"webcrypto\" in /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) ? node_crypto__WEBPACK_IMPORTED_MODULE_0__.webcrypto : undefined; //# sourceMappingURL=cryptoNode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vY3J5cHRvTm9kZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxvRkFBb0Y7QUFDcEYsNEJBQTRCO0FBQzVCLGlEQUFpRDtBQUNqRCxhQUFhO0FBQ3FCO0FBQzNCLE1BQU1DLFNBQVNELDJNQUFFQSxJQUFJLE9BQU9BLDJNQUFFQSxLQUFLLFlBQVksME5BQWlCQSxHQUFHQSxrREFBWSxHQUFHRyxVQUFVLENBQ25HLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2JlZ2dhci0vLi9ub2RlX21vZHVsZXMvZnJvZy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vY3J5cHRvTm9kZS5qcz8wNTMzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFdlIHVzZSBXZWJDcnlwdG8gYWthIGdsb2JhbFRoaXMuY3J5cHRvLCB3aGljaCBleGlzdHMgaW4gYnJvd3NlcnMgYW5kIG5vZGUuanMgMTYrLlxuLy8gU2VlIHV0aWxzLnRzIGZvciBkZXRhaWxzLlxuLy8gVGhlIGZpbGUgd2lsbCB0aHJvdyBvbiBub2RlLmpzIDE0IGFuZCBlYXJsaWVyLlxuLy8gQHRzLWlnbm9yZVxuaW1wb3J0ICogYXMgbmMgZnJvbSAnbm9kZTpjcnlwdG8nO1xuZXhwb3J0IGNvbnN0IGNyeXB0byA9IG5jICYmIHR5cGVvZiBuYyA9PT0gJ29iamVjdCcgJiYgJ3dlYmNyeXB0bycgaW4gbmMgPyBuYy53ZWJjcnlwdG8gOiB1bmRlZmluZWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcnlwdG9Ob2RlLmpzLm1hcCJdLCJuYW1lcyI6WyJuYyIsImNyeXB0byIsIndlYmNyeXB0byIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/cryptoNode.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/sha512.js":
/*!********************************************************************!*\
  !*** ./node_modules/frog/node_modules/@noble/hashes/esm/sha512.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SHA512: () => (/* binding */ SHA512),\n/* harmony export */   sha384: () => (/* binding */ sha384),\n/* harmony export */   sha512: () => (/* binding */ sha512),\n/* harmony export */   sha512_224: () => (/* binding */ sha512_224),\n/* harmony export */   sha512_256: () => (/* binding */ sha512_256)\n/* harmony export */ });\n/* harmony import */ var _md_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_md.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/_md.js\");\n/* harmony import */ var _u64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_u64.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/_u64.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/utils.js\");\n\n\n\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (()=>_u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].split([\n        \"0x428a2f98d728ae22\",\n        \"0x7137449123ef65cd\",\n        \"0xb5c0fbcfec4d3b2f\",\n        \"0xe9b5dba58189dbbc\",\n        \"0x3956c25bf348b538\",\n        \"0x59f111f1b605d019\",\n        \"0x923f82a4af194f9b\",\n        \"0xab1c5ed5da6d8118\",\n        \"0xd807aa98a3030242\",\n        \"0x12835b0145706fbe\",\n        \"0x243185be4ee4b28c\",\n        \"0x550c7dc3d5ffb4e2\",\n        \"0x72be5d74f27b896f\",\n        \"0x80deb1fe3b1696b1\",\n        \"0x9bdc06a725c71235\",\n        \"0xc19bf174cf692694\",\n        \"0xe49b69c19ef14ad2\",\n        \"0xefbe4786384f25e3\",\n        \"0x0fc19dc68b8cd5b5\",\n        \"0x240ca1cc77ac9c65\",\n        \"0x2de92c6f592b0275\",\n        \"0x4a7484aa6ea6e483\",\n        \"0x5cb0a9dcbd41fbd4\",\n        \"0x76f988da831153b5\",\n        \"0x983e5152ee66dfab\",\n        \"0xa831c66d2db43210\",\n        \"0xb00327c898fb213f\",\n        \"0xbf597fc7beef0ee4\",\n        \"0xc6e00bf33da88fc2\",\n        \"0xd5a79147930aa725\",\n        \"0x06ca6351e003826f\",\n        \"0x142929670a0e6e70\",\n        \"0x27b70a8546d22ffc\",\n        \"0x2e1b21385c26c926\",\n        \"0x4d2c6dfc5ac42aed\",\n        \"0x53380d139d95b3df\",\n        \"0x650a73548baf63de\",\n        \"0x766a0abb3c77b2a8\",\n        \"0x81c2c92e47edaee6\",\n        \"0x92722c851482353b\",\n        \"0xa2bfe8a14cf10364\",\n        \"0xa81a664bbc423001\",\n        \"0xc24b8b70d0f89791\",\n        \"0xc76c51a30654be30\",\n        \"0xd192e819d6ef5218\",\n        \"0xd69906245565a910\",\n        \"0xf40e35855771202a\",\n        \"0x106aa07032bbd1b8\",\n        \"0x19a4c116b8d2d0c8\",\n        \"0x1e376c085141ab53\",\n        \"0x2748774cdf8eeb99\",\n        \"0x34b0bcb5e19b48a8\",\n        \"0x391c0cb3c5c95a63\",\n        \"0x4ed8aa4ae3418acb\",\n        \"0x5b9cca4f7763e373\",\n        \"0x682e6ff3d6b2b8a3\",\n        \"0x748f82ee5defb2fc\",\n        \"0x78a5636f43172f60\",\n        \"0x84c87814a1f0ab72\",\n        \"0x8cc702081a6439ec\",\n        \"0x90befffa23631e28\",\n        \"0xa4506cebde82bde9\",\n        \"0xbef9a3f7b2c67915\",\n        \"0xc67178f2e372532b\",\n        \"0xca273eceea26619c\",\n        \"0xd186b8c721c0c207\",\n        \"0xeada7dd6cde0eb1e\",\n        \"0xf57d4f7fee6ed178\",\n        \"0x06f067aa72176fba\",\n        \"0x0a637dc5a2c898a6\",\n        \"0x113f9804bef90dae\",\n        \"0x1b710b35131c471b\",\n        \"0x28db77f523047d84\",\n        \"0x32caab7b40c72493\",\n        \"0x3c9ebe0a15c9bebc\",\n        \"0x431d67c49c100d4c\",\n        \"0x4cc5d4becb3e42b6\",\n        \"0x597f299cfc657e2a\",\n        \"0x5fcb6fab3ad6faec\",\n        \"0x6c44198c4a475817\"\n    ].map((n)=>BigInt(n))))();\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nclass SHA512 extends _md_js__WEBPACK_IMPORTED_MODULE_1__.HashMD {\n    constructor(){\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [\n            Ah,\n            Al,\n            Bh,\n            Bl,\n            Ch,\n            Cl,\n            Dh,\n            Dl,\n            Eh,\n            El,\n            Fh,\n            Fl,\n            Gh,\n            Gl,\n            Hh,\n            Hl\n        ];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for(let i = 0; i < 16; i++, offset += 4){\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32(offset += 4);\n        }\n        for(let i = 16; i < 80; i++){\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSH(W15h, W15l, 1) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSH(W15h, W15l, 8) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].shrSH(W15h, W15l, 7);\n            const s0l = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSL(W15h, W15l, 1) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSL(W15h, W15l, 8) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSH(W2h, W2l, 19) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBH(W2h, W2l, 61) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].shrSH(W2h, W2l, 6);\n            const s1l = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSL(W2h, W2l, 19) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBL(W2h, W2l, 61) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for(let i = 0; i < 80; i++){\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSH(Eh, El, 14) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSH(Eh, El, 18) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBH(Eh, El, 41);\n            const sigma1l = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSL(Eh, El, 14) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSL(Eh, El, 18) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = Eh & Fh ^ ~Eh & Gh;\n            const CHIl = El & Fl ^ ~El & Gl;\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSH(Ah, Al, 28) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBH(Ah, Al, 34) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBH(Ah, Al, 39);\n            const sigma0l = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSL(Ah, Al, 28) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBL(Ah, Al, 34) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBL(Ah, Al, 39);\n            const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;\n            const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add3L(T1l, sigma0l, MAJl);\n            Ah = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_224 extends SHA512 {\n    constructor(){\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor(){\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor(){\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nconst sha512 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.wrapConstructor)(()=>new SHA512());\nconst sha512_224 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.wrapConstructor)(()=>new SHA512_224());\nconst sha512_256 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.wrapConstructor)(()=>new SHA512_256());\nconst sha384 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.wrapConstructor)(()=>new SHA384()); //# sourceMappingURL=sha512.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnJvZy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vc2hhNTEyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQWtDO0FBQ047QUFDaUI7QUFDN0MsMEdBQTBHO0FBQzFHLGtCQUFrQjtBQUNsQixNQUFNLENBQUNHLFdBQVdDLFVBQVUsR0FBbUIsYUFBSCxHQUFJLEtBQU1ILHFEQUFTLENBQUM7UUFDNUQ7UUFBc0I7UUFBc0I7UUFBc0I7UUFDbEU7UUFBc0I7UUFBc0I7UUFBc0I7UUFDbEU7UUFBc0I7UUFBc0I7UUFBc0I7UUFDbEU7UUFBc0I7UUFBc0I7UUFBc0I7UUFDbEU7UUFBc0I7UUFBc0I7UUFBc0I7UUFDbEU7UUFBc0I7UUFBc0I7UUFBc0I7UUFDbEU7UUFBc0I7UUFBc0I7UUFBc0I7UUFDbEU7UUFBc0I7UUFBc0I7UUFBc0I7UUFDbEU7UUFBc0I7UUFBc0I7UUFBc0I7UUFDbEU7UUFBc0I7UUFBc0I7UUFBc0I7UUFDbEU7UUFBc0I7UUFBc0I7UUFBc0I7UUFDbEU7UUFBc0I7UUFBc0I7UUFBc0I7UUFDbEU7UUFBc0I7UUFBc0I7UUFBc0I7UUFDbEU7UUFBc0I7UUFBc0I7UUFBc0I7UUFDbEU7UUFBc0I7UUFBc0I7UUFBc0I7UUFDbEU7UUFBc0I7UUFBc0I7UUFBc0I7UUFDbEU7UUFBc0I7UUFBc0I7UUFBc0I7UUFDbEU7UUFBc0I7UUFBc0I7UUFBc0I7UUFDbEU7UUFBc0I7UUFBc0I7UUFBc0I7UUFDbEU7UUFBc0I7UUFBc0I7UUFBc0I7S0FDckUsQ0FBQ0ssR0FBRyxDQUFDQyxDQUFBQSxJQUFLQyxPQUFPRCxJQUFHO0FBQ3JCLDREQUE0RDtBQUM1RCxNQUFNRSxhQUFhLGFBQWEsR0FBRyxJQUFJQyxZQUFZO0FBQ25ELE1BQU1DLGFBQWEsYUFBYSxHQUFHLElBQUlELFlBQVk7QUFDNUMsTUFBTUUsZUFBZVosMENBQU1BO0lBQzlCYSxhQUFjO1FBQ1YsS0FBSyxDQUFDLEtBQUssSUFBSSxJQUFJO1FB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O1FBQ3ZCLElBQUksQ0FBQ0MsRUFBRSxHQUFHLGFBQWE7UUFDdkIsSUFBSSxDQUFDQyxFQUFFLEdBQUcsYUFBYTtRQUN2QixJQUFJLENBQUNDLEVBQUUsR0FBRyxhQUFhO1FBQ3ZCLElBQUksQ0FBQ0MsRUFBRSxHQUFHLGFBQWE7UUFDdkIsSUFBSSxDQUFDQyxFQUFFLEdBQUcsYUFBYTtRQUN2QixJQUFJLENBQUNDLEVBQUUsR0FBRyxhQUFhO1FBQ3ZCLElBQUksQ0FBQ0MsRUFBRSxHQUFHLGFBQWE7UUFDdkIsSUFBSSxDQUFDQyxFQUFFLEdBQUcsYUFBYTtRQUN2QixJQUFJLENBQUNDLEVBQUUsR0FBRyxhQUFhO1FBQ3ZCLElBQUksQ0FBQ0MsRUFBRSxHQUFHLGFBQWE7UUFDdkIsSUFBSSxDQUFDQyxFQUFFLEdBQUcsYUFBYTtRQUN2QixJQUFJLENBQUNDLEVBQUUsR0FBRyxhQUFhO1FBQ3ZCLElBQUksQ0FBQ0MsRUFBRSxHQUFHLGFBQWE7UUFDdkIsSUFBSSxDQUFDQyxFQUFFLEdBQUcsYUFBYTtRQUN2QixJQUFJLENBQUNrRCxTQUFTLEdBQUc7SUFDckI7QUFDSjtBQUNPLE1BQU1HLFNBQVMsYUFBYSxHQUFHaEYsMERBQWVBLENBQUMsSUFBTSxJQUFJVSxVQUFVO0FBQ25FLE1BQU11RSxhQUFhLGFBQWEsR0FBR2pGLDBEQUFlQSxDQUFDLElBQU0sSUFBSTRFLGNBQWM7QUFDM0UsTUFBTU0sYUFBYSxhQUFhLEdBQUdsRiwwREFBZUEsQ0FBQyxJQUFNLElBQUk4RSxjQUFjO0FBQzNFLE1BQU1LLFNBQVMsYUFBYSxHQUFHbkYsMERBQWVBLENBQUMsSUFBTSxJQUFJK0UsVUFBVSxDQUMxRSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZWdnYXItLy4vbm9kZV9tb2R1bGVzL2Zyb2cvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL3NoYTUxMi5qcz8xNTE0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhhc2hNRCB9IGZyb20gJy4vX21kLmpzJztcbmltcG9ydCB1NjQgZnJvbSAnLi9fdTY0LmpzJztcbmltcG9ydCB7IHdyYXBDb25zdHJ1Y3RvciB9IGZyb20gJy4vdXRpbHMuanMnO1xuLy8gUm91bmQgY29udGFudHMgKGZpcnN0IDMyIGJpdHMgb2YgdGhlIGZyYWN0aW9uYWwgcGFydHMgb2YgdGhlIGN1YmUgcm9vdHMgb2YgdGhlIGZpcnN0IDgwIHByaW1lcyAyLi40MDkpOlxuLy8gcHJldHRpZXItaWdub3JlXG5jb25zdCBbU0hBNTEyX0toLCBTSEE1MTJfS2xdID0gLyogQF9fUFVSRV9fICovICgoKSA9PiB1NjQuc3BsaXQoW1xuICAgICcweDQyOGEyZjk4ZDcyOGFlMjInLCAnMHg3MTM3NDQ5MTIzZWY2NWNkJywgJzB4YjVjMGZiY2ZlYzRkM2IyZicsICcweGU5YjVkYmE1ODE4OWRiYmMnLFxuICAgICcweDM5NTZjMjViZjM0OGI1MzgnLCAnMHg1OWYxMTFmMWI2MDVkMDE5JywgJzB4OTIzZjgyYTRhZjE5NGY5YicsICcweGFiMWM1ZWQ1ZGE2ZDgxMTgnLFxuICAgICcweGQ4MDdhYTk4YTMwMzAyNDInLCAnMHgxMjgzNWIwMTQ1NzA2ZmJlJywgJzB4MjQzMTg1YmU0ZWU0YjI4YycsICcweDU1MGM3ZGMzZDVmZmI0ZTInLFxuICAgICcweDcyYmU1ZDc0ZjI3Yjg5NmYnLCAnMHg4MGRlYjFmZTNiMTY5NmIxJywgJzB4OWJkYzA2YTcyNWM3MTIzNScsICcweGMxOWJmMTc0Y2Y2OTI2OTQnLFxuICAgICcweGU0OWI2OWMxOWVmMTRhZDInLCAnMHhlZmJlNDc4NjM4NGYyNWUzJywgJzB4MGZjMTlkYzY4YjhjZDViNScsICcweDI0MGNhMWNjNzdhYzljNjUnLFxuICAgICcweDJkZTkyYzZmNTkyYjAyNzUnLCAnMHg0YTc0ODRhYTZlYTZlNDgzJywgJzB4NWNiMGE5ZGNiZDQxZmJkNCcsICcweDc2Zjk4OGRhODMxMTUzYjUnLFxuICAgICcweDk4M2U1MTUyZWU2NmRmYWInLCAnMHhhODMxYzY2ZDJkYjQzMjEwJywgJzB4YjAwMzI3Yzg5OGZiMjEzZicsICcweGJmNTk3ZmM3YmVlZjBlZTQnLFxuICAgICcweGM2ZTAwYmYzM2RhODhmYzInLCAnMHhkNWE3OTE0NzkzMGFhNzI1JywgJzB4MDZjYTYzNTFlMDAzODI2ZicsICcweDE0MjkyOTY3MGEwZTZlNzAnLFxuICAgICcweDI3YjcwYTg1NDZkMjJmZmMnLCAnMHgyZTFiMjEzODVjMjZjOTI2JywgJzB4NGQyYzZkZmM1YWM0MmFlZCcsICcweDUzMzgwZDEzOWQ5NWIzZGYnLFxuICAgICcweDY1MGE3MzU0OGJhZjYzZGUnLCAnMHg3NjZhMGFiYjNjNzdiMmE4JywgJzB4ODFjMmM5MmU0N2VkYWVlNicsICcweDkyNzIyYzg1MTQ4MjM1M2InLFxuICAgICcweGEyYmZlOGExNGNmMTAzNjQnLCAnMHhhODFhNjY0YmJjNDIzMDAxJywgJzB4YzI0YjhiNzBkMGY4OTc5MScsICcweGM3NmM1MWEzMDY1NGJlMzAnLFxuICAgICcweGQxOTJlODE5ZDZlZjUyMTgnLCAnMHhkNjk5MDYyNDU1NjVhOTEwJywgJzB4ZjQwZTM1ODU1NzcxMjAyYScsICcweDEwNmFhMDcwMzJiYmQxYjgnLFxuICAgICcweDE5YTRjMTE2YjhkMmQwYzgnLCAnMHgxZTM3NmMwODUxNDFhYjUzJywgJzB4Mjc0ODc3NGNkZjhlZWI5OScsICcweDM0YjBiY2I1ZTE5YjQ4YTgnLFxuICAgICcweDM5MWMwY2IzYzVjOTVhNjMnLCAnMHg0ZWQ4YWE0YWUzNDE4YWNiJywgJzB4NWI5Y2NhNGY3NzYzZTM3MycsICcweDY4MmU2ZmYzZDZiMmI4YTMnLFxuICAgICcweDc0OGY4MmVlNWRlZmIyZmMnLCAnMHg3OGE1NjM2ZjQzMTcyZjYwJywgJzB4ODRjODc4MTRhMWYwYWI3MicsICcweDhjYzcwMjA4MWE2NDM5ZWMnLFxuICAgICcweDkwYmVmZmZhMjM2MzFlMjgnLCAnMHhhNDUwNmNlYmRlODJiZGU5JywgJzB4YmVmOWEzZjdiMmM2NzkxNScsICcweGM2NzE3OGYyZTM3MjUzMmInLFxuICAgICcweGNhMjczZWNlZWEyNjYxOWMnLCAnMHhkMTg2YjhjNzIxYzBjMjA3JywgJzB4ZWFkYTdkZDZjZGUwZWIxZScsICcweGY1N2Q0ZjdmZWU2ZWQxNzgnLFxuICAgICcweDA2ZjA2N2FhNzIxNzZmYmEnLCAnMHgwYTYzN2RjNWEyYzg5OGE2JywgJzB4MTEzZjk4MDRiZWY5MGRhZScsICcweDFiNzEwYjM1MTMxYzQ3MWInLFxuICAgICcweDI4ZGI3N2Y1MjMwNDdkODQnLCAnMHgzMmNhYWI3YjQwYzcyNDkzJywgJzB4M2M5ZWJlMGExNWM5YmViYycsICcweDQzMWQ2N2M0OWMxMDBkNGMnLFxuICAgICcweDRjYzVkNGJlY2IzZTQyYjYnLCAnMHg1OTdmMjk5Y2ZjNjU3ZTJhJywgJzB4NWZjYjZmYWIzYWQ2ZmFlYycsICcweDZjNDQxOThjNGE0NzU4MTcnXG5dLm1hcChuID0+IEJpZ0ludChuKSkpKSgpO1xuLy8gVGVtcG9yYXJ5IGJ1ZmZlciwgbm90IHVzZWQgdG8gc3RvcmUgYW55dGhpbmcgYmV0d2VlbiBydW5zXG5jb25zdCBTSEE1MTJfV19IID0gLyogQF9fUFVSRV9fICovIG5ldyBVaW50MzJBcnJheSg4MCk7XG5jb25zdCBTSEE1MTJfV19MID0gLyogQF9fUFVSRV9fICovIG5ldyBVaW50MzJBcnJheSg4MCk7XG5leHBvcnQgY2xhc3MgU0hBNTEyIGV4dGVuZHMgSGFzaE1EIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoMTI4LCA2NCwgMTYsIGZhbHNlKTtcbiAgICAgICAgLy8gV2UgY2Fubm90IHVzZSBhcnJheSBoZXJlIHNpbmNlIGFycmF5IGFsbG93cyBpbmRleGluZyBieSB2YXJpYWJsZSB3aGljaCBtZWFucyBvcHRpbWl6ZXIvY29tcGlsZXIgY2Fubm90IHVzZSByZWdpc3RlcnMuXG4gICAgICAgIC8vIEFsc28gbG9va3MgY2xlYW5lciBhbmQgZWFzaWVyIHRvIHZlcmlmeSB3aXRoIHNwZWMuXG4gICAgICAgIC8vIEluaXRpYWwgc3RhdGUgKGZpcnN0IDMyIGJpdHMgb2YgdGhlIGZyYWN0aW9uYWwgcGFydHMgb2YgdGhlIHNxdWFyZSByb290cyBvZiB0aGUgZmlyc3QgOCBwcmltZXMgMi4uMTkpOlxuICAgICAgICAvLyBoIC0tIGhpZ2ggMzIgYml0cywgbCAtLSBsb3cgMzIgYml0c1xuICAgICAgICB0aGlzLkFoID0gMHg2YTA5ZTY2NyB8IDA7XG4gICAgICAgIHRoaXMuQWwgPSAweGYzYmNjOTA4IHwgMDtcbiAgICAgICAgdGhpcy5CaCA9IDB4YmI2N2FlODUgfCAwO1xuICAgICAgICB0aGlzLkJsID0gMHg4NGNhYTczYiB8IDA7XG4gICAgICAgIHRoaXMuQ2ggPSAweDNjNmVmMzcyIHwgMDtcbiAgICAgICAgdGhpcy5DbCA9IDB4ZmU5NGY4MmIgfCAwO1xuICAgICAgICB0aGlzLkRoID0gMHhhNTRmZjUzYSB8IDA7XG4gICAgICAgIHRoaXMuRGwgPSAweDVmMWQzNmYxIHwgMDtcbiAgICAgICAgdGhpcy5FaCA9IDB4NTEwZTUyN2YgfCAwO1xuICAgICAgICB0aGlzLkVsID0gMHhhZGU2ODJkMSB8IDA7XG4gICAgICAgIHRoaXMuRmggPSAweDliMDU2ODhjIHwgMDtcbiAgICAgICAgdGhpcy5GbCA9IDB4MmIzZTZjMWYgfCAwO1xuICAgICAgICB0aGlzLkdoID0gMHgxZjgzZDlhYiB8IDA7XG4gICAgICAgIHRoaXMuR2wgPSAweGZiNDFiZDZiIHwgMDtcbiAgICAgICAgdGhpcy5IaCA9IDB4NWJlMGNkMTkgfCAwO1xuICAgICAgICB0aGlzLkhsID0gMHgxMzdlMjE3OSB8IDA7XG4gICAgfVxuICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgIGdldCgpIHtcbiAgICAgICAgY29uc3QgeyBBaCwgQWwsIEJoLCBCbCwgQ2gsIENsLCBEaCwgRGwsIEVoLCBFbCwgRmgsIEZsLCBHaCwgR2wsIEhoLCBIbCB9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIFtBaCwgQWwsIEJoLCBCbCwgQ2gsIENsLCBEaCwgRGwsIEVoLCBFbCwgRmgsIEZsLCBHaCwgR2wsIEhoLCBIbF07XG4gICAgfVxuICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgIHNldChBaCwgQWwsIEJoLCBCbCwgQ2gsIENsLCBEaCwgRGwsIEVoLCBFbCwgRmgsIEZsLCBHaCwgR2wsIEhoLCBIbCkge1xuICAgICAgICB0aGlzLkFoID0gQWggfCAwO1xuICAgICAgICB0aGlzLkFsID0gQWwgfCAwO1xuICAgICAgICB0aGlzLkJoID0gQmggfCAwO1xuICAgICAgICB0aGlzLkJsID0gQmwgfCAwO1xuICAgICAgICB0aGlzLkNoID0gQ2ggfCAwO1xuICAgICAgICB0aGlzLkNsID0gQ2wgfCAwO1xuICAgICAgICB0aGlzLkRoID0gRGggfCAwO1xuICAgICAgICB0aGlzLkRsID0gRGwgfCAwO1xuICAgICAgICB0aGlzLkVoID0gRWggfCAwO1xuICAgICAgICB0aGlzLkVsID0gRWwgfCAwO1xuICAgICAgICB0aGlzLkZoID0gRmggfCAwO1xuICAgICAgICB0aGlzLkZsID0gRmwgfCAwO1xuICAgICAgICB0aGlzLkdoID0gR2ggfCAwO1xuICAgICAgICB0aGlzLkdsID0gR2wgfCAwO1xuICAgICAgICB0aGlzLkhoID0gSGggfCAwO1xuICAgICAgICB0aGlzLkhsID0gSGwgfCAwO1xuICAgIH1cbiAgICBwcm9jZXNzKHZpZXcsIG9mZnNldCkge1xuICAgICAgICAvLyBFeHRlbmQgdGhlIGZpcnN0IDE2IHdvcmRzIGludG8gdGhlIHJlbWFpbmluZyA2NCB3b3JkcyB3WzE2Li43OV0gb2YgdGhlIG1lc3NhZ2Ugc2NoZWR1bGUgYXJyYXlcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrLCBvZmZzZXQgKz0gNCkge1xuICAgICAgICAgICAgU0hBNTEyX1dfSFtpXSA9IHZpZXcuZ2V0VWludDMyKG9mZnNldCk7XG4gICAgICAgICAgICBTSEE1MTJfV19MW2ldID0gdmlldy5nZXRVaW50MzIoKG9mZnNldCArPSA0KSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDE2OyBpIDwgODA7IGkrKykge1xuICAgICAgICAgICAgLy8gczAgOj0gKHdbaS0xNV0gcmlnaHRyb3RhdGUgMSkgeG9yICh3W2ktMTVdIHJpZ2h0cm90YXRlIDgpIHhvciAod1tpLTE1XSByaWdodHNoaWZ0IDcpXG4gICAgICAgICAgICBjb25zdCBXMTVoID0gU0hBNTEyX1dfSFtpIC0gMTVdIHwgMDtcbiAgICAgICAgICAgIGNvbnN0IFcxNWwgPSBTSEE1MTJfV19MW2kgLSAxNV0gfCAwO1xuICAgICAgICAgICAgY29uc3QgczBoID0gdTY0LnJvdHJTSChXMTVoLCBXMTVsLCAxKSBeIHU2NC5yb3RyU0goVzE1aCwgVzE1bCwgOCkgXiB1NjQuc2hyU0goVzE1aCwgVzE1bCwgNyk7XG4gICAgICAgICAgICBjb25zdCBzMGwgPSB1NjQucm90clNMKFcxNWgsIFcxNWwsIDEpIF4gdTY0LnJvdHJTTChXMTVoLCBXMTVsLCA4KSBeIHU2NC5zaHJTTChXMTVoLCBXMTVsLCA3KTtcbiAgICAgICAgICAgIC8vIHMxIDo9ICh3W2ktMl0gcmlnaHRyb3RhdGUgMTkpIHhvciAod1tpLTJdIHJpZ2h0cm90YXRlIDYxKSB4b3IgKHdbaS0yXSByaWdodHNoaWZ0IDYpXG4gICAgICAgICAgICBjb25zdCBXMmggPSBTSEE1MTJfV19IW2kgLSAyXSB8IDA7XG4gICAgICAgICAgICBjb25zdCBXMmwgPSBTSEE1MTJfV19MW2kgLSAyXSB8IDA7XG4gICAgICAgICAgICBjb25zdCBzMWggPSB1NjQucm90clNIKFcyaCwgVzJsLCAxOSkgXiB1NjQucm90ckJIKFcyaCwgVzJsLCA2MSkgXiB1NjQuc2hyU0goVzJoLCBXMmwsIDYpO1xuICAgICAgICAgICAgY29uc3QgczFsID0gdTY0LnJvdHJTTChXMmgsIFcybCwgMTkpIF4gdTY0LnJvdHJCTChXMmgsIFcybCwgNjEpIF4gdTY0LnNoclNMKFcyaCwgVzJsLCA2KTtcbiAgICAgICAgICAgIC8vIFNIQTI1Nl9XW2ldID0gczAgKyBzMSArIFNIQTI1Nl9XW2kgLSA3XSArIFNIQTI1Nl9XW2kgLSAxNl07XG4gICAgICAgICAgICBjb25zdCBTVU1sID0gdTY0LmFkZDRMKHMwbCwgczFsLCBTSEE1MTJfV19MW2kgLSA3XSwgU0hBNTEyX1dfTFtpIC0gMTZdKTtcbiAgICAgICAgICAgIGNvbnN0IFNVTWggPSB1NjQuYWRkNEgoU1VNbCwgczBoLCBzMWgsIFNIQTUxMl9XX0hbaSAtIDddLCBTSEE1MTJfV19IW2kgLSAxNl0pO1xuICAgICAgICAgICAgU0hBNTEyX1dfSFtpXSA9IFNVTWggfCAwO1xuICAgICAgICAgICAgU0hBNTEyX1dfTFtpXSA9IFNVTWwgfCAwO1xuICAgICAgICB9XG4gICAgICAgIGxldCB7IEFoLCBBbCwgQmgsIEJsLCBDaCwgQ2wsIERoLCBEbCwgRWgsIEVsLCBGaCwgRmwsIEdoLCBHbCwgSGgsIEhsIH0gPSB0aGlzO1xuICAgICAgICAvLyBDb21wcmVzc2lvbiBmdW5jdGlvbiBtYWluIGxvb3AsIDgwIHJvdW5kc1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDgwOyBpKyspIHtcbiAgICAgICAgICAgIC8vIFMxIDo9IChlIHJpZ2h0cm90YXRlIDE0KSB4b3IgKGUgcmlnaHRyb3RhdGUgMTgpIHhvciAoZSByaWdodHJvdGF0ZSA0MSlcbiAgICAgICAgICAgIGNvbnN0IHNpZ21hMWggPSB1NjQucm90clNIKEVoLCBFbCwgMTQpIF4gdTY0LnJvdHJTSChFaCwgRWwsIDE4KSBeIHU2NC5yb3RyQkgoRWgsIEVsLCA0MSk7XG4gICAgICAgICAgICBjb25zdCBzaWdtYTFsID0gdTY0LnJvdHJTTChFaCwgRWwsIDE0KSBeIHU2NC5yb3RyU0woRWgsIEVsLCAxOCkgXiB1NjQucm90ckJMKEVoLCBFbCwgNDEpO1xuICAgICAgICAgICAgLy9jb25zdCBUMSA9IChIICsgc2lnbWExICsgQ2hpKEUsIEYsIEcpICsgU0hBMjU2X0tbaV0gKyBTSEEyNTZfV1tpXSkgfCAwO1xuICAgICAgICAgICAgY29uc3QgQ0hJaCA9IChFaCAmIEZoKSBeICh+RWggJiBHaCk7XG4gICAgICAgICAgICBjb25zdCBDSElsID0gKEVsICYgRmwpIF4gKH5FbCAmIEdsKTtcbiAgICAgICAgICAgIC8vIFQxID0gSCArIHNpZ21hMSArIENoaShFLCBGLCBHKSArIFNIQTUxMl9LW2ldICsgU0hBNTEyX1dbaV1cbiAgICAgICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICAgICAgY29uc3QgVDFsbCA9IHU2NC5hZGQ1TChIbCwgc2lnbWExbCwgQ0hJbCwgU0hBNTEyX0tsW2ldLCBTSEE1MTJfV19MW2ldKTtcbiAgICAgICAgICAgIGNvbnN0IFQxaCA9IHU2NC5hZGQ1SChUMWxsLCBIaCwgc2lnbWExaCwgQ0hJaCwgU0hBNTEyX0toW2ldLCBTSEE1MTJfV19IW2ldKTtcbiAgICAgICAgICAgIGNvbnN0IFQxbCA9IFQxbGwgfCAwO1xuICAgICAgICAgICAgLy8gUzAgOj0gKGEgcmlnaHRyb3RhdGUgMjgpIHhvciAoYSByaWdodHJvdGF0ZSAzNCkgeG9yIChhIHJpZ2h0cm90YXRlIDM5KVxuICAgICAgICAgICAgY29uc3Qgc2lnbWEwaCA9IHU2NC5yb3RyU0goQWgsIEFsLCAyOCkgXiB1NjQucm90ckJIKEFoLCBBbCwgMzQpIF4gdTY0LnJvdHJCSChBaCwgQWwsIDM5KTtcbiAgICAgICAgICAgIGNvbnN0IHNpZ21hMGwgPSB1NjQucm90clNMKEFoLCBBbCwgMjgpIF4gdTY0LnJvdHJCTChBaCwgQWwsIDM0KSBeIHU2NC5yb3RyQkwoQWgsIEFsLCAzOSk7XG4gICAgICAgICAgICBjb25zdCBNQUpoID0gKEFoICYgQmgpIF4gKEFoICYgQ2gpIF4gKEJoICYgQ2gpO1xuICAgICAgICAgICAgY29uc3QgTUFKbCA9IChBbCAmIEJsKSBeIChBbCAmIENsKSBeIChCbCAmIENsKTtcbiAgICAgICAgICAgIEhoID0gR2ggfCAwO1xuICAgICAgICAgICAgSGwgPSBHbCB8IDA7XG4gICAgICAgICAgICBHaCA9IEZoIHwgMDtcbiAgICAgICAgICAgIEdsID0gRmwgfCAwO1xuICAgICAgICAgICAgRmggPSBFaCB8IDA7XG4gICAgICAgICAgICBGbCA9IEVsIHwgMDtcbiAgICAgICAgICAgICh7IGg6IEVoLCBsOiBFbCB9ID0gdTY0LmFkZChEaCB8IDAsIERsIHwgMCwgVDFoIHwgMCwgVDFsIHwgMCkpO1xuICAgICAgICAgICAgRGggPSBDaCB8IDA7XG4gICAgICAgICAgICBEbCA9IENsIHwgMDtcbiAgICAgICAgICAgIENoID0gQmggfCAwO1xuICAgICAgICAgICAgQ2wgPSBCbCB8IDA7XG4gICAgICAgICAgICBCaCA9IEFoIHwgMDtcbiAgICAgICAgICAgIEJsID0gQWwgfCAwO1xuICAgICAgICAgICAgY29uc3QgQWxsID0gdTY0LmFkZDNMKFQxbCwgc2lnbWEwbCwgTUFKbCk7XG4gICAgICAgICAgICBBaCA9IHU2NC5hZGQzSChBbGwsIFQxaCwgc2lnbWEwaCwgTUFKaCk7XG4gICAgICAgICAgICBBbCA9IEFsbCB8IDA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWRkIHRoZSBjb21wcmVzc2VkIGNodW5rIHRvIHRoZSBjdXJyZW50IGhhc2ggdmFsdWVcbiAgICAgICAgKHsgaDogQWgsIGw6IEFsIH0gPSB1NjQuYWRkKHRoaXMuQWggfCAwLCB0aGlzLkFsIHwgMCwgQWggfCAwLCBBbCB8IDApKTtcbiAgICAgICAgKHsgaDogQmgsIGw6IEJsIH0gPSB1NjQuYWRkKHRoaXMuQmggfCAwLCB0aGlzLkJsIHwgMCwgQmggfCAwLCBCbCB8IDApKTtcbiAgICAgICAgKHsgaDogQ2gsIGw6IENsIH0gPSB1NjQuYWRkKHRoaXMuQ2ggfCAwLCB0aGlzLkNsIHwgMCwgQ2ggfCAwLCBDbCB8IDApKTtcbiAgICAgICAgKHsgaDogRGgsIGw6IERsIH0gPSB1NjQuYWRkKHRoaXMuRGggfCAwLCB0aGlzLkRsIHwgMCwgRGggfCAwLCBEbCB8IDApKTtcbiAgICAgICAgKHsgaDogRWgsIGw6IEVsIH0gPSB1NjQuYWRkKHRoaXMuRWggfCAwLCB0aGlzLkVsIHwgMCwgRWggfCAwLCBFbCB8IDApKTtcbiAgICAgICAgKHsgaDogRmgsIGw6IEZsIH0gPSB1NjQuYWRkKHRoaXMuRmggfCAwLCB0aGlzLkZsIHwgMCwgRmggfCAwLCBGbCB8IDApKTtcbiAgICAgICAgKHsgaDogR2gsIGw6IEdsIH0gPSB1NjQuYWRkKHRoaXMuR2ggfCAwLCB0aGlzLkdsIHwgMCwgR2ggfCAwLCBHbCB8IDApKTtcbiAgICAgICAgKHsgaDogSGgsIGw6IEhsIH0gPSB1NjQuYWRkKHRoaXMuSGggfCAwLCB0aGlzLkhsIHwgMCwgSGggfCAwLCBIbCB8IDApKTtcbiAgICAgICAgdGhpcy5zZXQoQWgsIEFsLCBCaCwgQmwsIENoLCBDbCwgRGgsIERsLCBFaCwgRWwsIEZoLCBGbCwgR2gsIEdsLCBIaCwgSGwpO1xuICAgIH1cbiAgICByb3VuZENsZWFuKCkge1xuICAgICAgICBTSEE1MTJfV19ILmZpbGwoMCk7XG4gICAgICAgIFNIQTUxMl9XX0wuZmlsbCgwKTtcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5idWZmZXIuZmlsbCgwKTtcbiAgICAgICAgdGhpcy5zZXQoMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCk7XG4gICAgfVxufVxuY2xhc3MgU0hBNTEyXzIyNCBleHRlbmRzIFNIQTUxMiB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8vIGggLS0gaGlnaCAzMiBiaXRzLCBsIC0tIGxvdyAzMiBiaXRzXG4gICAgICAgIHRoaXMuQWggPSAweDhjM2QzN2M4IHwgMDtcbiAgICAgICAgdGhpcy5BbCA9IDB4MTk1NDRkYTIgfCAwO1xuICAgICAgICB0aGlzLkJoID0gMHg3M2UxOTk2NiB8IDA7XG4gICAgICAgIHRoaXMuQmwgPSAweDg5ZGNkNGQ2IHwgMDtcbiAgICAgICAgdGhpcy5DaCA9IDB4MWRmYWI3YWUgfCAwO1xuICAgICAgICB0aGlzLkNsID0gMHgzMmZmOWM4MiB8IDA7XG4gICAgICAgIHRoaXMuRGggPSAweDY3OWRkNTE0IHwgMDtcbiAgICAgICAgdGhpcy5EbCA9IDB4NTgyZjlmY2YgfCAwO1xuICAgICAgICB0aGlzLkVoID0gMHgwZjZkMmI2OSB8IDA7XG4gICAgICAgIHRoaXMuRWwgPSAweDdiZDQ0ZGE4IHwgMDtcbiAgICAgICAgdGhpcy5GaCA9IDB4NzdlMzZmNzMgfCAwO1xuICAgICAgICB0aGlzLkZsID0gMHgwNGM0ODk0MiB8IDA7XG4gICAgICAgIHRoaXMuR2ggPSAweDNmOWQ4NWE4IHwgMDtcbiAgICAgICAgdGhpcy5HbCA9IDB4NmExZDM2YzggfCAwO1xuICAgICAgICB0aGlzLkhoID0gMHgxMTEyZTZhZCB8IDA7XG4gICAgICAgIHRoaXMuSGwgPSAweDkxZDY5MmExIHwgMDtcbiAgICAgICAgdGhpcy5vdXRwdXRMZW4gPSAyODtcbiAgICB9XG59XG5jbGFzcyBTSEE1MTJfMjU2IGV4dGVuZHMgU0hBNTEyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgLy8gaCAtLSBoaWdoIDMyIGJpdHMsIGwgLS0gbG93IDMyIGJpdHNcbiAgICAgICAgdGhpcy5BaCA9IDB4MjIzMTIxOTQgfCAwO1xuICAgICAgICB0aGlzLkFsID0gMHhmYzJiZjcyYyB8IDA7XG4gICAgICAgIHRoaXMuQmggPSAweDlmNTU1ZmEzIHwgMDtcbiAgICAgICAgdGhpcy5CbCA9IDB4Yzg0YzY0YzIgfCAwO1xuICAgICAgICB0aGlzLkNoID0gMHgyMzkzYjg2YiB8IDA7XG4gICAgICAgIHRoaXMuQ2wgPSAweDZmNTNiMTUxIHwgMDtcbiAgICAgICAgdGhpcy5EaCA9IDB4OTYzODc3MTkgfCAwO1xuICAgICAgICB0aGlzLkRsID0gMHg1OTQwZWFiZCB8IDA7XG4gICAgICAgIHRoaXMuRWggPSAweDk2MjgzZWUyIHwgMDtcbiAgICAgICAgdGhpcy5FbCA9IDB4YTg4ZWZmZTMgfCAwO1xuICAgICAgICB0aGlzLkZoID0gMHhiZTVlMWUyNSB8IDA7XG4gICAgICAgIHRoaXMuRmwgPSAweDUzODYzOTkyIHwgMDtcbiAgICAgICAgdGhpcy5HaCA9IDB4MmIwMTk5ZmMgfCAwO1xuICAgICAgICB0aGlzLkdsID0gMHgyYzg1YjhhYSB8IDA7XG4gICAgICAgIHRoaXMuSGggPSAweDBlYjcyZGRjIHwgMDtcbiAgICAgICAgdGhpcy5IbCA9IDB4ODFjNTJjYTIgfCAwO1xuICAgICAgICB0aGlzLm91dHB1dExlbiA9IDMyO1xuICAgIH1cbn1cbmNsYXNzIFNIQTM4NCBleHRlbmRzIFNIQTUxMiB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8vIGggLS0gaGlnaCAzMiBiaXRzLCBsIC0tIGxvdyAzMiBiaXRzXG4gICAgICAgIHRoaXMuQWggPSAweGNiYmI5ZDVkIHwgMDtcbiAgICAgICAgdGhpcy5BbCA9IDB4YzEwNTllZDggfCAwO1xuICAgICAgICB0aGlzLkJoID0gMHg2MjlhMjkyYSB8IDA7XG4gICAgICAgIHRoaXMuQmwgPSAweDM2N2NkNTA3IHwgMDtcbiAgICAgICAgdGhpcy5DaCA9IDB4OTE1OTAxNWEgfCAwO1xuICAgICAgICB0aGlzLkNsID0gMHgzMDcwZGQxNyB8IDA7XG4gICAgICAgIHRoaXMuRGggPSAweDE1MmZlY2Q4IHwgMDtcbiAgICAgICAgdGhpcy5EbCA9IDB4ZjcwZTU5MzkgfCAwO1xuICAgICAgICB0aGlzLkVoID0gMHg2NzMzMjY2NyB8IDA7XG4gICAgICAgIHRoaXMuRWwgPSAweGZmYzAwYjMxIHwgMDtcbiAgICAgICAgdGhpcy5GaCA9IDB4OGViNDRhODcgfCAwO1xuICAgICAgICB0aGlzLkZsID0gMHg2ODU4MTUxMSB8IDA7XG4gICAgICAgIHRoaXMuR2ggPSAweGRiMGMyZTBkIHwgMDtcbiAgICAgICAgdGhpcy5HbCA9IDB4NjRmOThmYTcgfCAwO1xuICAgICAgICB0aGlzLkhoID0gMHg0N2I1NDgxZCB8IDA7XG4gICAgICAgIHRoaXMuSGwgPSAweGJlZmE0ZmE0IHwgMDtcbiAgICAgICAgdGhpcy5vdXRwdXRMZW4gPSA0ODtcbiAgICB9XG59XG5leHBvcnQgY29uc3Qgc2hhNTEyID0gLyogQF9fUFVSRV9fICovIHdyYXBDb25zdHJ1Y3RvcigoKSA9PiBuZXcgU0hBNTEyKCkpO1xuZXhwb3J0IGNvbnN0IHNoYTUxMl8yMjQgPSAvKiBAX19QVVJFX18gKi8gd3JhcENvbnN0cnVjdG9yKCgpID0+IG5ldyBTSEE1MTJfMjI0KCkpO1xuZXhwb3J0IGNvbnN0IHNoYTUxMl8yNTYgPSAvKiBAX19QVVJFX18gKi8gd3JhcENvbnN0cnVjdG9yKCgpID0+IG5ldyBTSEE1MTJfMjU2KCkpO1xuZXhwb3J0IGNvbnN0IHNoYTM4NCA9IC8qIEBfX1BVUkVfXyAqLyB3cmFwQ29uc3RydWN0b3IoKCkgPT4gbmV3IFNIQTM4NCgpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYTUxMi5qcy5tYXAiXSwibmFtZXMiOlsiSGFzaE1EIiwidTY0Iiwid3JhcENvbnN0cnVjdG9yIiwiU0hBNTEyX0toIiwiU0hBNTEyX0tsIiwic3BsaXQiLCJtYXAiLCJuIiwiQmlnSW50IiwiU0hBNTEyX1dfSCIsIlVpbnQzMkFycmF5IiwiU0hBNTEyX1dfTCIsIlNIQTUxMiIsImNvbnN0cnVjdG9yIiwiQWgiLCJBbCIsIkJoIiwiQmwiLCJDaCIsIkNsIiwiRGgiLCJEbCIsIkVoIiwiRWwiLCJGaCIsIkZsIiwiR2giLCJHbCIsIkhoIiwiSGwiLCJnZXQiLCJzZXQiLCJwcm9jZXNzIiwidmlldyIsIm9mZnNldCIsImkiLCJnZXRVaW50MzIiLCJXMTVoIiwiVzE1bCIsInMwaCIsInJvdHJTSCIsInNoclNIIiwiczBsIiwicm90clNMIiwic2hyU0wiLCJXMmgiLCJXMmwiLCJzMWgiLCJyb3RyQkgiLCJzMWwiLCJyb3RyQkwiLCJTVU1sIiwiYWRkNEwiLCJTVU1oIiwiYWRkNEgiLCJzaWdtYTFoIiwic2lnbWExbCIsIkNISWgiLCJDSElsIiwiVDFsbCIsImFkZDVMIiwiVDFoIiwiYWRkNUgiLCJUMWwiLCJzaWdtYTBoIiwic2lnbWEwbCIsIk1BSmgiLCJNQUpsIiwiaCIsImwiLCJhZGQiLCJBbGwiLCJhZGQzTCIsImFkZDNIIiwicm91bmRDbGVhbiIsImZpbGwiLCJkZXN0cm95IiwiYnVmZmVyIiwiU0hBNTEyXzIyNCIsIm91dHB1dExlbiIsIlNIQTUxMl8yNTYiLCJTSEEzODQiLCJzaGE1MTIiLCJzaGE1MTJfMjI0Iiwic2hhNTEyXzI1NiIsInNoYTM4NCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/sha512.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/utils.js":
/*!*******************************************************************!*\
  !*** ./node_modules/frog/node_modules/@noble/hashes/esm/utils.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hash: () => (/* binding */ Hash),\n/* harmony export */   asyncLoop: () => (/* binding */ asyncLoop),\n/* harmony export */   byteSwap: () => (/* binding */ byteSwap),\n/* harmony export */   byteSwap32: () => (/* binding */ byteSwap32),\n/* harmony export */   byteSwapIfBE: () => (/* binding */ byteSwapIfBE),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   checkOpts: () => (/* binding */ checkOpts),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   createView: () => (/* binding */ createView),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   isBytes: () => (/* binding */ isBytes),\n/* harmony export */   isLE: () => (/* binding */ isLE),\n/* harmony export */   nextTick: () => (/* binding */ nextTick),\n/* harmony export */   randomBytes: () => (/* binding */ randomBytes),\n/* harmony export */   rotl: () => (/* binding */ rotl),\n/* harmony export */   rotr: () => (/* binding */ rotr),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   u32: () => (/* binding */ u32),\n/* harmony export */   u8: () => (/* binding */ u8),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   wrapConstructor: () => (/* binding */ wrapConstructor),\n/* harmony export */   wrapConstructorWithOpts: () => (/* binding */ wrapConstructorWithOpts),\n/* harmony export */   wrapXOFConstructorWithOpts: () => (/* binding */ wrapXOFConstructorWithOpts)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/crypto */ \"(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/cryptoNode.js\");\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assert.js */ \"(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/_assert.js\");\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\n\n\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nfunction isBytes(a) {\n    return a instanceof Uint8Array || a != null && typeof a === \"object\" && a.constructor.name === \"Uint8Array\";\n}\n// Cast array to different type\nconst u8 = (arr)=>new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nconst u32 = (arr)=>new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nconst createView = (arr)=>new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift)=>word << 32 - shift | word >>> shift;\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift)=>word << shift | word >>> 32 - shift >>> 0;\nconst isLE = new Uint8Array(new Uint32Array([\n    0x11223344\n]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nconst byteSwap = (word)=>word << 24 & 0xff000000 | word << 8 & 0xff0000 | word >>> 8 & 0xff00 | word >>> 24 & 0xff;\n// Conditionally byte swap if on a big-endian platform\nconst byteSwapIfBE = isLE ? (n)=>n : (n)=>byteSwap(n);\n// In place byte swap for Uint32Array\nfunction byteSwap32(arr) {\n    for(let i = 0; i < arr.length; i++){\n        arr[i] = byteSwap(arr[i]);\n    }\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({\n    length: 256\n}, (_, i)=>i.toString(16).padStart(2, \"0\"));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */ function bytesToHex(bytes) {\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.bytes)(bytes);\n    // pre-caching improves the speed 6x\n    let hex = \"\";\n    for(let i = 0; i < bytes.length; i++){\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = {\n    _0: 48,\n    _9: 57,\n    _A: 65,\n    _F: 70,\n    _a: 97,\n    _f: 102\n};\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */ function hexToBytes(hex) {\n    if (typeof hex !== \"string\") throw new Error(\"hex string expected, got \" + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2) throw new Error(\"padded hex string expected, got unpadded hex of length \" + hl);\n    const array = new Uint8Array(al);\n    for(let ai = 0, hi = 0; ai < al; ai++, hi += 2){\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async ()=>{};\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for(let i = 0; i < iters; i++){\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick) continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */ function utf8ToBytes(str) {\n    if (typeof str !== \"string\") throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */ function toBytes(data) {\n    if (typeof data === \"string\") data = utf8ToBytes(data);\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.bytes)(data);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */ function concatBytes(...arrays) {\n    let sum = 0;\n    for(let i = 0; i < arrays.length; i++){\n        const a = arrays[i];\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.bytes)(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for(let i = 0, pad = 0; i < arrays.length; i++){\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== \"[object Object]\") throw new Error(\"Options should be object or undefined\");\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nfunction wrapConstructor(hashCons) {\n    const hashC = (msg)=>hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = ()=>hashCons();\n    return hashC;\n}\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts)=>hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts)=>hashCons(opts);\n    return hashC;\n}\nfunction wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts)=>hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts)=>hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */ function randomBytes(bytesLength = 32) {\n    if (_noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__.crypto && typeof _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__.crypto.getRandomValues === \"function\") {\n        return _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__.crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error(\"crypto.getRandomValues must be defined\");\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/frog/node_modules/@noble/hashes/esm/utils.js\n");

/***/ })

};
;